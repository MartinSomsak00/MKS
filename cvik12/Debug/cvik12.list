
cvik12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003138  08013eac  08013eac  00023eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fe4  08016fe4  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08016fe4  08016fe4  00026fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fec  08016fec  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fec  08016fec  00026fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ff0  08016ff0  00026ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08016ff4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
 10 .bss          00010b0c  2000007c  2000007c  0003007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010b88  20010b88  0003007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002c68b  00000000  00000000  000300ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000071b1  00000000  00000000  0005c77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020a8  00000000  00000000  00063930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019ee  00000000  00000000  000659d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033517  00000000  00000000  000673c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00033f16  00000000  00000000  0009a8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe52a  00000000  00000000  000ce7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008fb8  00000000  00000000  001ccd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001d5cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013e94 	.word	0x08013e94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08013e94 	.word	0x08013e94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000098 	.word	0x20000098
 80005bc:	20000138 	.word	0x20000138

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fbc3 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f81d 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8af 	bl	8000730 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 f883 	bl	80006dc <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <main+0x40>)
 80005d8:	1d3c      	adds	r4, r7, #4
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fb77 	bl	8003ce0 <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <main+0x44>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f003 fb5b 	bl	8003cb2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x3c>
 80005fe:	bf00      	nop
 8000600:	08013eb8 	.word	0x08013eb8
 8000604:	2000037c 	.word	0x2000037c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fd3b 	bl	8013092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000668:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fda9 	bl	80021e4 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 f934 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 f80a 	bl	80026d4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c6:	f000 f91d 	bl	8000904 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART3_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART3_UART_Init+0x4c>)
 8000714:	f002 fcde 	bl	80030d4 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f8f1 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000338 	.word	0x20000338
 800072c:	40004800 	.word	0x40004800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <MX_GPIO_Init+0x188>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a5a      	ldr	r2, [pc, #360]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a53      	ldr	r2, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x188>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a4c      	ldr	r2, [pc, #304]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a3e      	ldr	r2, [pc, #248]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4831      	ldr	r0, [pc, #196]	; (80008bc <MX_GPIO_Init+0x18c>)
 80007f6:	f001 fcdb 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4830      	ldr	r0, [pc, #192]	; (80008c0 <MX_GPIO_Init+0x190>)
 8000800:	f001 fcd6 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	482a      	ldr	r0, [pc, #168]	; (80008c4 <MX_GPIO_Init+0x194>)
 800081c:	f001 fb1c 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4820      	ldr	r0, [pc, #128]	; (80008bc <MX_GPIO_Init+0x18c>)
 800083a:	f001 fb0d 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x190>)
 8000856:	f001 faff 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_GPIO_Init+0x190>)
 800086e:	f001 faf3 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000872:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000884:	230a      	movs	r3, #10
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <MX_GPIO_Init+0x198>)
 8000890:	f001 fae2 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_GPIO_Init+0x198>)
 80008aa:	f001 fad5 	bl	8001e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000

080008cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008d4:	f002 fec0 	bl	8003658 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d8:	2001      	movs	r0, #1
 80008da:	f003 fa4d 	bl	8003d78 <osDelay>
 80008de:	e7fb      	b.n	80008d8 <StartDefaultTask+0xc>

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 fa4f 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40002000 	.word	0x40002000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a11      	ldr	r2, [pc, #68]	; (8000964 <HAL_MspInit+0x54>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_MspInit+0x54>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 fb19 	bl	8000f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12c      	bne.n	80009e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d4:	2307      	movs	r3, #7
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0x8c>)
 80009e0:	f001 fa3a 	bl	8001e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40004800 	.word	0x40004800
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <HAL_InitTick+0xe4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a32      	ldr	r2, [pc, #200]	; (8000adc <HAL_InitTick+0xe4>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_InitTick+0xe4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 f870 	bl	8002b14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a3e:	f002 f841 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8000a42:	6378      	str	r0, [r7, #52]	; 0x34
 8000a44:	e004      	b.n	8000a50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a46:	f002 f83d 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <HAL_InitTick+0xf0>)
 8000a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a84:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a86:	f002 f877 	bl	8002b78 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11b      	bne.n	8000ad0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a9a:	f002 f8c7 	bl	8002c2c <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000aac:	202d      	movs	r0, #45	; 0x2d
 8000aae:	f000 fa89 	bl	8000fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d808      	bhi.n	8000aca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	202d      	movs	r0, #45	; 0x2d
 8000abe:	f000 fa65 	bl	8000f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_InitTick+0xf4>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e002      	b.n	8000ad0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3738      	adds	r7, #56	; 0x38
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20000380 	.word	0x20000380
 8000ae8:	40002000 	.word	0x40002000
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b22:	f002 f8f3 	bl	8002d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000380 	.word	0x20000380

08000b30 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ETH_IRQHandler+0x10>)
 8000b36:	f000 fccb 	bl	80014d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20004ee8 	.word	0x20004ee8

08000b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return 1;
 8000b48:	2301      	movs	r3, #1
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_kill>:

int _kill(int pid, int sig)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <_kill+0x20>)
 8000b60:	2216      	movs	r2, #22
 8000b62:	601a      	str	r2, [r3, #0]
  return -1;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20010b78 	.word	0x20010b78

08000b78 <_exit>:

void _exit (int status)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ffe5 	bl	8000b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b8a:	e7fe      	b.n	8000b8a <_exit+0x12>

08000b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
  }

  return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e009      	b.n	8000bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf1      	blt.n	8000bd8 <_write+0x12>
  }
  return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c26:	605a      	str	r2, [r3, #4]
  return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_isatty>:

int _isatty(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d205      	bcs.n	8000ca4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <_sbrk+0x6c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	20030000 	.word	0x20030000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	200003c8 	.word	0x200003c8
 8000cd0:	20010b88 	.word	0x20010b88
 8000cd4:	20010b78 	.word	0x20010b78

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f012 fa57 	bl	80131dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fc47 	bl	80005c0 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d40:	08016ff4 	.word	0x08016ff4
  ldr r2, =_sbss
 8000d44:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d48:	20010b88 	.word	0x20010b88

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f8fc 	bl	8000f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f7ff fe3a 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fdc4 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200003cc 	.word	0x200003cc

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200003cc 	.word	0x200003cc

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff4c 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9e:	f7ff ff61 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f7ff ffb1 	bl	8000f10 <NVIC_EncodePriority>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff80 	bl	8000ebc <__NVIC_SetPriority>
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff54 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e06c      	b.n	80010cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d106      	bne.n	800100a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2223      	movs	r2, #35	; 0x23
 8001000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f869 	bl	80010dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_ETH_Init+0xf4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <HAL_ETH_Init+0xf4>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_ETH_Init+0xf4>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_ETH_Init+0xf8>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a2b      	ldr	r2, [pc, #172]	; (80010d8 <HAL_ETH_Init+0xf8>)
 800102c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001030:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_ETH_Init+0xf8>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4927      	ldr	r1, [pc, #156]	; (80010d8 <HAL_ETH_Init+0xf8>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <HAL_ETH_Init+0xf8>)
 8001042:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800105a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800105c:	f7ff feae 	bl	8000dbc <HAL_GetTick>
 8001060:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001062:	e011      	b.n	8001088 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001064:	f7ff feaa 	bl	8000dbc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001072:	d909      	bls.n	8001088 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2204      	movs	r2, #4
 8001078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	22e0      	movs	r2, #224	; 0xe0
 8001080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e021      	b.n	80010cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1e4      	bne.n	8001064 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fc36 	bl	800190c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fcdd 	bl	8001a60 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fd33 	bl	8001b12 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	461a      	mov	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 fc9b 	bl	80019f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2210      	movs	r2, #16
 80010c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800

080010dc <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d109      	bne.n	8001114 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e045      	b.n	80011a0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800111a:	2b23      	cmp	r3, #35	; 0x23
 800111c:	d13f      	bne.n	800119e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001126:	2201      	movs	r2, #1
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fd5e 	bl	8001bec <ETH_Prepare_Tx_Descriptors>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113c:	f043 0202 	orr.w	r2, r3, #2
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e02a      	b.n	80011a0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800114a:	f3bf 8f4f 	dsb	sy
}
 800114e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	2b03      	cmp	r3, #3
 8001160:	d904      	bls.n	800116c <HAL_ETH_Transmit_IT+0x7c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	1f1a      	subs	r2, r3, #4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00d      	beq.n	800119a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001186:	461a      	mov	r2, r3
 8001188:	2304      	movs	r3, #4
 800118a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001194:	461a      	mov	r2, r3
 8001196:	2300      	movs	r3, #0
 8001198:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
  }
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0a8      	b.n	8001326 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011da:	2b23      	cmp	r3, #35	; 0x23
 80011dc:	d001      	beq.n	80011e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0a1      	b.n	8001326 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	3212      	adds	r2, #18
 80011ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011f8:	f1c3 0304 	rsb	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80011fe:	e06a      	b.n	80012d6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	699a      	ldr	r2, [r3, #24]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	69da      	ldr	r2, [r3, #28]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HAL_ETH_ReadData+0x88>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d040      	beq.n	80012b2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00c      	beq.n	8001274 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	0c1b      	lsrs	r3, r3, #16
 8001260:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001264:	3b04      	subs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800128c:	461a      	mov	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	b29b      	uxth	r3, r3
 8001292:	f002 fc99 	bl	8003bc8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	441a      	add	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d902      	bls.n	80012c4 <HAL_ETH_ReadData+0x11c>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b04      	subs	r3, #4
 80012c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	3212      	adds	r2, #18
 80012ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db06      	blt.n	80012ec <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d202      	bcs.n	80012ec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d089      	beq.n	8001200 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	441a      	add	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f815 	bl	8001330 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	e000      	b.n	8001326 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800133c:	2301      	movs	r3, #1
 800133e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001344:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	3212      	adds	r2, #18
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001356:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001358:	e040      	b.n	80013dc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d112      	bne.n	8001388 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fbfe 	bl	8003b68 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	74fb      	strb	r3, [r7, #19]
 8001376:	e007      	b.n	8001388 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	461a      	mov	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	461a      	mov	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001388:	7cfb      	ldrb	r3, [r7, #19]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d026      	beq.n	80013dc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <ETH_UpdateDescriptor+0xe4>)
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	e003      	b.n	80013a6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80013a4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013a6:	f3bf 8f5f 	dmb	sy
}
 80013aa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	3301      	adds	r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d902      	bls.n	80013ca <ETH_UpdateDescriptor+0x9a>
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3b04      	subs	r3, #4
 80013c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	3212      	adds	r2, #18
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	3b01      	subs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <ETH_UpdateDescriptor+0xb8>
 80013e2:	7cfb      	ldrb	r3, [r7, #19]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1b8      	bne.n	800135a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d00c      	beq.n	800140c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fa:	461a      	mov	r2, r3
 80013fc:	2300      	movs	r3, #0
 80013fe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	80004600 	.word	0x80004600

08001418 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3318      	adds	r3, #24
 8001424:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001436:	e03f      	b.n	80014b8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001438:	2301      	movs	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3b01      	subs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	3304      	adds	r3, #4
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	3301      	adds	r3, #1
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d028      	beq.n	80014b8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68d9      	ldr	r1, [r3, #12]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db1b      	blt.n	80014b4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3304      	adds	r3, #4
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fbdd 	bl	8003c48 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3304      	adds	r3, #4
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	3301      	adds	r3, #1
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014b2:	e001      	b.n	80014b8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_ETH_ReleaseTxPacket+0xac>
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1b9      	bne.n	8001438 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	2b40      	cmp	r3, #64	; 0x40
 80014e8:	d112      	bne.n	8001510 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d109      	bne.n	8001510 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001504:	461a      	mov	r2, r3
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_ETH_IRQHandler+0x178>)
 8001508:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f002 f906 	bl	800371c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d113      	bne.n	800154a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10a      	bne.n	800154a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	461a      	mov	r2, r3
 800153e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001542:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f002 f8f9 	bl	800373c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800155c:	d14c      	bne.n	80015f8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800156c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001570:	d142      	bne.n	80015f8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001578:	f043 0208 	orr.w	r2, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001594:	d11a      	bne.n	80015cc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_ETH_IRQHandler+0x17c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80015bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015c0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	22e0      	movs	r2, #224	; 0xe0
 80015c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80015ca:	e012      	b.n	80015f2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	f248 6380 	movw	r3, #34432	; 0x8680
 80015da:	4013      	ands	r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	461a      	mov	r2, r3
 80015ec:	f248 6380 	movw	r3, #34432	; 0x8680
 80015f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f002 f8b2 	bl	800375c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b08      	cmp	r3, #8
 8001604:	d10e      	bne.n	8001624 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f81c 	bl	8001654 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_ETH_IRQHandler+0x180>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_ETH_IRQHandler+0x180>)
 8001632:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001636:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f815 	bl	8001668 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	00010040 	.word	0x00010040
 800164c:	007e2000 	.word	0x007e2000
 8001650:	40013c00 	.word	0x40013c00

08001654 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <ETH_SetMACConfig+0x15c>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	7c1b      	ldrb	r3, [r3, #16]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <ETH_SetMACConfig+0x28>
 80016ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016be:	e000      	b.n	80016c2 <ETH_SetMACConfig+0x2a>
 80016c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7c5b      	ldrb	r3, [r3, #17]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <ETH_SetMACConfig+0x38>
 80016ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ce:	e000      	b.n	80016d2 <ETH_SetMACConfig+0x3a>
 80016d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	7fdb      	ldrb	r3, [r3, #31]
 80016de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	7f92      	ldrb	r2, [r2, #30]
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d102      	bne.n	80016f6 <ETH_SetMACConfig+0x5e>
 80016f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f4:	e000      	b.n	80016f8 <ETH_SetMACConfig+0x60>
 80016f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80016f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	7f1b      	ldrb	r3, [r3, #28]
 80016fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001700:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	791b      	ldrb	r3, [r3, #4]
 800170c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800170e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001716:	2a00      	cmp	r2, #0
 8001718:	d102      	bne.n	8001720 <ETH_SetMACConfig+0x88>
 800171a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800171e:	e000      	b.n	8001722 <ETH_SetMACConfig+0x8a>
 8001720:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001722:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	7bdb      	ldrb	r3, [r3, #15]
 8001728:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800172a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001730:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001738:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800173a:	4313      	orrs	r3, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fb3e 	bl	8000dd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800176e:	4013      	ands	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800177e:	2a00      	cmp	r2, #0
 8001780:	d101      	bne.n	8001786 <ETH_SetMACConfig+0xee>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	e000      	b.n	8001788 <ETH_SetMACConfig+0xf0>
 8001786:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001788:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800178e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001796:	2a01      	cmp	r2, #1
 8001798:	d101      	bne.n	800179e <ETH_SetMACConfig+0x106>
 800179a:	2208      	movs	r2, #8
 800179c:	e000      	b.n	80017a0 <ETH_SetMACConfig+0x108>
 800179e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80017a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80017a8:	2a01      	cmp	r2, #1
 80017aa:	d101      	bne.n	80017b0 <ETH_SetMACConfig+0x118>
 80017ac:	2204      	movs	r2, #4
 80017ae:	e000      	b.n	80017b2 <ETH_SetMACConfig+0x11a>
 80017b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80017b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80017ba:	2a01      	cmp	r2, #1
 80017bc:	d101      	bne.n	80017c2 <ETH_SetMACConfig+0x12a>
 80017be:	2202      	movs	r2, #2
 80017c0:	e000      	b.n	80017c4 <ETH_SetMACConfig+0x12c>
 80017c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017c4:	4313      	orrs	r3, r2
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff faf9 	bl	8000dd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	619a      	str	r2, [r3, #24]
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	ff20810f 	.word	0xff20810f

080017f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <ETH_SetDMAConfig+0x110>)
 8001812:	4013      	ands	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	7b1b      	ldrb	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <ETH_SetDMAConfig+0x2c>
 800181e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001822:	e000      	b.n	8001826 <ETH_SetDMAConfig+0x2e>
 8001824:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	7b5b      	ldrb	r3, [r3, #13]
 800182a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800182c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	7f52      	ldrb	r2, [r2, #29]
 8001832:	2a00      	cmp	r2, #0
 8001834:	d102      	bne.n	800183c <ETH_SetDMAConfig+0x44>
 8001836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800183a:	e000      	b.n	800183e <ETH_SetDMAConfig+0x46>
 800183c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800183e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	7b9b      	ldrb	r3, [r3, #14]
 8001844:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001846:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800184c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	7f1b      	ldrb	r3, [r3, #28]
 8001852:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001854:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	7f9b      	ldrb	r3, [r3, #30]
 800185a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800185c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001862:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800186a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800186c:	4313      	orrs	r3, r2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4313      	orrs	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187c:	461a      	mov	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff faa0 	bl	8000dd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80018b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80018c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fa71 	bl	8000dd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	f8de3f23 	.word	0xf8de3f23

0800190c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0a6      	sub	sp, #152	; 0x98
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001914:	2301      	movs	r3, #1
 8001916:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001920:	2300      	movs	r3, #0
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800192a:	2301      	movs	r3, #1
 800192c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001948:	2300      	movs	r3, #0
 800194a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001952:	2300      	movs	r3, #0
 8001954:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800196e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001978:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001980:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fe86 	bl	8001698 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800198c:	2301      	movs	r3, #1
 800198e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001990:	2301      	movs	r3, #1
 8001992:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800199a:	2301      	movs	r3, #1
 800199c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff08 	bl	80017f8 <ETH_SetDMAConfig>
}
 80019e8:	bf00      	nop
 80019ea:	3798      	adds	r7, #152	; 0x98
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3305      	adds	r3, #5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	3204      	adds	r2, #4
 8001a08:	7812      	ldrb	r2, [r2, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <ETH_MACAddressConfig+0x68>)
 8001a12:	4413      	add	r3, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	061a      	lsls	r2, r3, #24
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3302      	adds	r3, #2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	4313      	orrs	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <ETH_MACAddressConfig+0x6c>)
 8001a42:	4413      	add	r3, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40028040 	.word	0x40028040
 8001a5c:	40028044 	.word	0x40028044

08001a60 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e03e      	b.n	8001aec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68d9      	ldr	r1, [r3, #12]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	3206      	adds	r2, #6
 8001aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d80c      	bhi.n	8001ad0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68d9      	ldr	r1, [r3, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	e004      	b.n	8001ada <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d9bd      	bls.n	8001a6e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b04:	611a      	str	r2, [r3, #16]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e046      	b.n	8001bae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6919      	ldr	r1, [r3, #16]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001b64:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b72:	68b9      	ldr	r1, [r7, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	3212      	adds	r2, #18
 8001b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d80c      	bhi.n	8001b9e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6919      	ldr	r1, [r3, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	e004      	b.n	8001ba8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d9b5      	bls.n	8001b20 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bde:	60da      	str	r2, [r3, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08d      	sub	sp, #52	; 0x34
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3318      	adds	r3, #24
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c2e:	d007      	beq.n	8001c40 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	3304      	adds	r3, #4
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8001c40:	2302      	movs	r3, #2
 8001c42:	e103      	b.n	8001e4c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	3301      	adds	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001c5c:	f023 031f 	bic.w	r3, r3, #31
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d008      	beq.n	8001c88 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8001cca:	f3bf 8f5f 	dmb	sy
}
 8001cce:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001cdc:	e084      	b.n	8001de8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e005      	b.n	8001d0a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d902      	bls.n	8001d1c <ETH_Prepare_Tx_Descriptors+0x130>
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	3b04      	subs	r3, #4
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d3e:	d007      	beq.n	8001d50 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	3304      	adds	r3, #4
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d029      	beq.n	8001da4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	e019      	b.n	8001d98 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8001d64:	f3bf 8f5f 	dmb	sy
}
 8001d68:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	3301      	adds	r3, #1
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d902      	bls.n	8001d88 <ETH_Prepare_Tx_Descriptors+0x19c>
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	3b04      	subs	r3, #4
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d90:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	3301      	adds	r3, #1
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d3e1      	bcc.n	8001d64 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8001da0:	2302      	movs	r3, #2
 8001da2:	e053      	b.n	8001e4c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3301      	adds	r3, #1
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001dc2:	f023 031f 	bic.w	r3, r3, #31
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	6852      	ldr	r2, [r2, #4]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001dd6:	f3bf 8f5f 	dmb	sy
}
 8001dda:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f47f af76 	bne.w	8001cde <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e005      	b.n	8001e12 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e22:	6979      	ldr	r1, [r7, #20]
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	3304      	adds	r3, #4
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e32:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	4413      	add	r3, r2
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8001e46:	b662      	cpsie	i
}
 8001e48:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3734      	adds	r7, #52	; 0x34
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e177      	b.n	8002164 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8166 	bne.w	800215e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80c0 	beq.w	800215e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_GPIO_Init+0x324>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_GPIO_Init+0x324>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_GPIO_Init+0x324>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a61      	ldr	r2, [pc, #388]	; (8002180 <HAL_GPIO_Init+0x328>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_GPIO_Init+0x32c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d037      	beq.n	8002096 <HAL_GPIO_Init+0x23e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a57      	ldr	r2, [pc, #348]	; (8002188 <HAL_GPIO_Init+0x330>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d031      	beq.n	8002092 <HAL_GPIO_Init+0x23a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_GPIO_Init+0x334>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <HAL_GPIO_Init+0x236>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a55      	ldr	r2, [pc, #340]	; (8002190 <HAL_GPIO_Init+0x338>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d025      	beq.n	800208a <HAL_GPIO_Init+0x232>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_GPIO_Init+0x33c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <HAL_GPIO_Init+0x22e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a53      	ldr	r2, [pc, #332]	; (8002198 <HAL_GPIO_Init+0x340>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x22a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_GPIO_Init+0x344>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <HAL_GPIO_Init+0x348>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_GPIO_Init+0x34c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_GPIO_Init+0x350>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x21a>
 800206e:	2309      	movs	r3, #9
 8002070:	e012      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002072:	230a      	movs	r3, #10
 8002074:	e010      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002076:	2308      	movs	r3, #8
 8002078:	e00e      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800207a:	2307      	movs	r3, #7
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800207e:	2306      	movs	r3, #6
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x240>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x240>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	; (8002180 <HAL_GPIO_Init+0x328>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_GPIO_Init+0x354>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a34      	ldr	r2, [pc, #208]	; (80021ac <HAL_GPIO_Init+0x354>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_GPIO_Init+0x354>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <HAL_GPIO_Init+0x354>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_GPIO_Init+0x354>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_GPIO_Init+0x354>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x354>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_GPIO_Init+0x354>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f ae84 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40021400 	.word	0x40021400
 800219c:	40021800 	.word	0x40021800
 80021a0:	40021c00 	.word	0x40021c00
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40022400 	.word	0x40022400
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e267      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d075      	beq.n	80022ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002202:	4b88      	ldr	r3, [pc, #544]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b04      	cmp	r3, #4
 800220c:	d00c      	beq.n	8002228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220e:	4b85      	ldr	r3, [pc, #532]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002216:	2b08      	cmp	r3, #8
 8002218:	d112      	bne.n	8002240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002226:	d10b      	bne.n	8002240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	4b7e      	ldr	r3, [pc, #504]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d05b      	beq.n	80022ec <HAL_RCC_OscConfig+0x108>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d157      	bne.n	80022ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e242      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x74>
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xb0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x98>
 8002262:	4b70      	ldr	r3, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6f      	ldr	r2, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6c      	ldr	r2, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xb0>
 800227c:	4b69      	ldr	r3, [pc, #420]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a68      	ldr	r2, [pc, #416]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b66      	ldr	r3, [pc, #408]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a65      	ldr	r2, [pc, #404]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fd8e 	bl	8000dbc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fd8a 	bl	8000dbc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e207      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b5b      	ldr	r3, [pc, #364]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xc0>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fd7a 	bl	8000dbc <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fd76 	bl	8000dbc <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1f3      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b51      	ldr	r3, [pc, #324]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0xe8>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d063      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230e:	2b08      	cmp	r3, #8
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d116      	bne.n	800234c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x152>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1c7      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4937      	ldr	r1, [pc, #220]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	e03a      	b.n	80023c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x244>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe fd2f 	bl	8000dbc <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002362:	f7fe fd2b 	bl	8000dbc <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1a8      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4925      	ldr	r1, [pc, #148]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_OscConfig+0x244>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7fe fd0e 	bl	8000dbc <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a4:	f7fe fd0a 	bl	8000dbc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e187      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d036      	beq.n	800243c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d016      	beq.n	8002404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_RCC_OscConfig+0x248>)
 80023d8:	2201      	movs	r2, #1
 80023da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe fcee 	bl	8000dbc <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e4:	f7fe fcea 	bl	8000dbc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e167      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_OscConfig+0x240>)
 80023f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x200>
 8002402:	e01b      	b.n	800243c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_OscConfig+0x248>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe fcd7 	bl	8000dbc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	e00e      	b.n	8002430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fcd3 	bl	8000dbc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d907      	bls.n	8002430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e150      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
 8002424:	40023800 	.word	0x40023800
 8002428:	42470000 	.word	0x42470000
 800242c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1ea      	bne.n	8002412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 8097 	beq.w	8002578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b77      	ldr	r3, [pc, #476]	; (8002658 <HAL_RCC_OscConfig+0x474>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b74      	ldr	r3, [pc, #464]	; (8002658 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a73      	ldr	r2, [pc, #460]	; (8002658 <HAL_RCC_OscConfig+0x474>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fc93 	bl	8000dbc <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fc8f 	bl	8000dbc <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e10c      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <HAL_RCC_OscConfig+0x474>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x2ea>
 80024c0:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a63      	ldr	r2, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
 80024cc:	e01c      	b.n	8002508 <HAL_RCC_OscConfig+0x324>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x30c>
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024da:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6713      	str	r3, [r2, #112]	; 0x70
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a5b      	ldr	r2, [pc, #364]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0x324>
 80024f0:	4b58      	ldr	r3, [pc, #352]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f4:	4a57      	ldr	r2, [pc, #348]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	; 0x70
 80024fc:	4b55      	ldr	r3, [pc, #340]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a54      	ldr	r2, [pc, #336]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d015      	beq.n	800253c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fc54 	bl	8000dbc <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	e00a      	b.n	800252e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002518:	f7fe fc50 	bl	8000dbc <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e0cb      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252e:	4b49      	ldr	r3, [pc, #292]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0ee      	beq.n	8002518 <HAL_RCC_OscConfig+0x334>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe fc3e 	bl	8000dbc <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe fc3a 	bl	8000dbc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0b5      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1ee      	bne.n	8002544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	4a38      	ldr	r2, [pc, #224]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002576:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80a1 	beq.w	80026c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d05c      	beq.n	8002648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d141      	bne.n	800261a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_OscConfig+0x478>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fc0e 	bl	8000dbc <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fc0a 	bl	8000dbc <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e087      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	019b      	lsls	r3, r3, #6
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	3b01      	subs	r3, #1
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	061b      	lsls	r3, r3, #24
 80025e6:	491b      	ldr	r1, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x478>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7fe fbe3 	bl	8000dbc <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7fe fbdf 	bl	8000dbc <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e05c      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x416>
 8002618:	e054      	b.n	80026c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x478>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fbcc 	bl	8000dbc <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fbc8 	bl	8000dbc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e045      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_OscConfig+0x470>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x444>
 8002646:	e03d      	b.n	80026c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e038      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
 8002654:	40023800 	.word	0x40023800
 8002658:	40007000 	.word	0x40007000
 800265c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4ec>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d028      	beq.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d121      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d11a      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002698:	4293      	cmp	r3, r2
 800269a:	d111      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0cc      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b68      	ldr	r3, [pc, #416]	; (800288c <HAL_RCC_ClockConfig+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d90c      	bls.n	8002710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b65      	ldr	r3, [pc, #404]	; (800288c <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0b8      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002728:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	494d      	ldr	r1, [pc, #308]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d044      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d119      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e07f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d003      	beq.n	8002792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	2b03      	cmp	r3, #3
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e067      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4934      	ldr	r1, [pc, #208]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fafa 	bl	8000dbc <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe faf6 	bl	8000dbc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e04f      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d20c      	bcs.n	800281c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e032      	b.n	8002882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4916      	ldr	r1, [pc, #88]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	490e      	ldr	r1, [pc, #56]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800285a:	f000 f821 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800285e:	4602      	mov	r2, r0
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	490a      	ldr	r1, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	5ccb      	ldrb	r3, [r1, r3]
 800286e:	fa22 f303 	lsr.w	r3, r2, r3
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f8bc 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00
 8002890:	40023800 	.word	0x40023800
 8002894:	08016da0 	.word	0x08016da0
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a4:	b094      	sub	sp, #80	; 0x50
 80028a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	647b      	str	r3, [r7, #68]	; 0x44
 80028ac:	2300      	movs	r3, #0
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b0:	2300      	movs	r3, #0
 80028b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b8:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d00d      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x40>
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	f200 80e1 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x34>
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x3a>
 80028d2:	e0db      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028d8:	e0db      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80028dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028de:	e0d8      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e0:	4b6f      	ldr	r3, [pc, #444]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ea:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d063      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f6:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	099b      	lsrs	r3, r3, #6
 80028fc:	2200      	movs	r2, #0
 80028fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002900:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
 800290e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002912:	4622      	mov	r2, r4
 8002914:	462b      	mov	r3, r5
 8002916:	f04f 0000 	mov.w	r0, #0
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	0159      	lsls	r1, r3, #5
 8002920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002924:	0150      	lsls	r0, r2, #5
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4621      	mov	r1, r4
 800292c:	1a51      	subs	r1, r2, r1
 800292e:	6139      	str	r1, [r7, #16]
 8002930:	4629      	mov	r1, r5
 8002932:	eb63 0301 	sbc.w	r3, r3, r1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002944:	4659      	mov	r1, fp
 8002946:	018b      	lsls	r3, r1, #6
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800294e:	4651      	mov	r1, sl
 8002950:	018a      	lsls	r2, r1, #6
 8002952:	4651      	mov	r1, sl
 8002954:	ebb2 0801 	subs.w	r8, r2, r1
 8002958:	4659      	mov	r1, fp
 800295a:	eb63 0901 	sbc.w	r9, r3, r1
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002972:	4690      	mov	r8, r2
 8002974:	4699      	mov	r9, r3
 8002976:	4623      	mov	r3, r4
 8002978:	eb18 0303 	adds.w	r3, r8, r3
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	462b      	mov	r3, r5
 8002980:	eb49 0303 	adc.w	r3, r9, r3
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002992:	4629      	mov	r1, r5
 8002994:	024b      	lsls	r3, r1, #9
 8002996:	4621      	mov	r1, r4
 8002998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800299c:	4621      	mov	r1, r4
 800299e:	024a      	lsls	r2, r1, #9
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029b0:	f7fd fc6e 	bl	8000290 <__aeabi_uldivmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4613      	mov	r3, r2
 80029ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029bc:	e058      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	2200      	movs	r2, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	4611      	mov	r1, r2
 80029ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	f04f 0000 	mov.w	r0, #0
 80029e0:	f04f 0100 	mov.w	r1, #0
 80029e4:	0159      	lsls	r1, r3, #5
 80029e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ea:	0150      	lsls	r0, r2, #5
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4641      	mov	r1, r8
 80029f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80029f6:	4649      	mov	r1, r9
 80029f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a10:	ebb2 040a 	subs.w	r4, r2, sl
 8002a14:	eb63 050b 	sbc.w	r5, r3, fp
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	00eb      	lsls	r3, r5, #3
 8002a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a26:	00e2      	lsls	r2, r4, #3
 8002a28:	4614      	mov	r4, r2
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	4643      	mov	r3, r8
 8002a2e:	18e3      	adds	r3, r4, r3
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	464b      	mov	r3, r9
 8002a34:	eb45 0303 	adc.w	r3, r5, r3
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a46:	4629      	mov	r1, r5
 8002a48:	028b      	lsls	r3, r1, #10
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a50:	4621      	mov	r1, r4
 8002a52:	028a      	lsls	r2, r1, #10
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	61fa      	str	r2, [r7, #28]
 8002a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a64:	f7fd fc14 	bl	8000290 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3750      	adds	r7, #80	; 0x50
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a9b      	lsrs	r3, r3, #10
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08016db0 	.word	0x08016db0

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff ffdc 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	08016db0 	.word	0x08016db0

08002b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	220f      	movs	r2, #15
 8002b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_RCC_GetClockConfig+0x60>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 020f 	and.w	r2, r3, #15
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e041      	b.n	8002c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f839 	bl	8002c16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 f9d8 	bl	8002f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d001      	beq.n	8002c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e04e      	b.n	8002ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d01d      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x80>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d111      	bne.n	8002cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d010      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	e007      	b.n	8002ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	40010400 	.word	0x40010400
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40001800 	.word	0x40001800

08002d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0202 	mvn.w	r2, #2
 8002d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8ee 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8e0 	bl	8002f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f8f1 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0204 	mvn.w	r2, #4
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8c4 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f8b6 	bl	8002f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f8c7 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d122      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d11b      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f89a 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f88c 	bl	8002f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f89d 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d122      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d11b      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0210 	mvn.w	r2, #16
 8002e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2208      	movs	r2, #8
 8002e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f870 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8002e50:	e005      	b.n	8002e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f862 	bl	8002f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f873 	bl	8002f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0201 	mvn.w	r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fd28 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b80      	cmp	r3, #128	; 0x80
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f902 	bl	80030c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f838 	bl	8002f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d10e      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0220 	mvn.w	r2, #32
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8cc 	bl	80030ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a40      	ldr	r2, [pc, #256]	; (8003080 <TIM_Base_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8a:	d00f      	beq.n	8002fac <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3d      	ldr	r2, [pc, #244]	; (8003084 <TIM_Base_SetConfig+0x118>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00b      	beq.n	8002fac <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a3c      	ldr	r2, [pc, #240]	; (8003088 <TIM_Base_SetConfig+0x11c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <TIM_Base_SetConfig+0x40>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a3b      	ldr	r2, [pc, #236]	; (800308c <TIM_Base_SetConfig+0x120>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_Base_SetConfig+0x40>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3a      	ldr	r2, [pc, #232]	; (8003090 <TIM_Base_SetConfig+0x124>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d108      	bne.n	8002fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <TIM_Base_SetConfig+0x114>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d02b      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fcc:	d027      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <TIM_Base_SetConfig+0x118>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d023      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <TIM_Base_SetConfig+0x11c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01f      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2a      	ldr	r2, [pc, #168]	; (800308c <TIM_Base_SetConfig+0x120>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01b      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a29      	ldr	r2, [pc, #164]	; (8003090 <TIM_Base_SetConfig+0x124>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d017      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a28      	ldr	r2, [pc, #160]	; (8003094 <TIM_Base_SetConfig+0x128>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <TIM_Base_SetConfig+0x12c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a26      	ldr	r2, [pc, #152]	; (800309c <TIM_Base_SetConfig+0x130>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <TIM_Base_SetConfig+0x134>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <TIM_Base_SetConfig+0x138>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <TIM_Base_SetConfig+0x13c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <TIM_Base_SetConfig+0x114>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0xf8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <TIM_Base_SetConfig+0x124>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d103      	bne.n	800306c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	615a      	str	r2, [r3, #20]
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40010400 	.word	0x40010400
 8003094:	40014000 	.word	0x40014000
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800
 80030a0:	40001800 	.word	0x40001800
 80030a4:	40001c00 	.word	0x40001c00
 80030a8:	40002000 	.word	0x40002000

080030ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e03f      	b.n	8003166 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fc34 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f829 	bl	8003170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800312c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800314c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b0c0      	sub	sp, #256	; 0x100
 8003176:	af00      	add	r7, sp, #0
 8003178:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	ea40 0301 	orr.w	r3, r0, r1
 8003198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031c8:	f021 010c 	bic.w	r1, r1, #12
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031d6:	430b      	orrs	r3, r1
 80031d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	6999      	ldr	r1, [r3, #24]
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	ea40 0301 	orr.w	r3, r0, r1
 80031f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8f      	ldr	r3, [pc, #572]	; (800343c <UART_SetConfig+0x2cc>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d005      	beq.n	8003210 <UART_SetConfig+0xa0>
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b8d      	ldr	r3, [pc, #564]	; (8003440 <UART_SetConfig+0x2d0>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d104      	bne.n	800321a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff fc6c 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8003214:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003218:	e003      	b.n	8003222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800321a:	f7ff fc53 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 800321e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322c:	f040 810c 	bne.w	8003448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800323a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800323e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003242:	4622      	mov	r2, r4
 8003244:	462b      	mov	r3, r5
 8003246:	1891      	adds	r1, r2, r2
 8003248:	65b9      	str	r1, [r7, #88]	; 0x58
 800324a:	415b      	adcs	r3, r3
 800324c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800324e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003252:	4621      	mov	r1, r4
 8003254:	eb12 0801 	adds.w	r8, r2, r1
 8003258:	4629      	mov	r1, r5
 800325a:	eb43 0901 	adc.w	r9, r3, r1
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800326a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003272:	4690      	mov	r8, r2
 8003274:	4699      	mov	r9, r3
 8003276:	4623      	mov	r3, r4
 8003278:	eb18 0303 	adds.w	r3, r8, r3
 800327c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003280:	462b      	mov	r3, r5
 8003282:	eb49 0303 	adc.w	r3, r9, r3
 8003286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003296:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800329a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800329e:	460b      	mov	r3, r1
 80032a0:	18db      	adds	r3, r3, r3
 80032a2:	653b      	str	r3, [r7, #80]	; 0x50
 80032a4:	4613      	mov	r3, r2
 80032a6:	eb42 0303 	adc.w	r3, r2, r3
 80032aa:	657b      	str	r3, [r7, #84]	; 0x54
 80032ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032b4:	f7fc ffec 	bl	8000290 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b61      	ldr	r3, [pc, #388]	; (8003444 <UART_SetConfig+0x2d4>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	011c      	lsls	r4, r3, #4
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	1891      	adds	r1, r2, r2
 80032de:	64b9      	str	r1, [r7, #72]	; 0x48
 80032e0:	415b      	adcs	r3, r3
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032e8:	4641      	mov	r1, r8
 80032ea:	eb12 0a01 	adds.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0b01 	adc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003308:	4692      	mov	sl, r2
 800330a:	469b      	mov	fp, r3
 800330c:	4643      	mov	r3, r8
 800330e:	eb1a 0303 	adds.w	r3, sl, r3
 8003312:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003316:	464b      	mov	r3, r9
 8003318:	eb4b 0303 	adc.w	r3, fp, r3
 800331c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800332c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003334:	460b      	mov	r3, r1
 8003336:	18db      	adds	r3, r3, r3
 8003338:	643b      	str	r3, [r7, #64]	; 0x40
 800333a:	4613      	mov	r3, r2
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	647b      	str	r3, [r7, #68]	; 0x44
 8003342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800334a:	f7fc ffa1 	bl	8000290 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4611      	mov	r1, r2
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <UART_SetConfig+0x2d4>)
 8003356:	fba3 2301 	umull	r2, r3, r3, r1
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2264      	movs	r2, #100	; 0x64
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	1acb      	subs	r3, r1, r3
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800336a:	4b36      	ldr	r3, [pc, #216]	; (8003444 <UART_SetConfig+0x2d4>)
 800336c:	fba3 2302 	umull	r2, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003378:	441c      	add	r4, r3
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003384:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800338c:	4642      	mov	r2, r8
 800338e:	464b      	mov	r3, r9
 8003390:	1891      	adds	r1, r2, r2
 8003392:	63b9      	str	r1, [r7, #56]	; 0x38
 8003394:	415b      	adcs	r3, r3
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800339c:	4641      	mov	r1, r8
 800339e:	1851      	adds	r1, r2, r1
 80033a0:	6339      	str	r1, [r7, #48]	; 0x30
 80033a2:	4649      	mov	r1, r9
 80033a4:	414b      	adcs	r3, r1
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033b4:	4659      	mov	r1, fp
 80033b6:	00cb      	lsls	r3, r1, #3
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033be:	4651      	mov	r1, sl
 80033c0:	00ca      	lsls	r2, r1, #3
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	4642      	mov	r2, r8
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033d0:	464b      	mov	r3, r9
 80033d2:	460a      	mov	r2, r1
 80033d4:	eb42 0303 	adc.w	r3, r2, r3
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033f0:	460b      	mov	r3, r1
 80033f2:	18db      	adds	r3, r3, r3
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f6:	4613      	mov	r3, r2
 80033f8:	eb42 0303 	adc.w	r3, r2, r3
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003406:	f7fc ff43 	bl	8000290 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <UART_SetConfig+0x2d4>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	2164      	movs	r1, #100	; 0x64
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	3332      	adds	r3, #50	; 0x32
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <UART_SetConfig+0x2d4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 0207 	and.w	r2, r3, #7
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4422      	add	r2, r4
 8003436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003438:	e106      	b.n	8003648 <UART_SetConfig+0x4d8>
 800343a:	bf00      	nop
 800343c:	40011000 	.word	0x40011000
 8003440:	40011400 	.word	0x40011400
 8003444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800344c:	2200      	movs	r2, #0
 800344e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003452:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800345a:	4642      	mov	r2, r8
 800345c:	464b      	mov	r3, r9
 800345e:	1891      	adds	r1, r2, r2
 8003460:	6239      	str	r1, [r7, #32]
 8003462:	415b      	adcs	r3, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800346a:	4641      	mov	r1, r8
 800346c:	1854      	adds	r4, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb43 0501 	adc.w	r5, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	00eb      	lsls	r3, r5, #3
 800347e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003482:	00e2      	lsls	r2, r4, #3
 8003484:	4614      	mov	r4, r2
 8003486:	461d      	mov	r5, r3
 8003488:	4643      	mov	r3, r8
 800348a:	18e3      	adds	r3, r4, r3
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003490:	464b      	mov	r3, r9
 8003492:	eb45 0303 	adc.w	r3, r5, r3
 8003496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034b6:	4629      	mov	r1, r5
 80034b8:	008b      	lsls	r3, r1, #2
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c0:	4621      	mov	r1, r4
 80034c2:	008a      	lsls	r2, r1, #2
 80034c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034c8:	f7fc fee2 	bl	8000290 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4b60      	ldr	r3, [pc, #384]	; (8003654 <UART_SetConfig+0x4e4>)
 80034d2:	fba3 2302 	umull	r2, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	011c      	lsls	r4, r3, #4
 80034da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	61b9      	str	r1, [r7, #24]
 80034f4:	415b      	adcs	r3, r3
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6139      	str	r1, [r7, #16]
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003530:	464b      	mov	r3, r9
 8003532:	460a      	mov	r2, r1
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	67bb      	str	r3, [r7, #120]	; 0x78
 8003546:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003554:	4649      	mov	r1, r9
 8003556:	008b      	lsls	r3, r1, #2
 8003558:	4641      	mov	r1, r8
 800355a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355e:	4641      	mov	r1, r8
 8003560:	008a      	lsls	r2, r1, #2
 8003562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003566:	f7fc fe93 	bl	8000290 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4611      	mov	r1, r2
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <UART_SetConfig+0x4e4>)
 8003572:	fba3 2301 	umull	r2, r3, r3, r1
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2264      	movs	r2, #100	; 0x64
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	1acb      	subs	r3, r1, r3
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	3332      	adds	r3, #50	; 0x32
 8003584:	4a33      	ldr	r2, [pc, #204]	; (8003654 <UART_SetConfig+0x4e4>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003590:	441c      	add	r4, r3
 8003592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003596:	2200      	movs	r2, #0
 8003598:	673b      	str	r3, [r7, #112]	; 0x70
 800359a:	677a      	str	r2, [r7, #116]	; 0x74
 800359c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	1891      	adds	r1, r2, r2
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	415b      	adcs	r3, r3
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b0:	4641      	mov	r1, r8
 80035b2:	1851      	adds	r1, r2, r1
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	4649      	mov	r1, r9
 80035b8:	414b      	adcs	r3, r1
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035c8:	4659      	mov	r1, fp
 80035ca:	00cb      	lsls	r3, r1, #3
 80035cc:	4651      	mov	r1, sl
 80035ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d2:	4651      	mov	r1, sl
 80035d4:	00ca      	lsls	r2, r1, #3
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	4642      	mov	r2, r8
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e2:	464b      	mov	r3, r9
 80035e4:	460a      	mov	r2, r1
 80035e6:	eb42 0303 	adc.w	r3, r2, r3
 80035ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	663b      	str	r3, [r7, #96]	; 0x60
 80035f6:	667a      	str	r2, [r7, #100]	; 0x64
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003604:	4649      	mov	r1, r9
 8003606:	008b      	lsls	r3, r1, #2
 8003608:	4641      	mov	r1, r8
 800360a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360e:	4641      	mov	r1, r8
 8003610:	008a      	lsls	r2, r1, #2
 8003612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003616:	f7fc fe3b 	bl	8000290 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <UART_SetConfig+0x4e4>)
 8003620:	fba3 1302 	umull	r1, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2164      	movs	r1, #100	; 0x64
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3332      	adds	r3, #50	; 0x32
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <UART_SetConfig+0x4e4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4422      	add	r2, r4
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	bf00      	nop
 800364a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800364e:	46bd      	mov	sp, r7
 8003650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800365e:	2100      	movs	r1, #0
 8003660:	2000      	movs	r0, #0
 8003662:	f003 fb53 	bl	8006d0c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <MX_LWIP_Init+0x90>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <MX_LWIP_Init+0x94>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <MX_LWIP_Init+0x98>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003678:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <MX_LWIP_Init+0x9c>)
 800367a:	9302      	str	r3, [sp, #8]
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <MX_LWIP_Init+0xa0>)
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_LWIP_Init+0x98>)
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <MX_LWIP_Init+0x94>)
 8003688:	4917      	ldr	r1, [pc, #92]	; (80036e8 <MX_LWIP_Init+0x90>)
 800368a:	481c      	ldr	r0, [pc, #112]	; (80036fc <MX_LWIP_Init+0xa4>)
 800368c:	f004 f908 	bl	80078a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003690:	481a      	ldr	r0, [pc, #104]	; (80036fc <MX_LWIP_Init+0xa4>)
 8003692:	f004 fabf 	bl	8007c14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <MX_LWIP_Init+0xa4>)
 8003698:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80036a8:	4814      	ldr	r0, [pc, #80]	; (80036fc <MX_LWIP_Init+0xa4>)
 80036aa:	f004 fac3 	bl	8007c34 <netif_set_up>
 80036ae:	e002      	b.n	80036b6 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80036b0:	4812      	ldr	r0, [pc, #72]	; (80036fc <MX_LWIP_Init+0xa4>)
 80036b2:	f004 fb2b 	bl	8007d0c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80036b6:	4912      	ldr	r1, [pc, #72]	; (8003700 <MX_LWIP_Init+0xa8>)
 80036b8:	4810      	ldr	r0, [pc, #64]	; (80036fc <MX_LWIP_Init+0xa4>)
 80036ba:	f004 fb59 	bl	8007d70 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80036be:	4b11      	ldr	r3, [pc, #68]	; (8003704 <MX_LWIP_Init+0xac>)
 80036c0:	1d3c      	adds	r4, r7, #4
 80036c2:	461d      	mov	r5, r3
 80036c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <MX_LWIP_Init+0xa4>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fb03 	bl	8003ce0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80036da:	4808      	ldr	r0, [pc, #32]	; (80036fc <MX_LWIP_Init+0xa4>)
 80036dc:	f00b fcae 	bl	800f03c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bdb0      	pop	{r4, r5, r7, pc}
 80036e8:	20000408 	.word	0x20000408
 80036ec:	2000040c 	.word	0x2000040c
 80036f0:	20000410 	.word	0x20000410
 80036f4:	08006c49 	.word	0x08006c49
 80036f8:	08003aad 	.word	0x08003aad
 80036fc:	200003d0 	.word	0x200003d0
 8003700:	08003709 	.word	0x08003709
 8003704:	08013edc 	.word	0x08013edc

08003708 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <HAL_ETH_RxCpltCallback+0x1c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fc23 	bl	8003f74 <osSemaphoreRelease>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20004ee0 	.word	0x20004ee0

0800373c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_ETH_TxCpltCallback+0x1c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 fc13 	bl	8003f74 <osSemaphoreRelease>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20004ee4 	.word	0x20004ee4

0800375c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fd ff89 	bl	800167c <HAL_ETH_GetDMAError>
 800376a:	4603      	mov	r3, r0
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d104      	bne.n	800377e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_ETH_ErrorCallback+0x2c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fbfb 	bl	8003f74 <osSemaphoreRelease>
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20004ee0 	.word	0x20004ee0

0800378c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b08c      	sub	sp, #48	; 0x30
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800379a:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <low_level_init+0x14c>)
 800379c:	4a4f      	ldr	r2, [pc, #316]	; (80038dc <low_level_init+0x150>)
 800379e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[1] = 0x80;
 80037a6:	2380      	movs	r3, #128	; 0x80
 80037a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  MACAddr[2] = 0xE1;
 80037ac:	23e1      	movs	r3, #225	; 0xe1
 80037ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  MACAddr[3] = 0xFE;
 80037b2:	23fe      	movs	r3, #254	; 0xfe
 80037b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  MACAddr[4] = 0xEC;
 80037b8:	23ec      	movs	r3, #236	; 0xec
 80037ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  MACAddr[5] = 0x82;
 80037be:	2382      	movs	r3, #130	; 0x82
 80037c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  heth.Init.MACAddr = &MACAddr[0];
 80037c4:	4a44      	ldr	r2, [pc, #272]	; (80038d8 <low_level_init+0x14c>)
 80037c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ca:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80037cc:	4b42      	ldr	r3, [pc, #264]	; (80038d8 <low_level_init+0x14c>)
 80037ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80037d4:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <low_level_init+0x14c>)
 80037d6:	4a42      	ldr	r2, [pc, #264]	; (80038e0 <low_level_init+0x154>)
 80037d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80037da:	4b3f      	ldr	r3, [pc, #252]	; (80038d8 <low_level_init+0x14c>)
 80037dc:	4a41      	ldr	r2, [pc, #260]	; (80038e4 <low_level_init+0x158>)
 80037de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80037e0:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <low_level_init+0x14c>)
 80037e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80037e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80037e8:	483b      	ldr	r0, [pc, #236]	; (80038d8 <low_level_init+0x14c>)
 80037ea:	f7fd fbf9 	bl	8000fe0 <HAL_ETH_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80037f4:	2238      	movs	r2, #56	; 0x38
 80037f6:	2100      	movs	r1, #0
 80037f8:	483b      	ldr	r0, [pc, #236]	; (80038e8 <low_level_init+0x15c>)
 80037fa:	f00f fc4a 	bl	8013092 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80037fe:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <low_level_init+0x15c>)
 8003800:	2221      	movs	r2, #33	; 0x21
 8003802:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <low_level_init+0x15c>)
 8003806:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800380a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <low_level_init+0x15c>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003812:	4836      	ldr	r0, [pc, #216]	; (80038ec <low_level_init+0x160>)
 8003814:	f003 fefe 	bl	8007614 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2206      	movs	r2, #6
 800381c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <low_level_init+0x14c>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <low_level_init+0x14c>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	785a      	ldrb	r2, [r3, #1]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003838:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <low_level_init+0x14c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	789a      	ldrb	r2, [r3, #2]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <low_level_init+0x14c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	78da      	ldrb	r2, [r3, #3]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <low_level_init+0x14c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	791a      	ldrb	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800385c:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <low_level_init+0x14c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	795a      	ldrb	r2, [r3, #5]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003876:	f043 030a 	orr.w	r3, r3, #10
 800387a:	b2da      	uxtb	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8003882:	2203      	movs	r2, #3
 8003884:	2100      	movs	r1, #0
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fe1a 	bl	80044c0 <xQueueGenericCreate>
 800388c:	4603      	mov	r3, r0
 800388e:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <low_level_init+0x164>)
 8003890:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8003892:	2203      	movs	r2, #3
 8003894:	2100      	movs	r1, #0
 8003896:	2001      	movs	r0, #1
 8003898:	f000 fe12 	bl	80044c0 <xQueueGenericCreate>
 800389c:	4603      	mov	r3, r0
 800389e:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <low_level_init+0x168>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <low_level_init+0x16c>)
 80038a4:	f107 040c 	add.w	r4, r7, #12
 80038a8:	461d      	mov	r5, r3
 80038aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80038b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80038b6:	f107 030c 	add.w	r3, r7, #12
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fa0f 	bl	8003ce0 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 80038c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <low_level_init+0x142>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 80038ca:	f7fd f81b 	bl	8000904 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80038ce:	bf00      	nop
 80038d0:	3730      	adds	r7, #48	; 0x30
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bdb0      	pop	{r4, r5, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20004ee8 	.word	0x20004ee8
 80038dc:	40028000 	.word	0x40028000
 80038e0:	20004e40 	.word	0x20004e40
 80038e4:	20004da0 	.word	0x20004da0
 80038e8:	20004f98 	.word	0x20004f98
 80038ec:	08016db8 	.word	0x08016db8
 80038f0:	20004ee0 	.word	0x20004ee0
 80038f4:	20004ee4 	.word	0x20004ee4
 80038f8:	08013f00 	.word	0x08013f00

080038fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b092      	sub	sp, #72	; 0x48
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	2230      	movs	r2, #48	; 0x30
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f00f fbb8 	bl	8013092 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	2230      	movs	r2, #48	; 0x30
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f00f fbb1 	bl	8013092 <memset>

  for(q = p; q != NULL; q = q->next)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	643b      	str	r3, [r7, #64]	; 0x40
 8003934:	e045      	b.n	80039c2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003938:	2b03      	cmp	r3, #3
 800393a:	d902      	bls.n	8003942 <low_level_output+0x46>
      return ERR_IF;
 800393c:	f06f 030b 	mvn.w	r3, #11
 8003940:	e065      	b.n	8003a0e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	6859      	ldr	r1, [r3, #4]
 8003946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3348      	adds	r3, #72	; 0x48
 8003952:	443b      	add	r3, r7
 8003954:	3b3c      	subs	r3, #60	; 0x3c
 8003956:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800395a:	895b      	ldrh	r3, [r3, #10]
 800395c:	4619      	mov	r1, r3
 800395e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	3348      	adds	r3, #72	; 0x48
 800396a:	443b      	add	r3, r7
 800396c:	3b38      	subs	r3, #56	; 0x38
 800396e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	f107 000c 	add.w	r0, r7, #12
 800397e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003980:	460b      	mov	r3, r1
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	440b      	add	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18c1      	adds	r1, r0, r3
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	3348      	adds	r3, #72	; 0x48
 8003994:	443b      	add	r3, r7
 8003996:	3b34      	subs	r3, #52	; 0x34
 8003998:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800399a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80039a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	3348      	adds	r3, #72	; 0x48
 80039ae:	443b      	add	r3, r7
 80039b0:	3b34      	subs	r3, #52	; 0x34
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80039b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b8:	3301      	adds	r3, #1
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80039bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	643b      	str	r3, [r7, #64]	; 0x40
 80039c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1b6      	bne.n	8003936 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	891b      	ldrh	r3, [r3, #8]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <low_level_output+0x11c>)
 80039d0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80039d2:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <low_level_output+0x11c>)
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80039da:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <low_level_output+0x11c>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f004 fe19 	bl	8008618 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80039e6:	490c      	ldr	r1, [pc, #48]	; (8003a18 <low_level_output+0x11c>)
 80039e8:	480c      	ldr	r0, [pc, #48]	; (8003a1c <low_level_output+0x120>)
 80039ea:	f7fd fb81 	bl	80010f0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80039ee:	bf00      	nop
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <low_level_output+0x124>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fa6d 	bl	8003ed8 <osSemaphoreWait>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f5      	bne.n	80039f0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8003a04:	4805      	ldr	r0, [pc, #20]	; (8003a1c <low_level_output+0x120>)
 8003a06:	f7fd fd07 	bl	8001418 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8003a0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3748      	adds	r7, #72	; 0x48
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20004f98 	.word	0x20004f98
 8003a1c:	20004ee8 	.word	0x20004ee8
 8003a20:	20004ee4 	.word	0x20004ee4

08003a24 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <low_level_input+0x2c>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4805      	ldr	r0, [pc, #20]	; (8003a54 <low_level_input+0x30>)
 8003a40:	f7fd fbb2 	bl	80011a8 <HAL_ETH_ReadData>
  }

  return p;
 8003a44:	68fb      	ldr	r3, [r7, #12]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20004d9c 	.word	0x20004d9c
 8003a54:	20004ee8 	.word	0x20004ee8

08003a58 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <ethernetif_input+0x50>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fa31 	bl	8003ed8 <osSemaphoreWait>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f5      	bne.n	8003a68 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f7ff ffd1 	bl	8003a24 <low_level_input>
 8003a82:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	4798      	blx	r3
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f004 fd16 	bl	80084cc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1ea      	bne.n	8003a7c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003aa6:	e7df      	b.n	8003a68 <ethernetif_input+0x10>
 8003aa8:	20004ee0 	.word	0x20004ee0

08003aac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <ethernetif_init+0x1c>
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <ethernetif_init+0x48>)
 8003abc:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8003ac0:	490d      	ldr	r1, [pc, #52]	; (8003af8 <ethernetif_init+0x4c>)
 8003ac2:	480e      	ldr	r0, [pc, #56]	; (8003afc <ethernetif_init+0x50>)
 8003ac4:	f00f fa80 	bl	8012fc8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2273      	movs	r2, #115	; 0x73
 8003acc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2274      	movs	r2, #116	; 0x74
 8003ad4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <ethernetif_init+0x54>)
 8003adc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <ethernetif_init+0x58>)
 8003ae2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fe51 	bl	800378c <low_level_init>

  return ERR_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	08013f1c 	.word	0x08013f1c
 8003af8:	08013f38 	.word	0x08013f38
 8003afc:	08013f48 	.word	0x08013f48
 8003b00:	08010e91 	.word	0x08010e91
 8003b04:	080038fd 	.word	0x080038fd

08003b08 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	4809      	ldr	r0, [pc, #36]	; (8003b3c <pbuf_free_custom+0x34>)
 8003b18:	f003 fe6c 	bl	80077f4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <pbuf_free_custom+0x38>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <pbuf_free_custom+0x38>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <pbuf_free_custom+0x3c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa20 	bl	8003f74 <osSemaphoreRelease>
  }
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	08016db8 	.word	0x08016db8
 8003b40:	20004d9c 	.word	0x20004d9c
 8003b44:	20004ee0 	.word	0x20004ee0

08003b48 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b4c:	f7fd f936 	bl	8000dbc <HAL_GetTick>
 8003b50:	4603      	mov	r3, r0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8003b5e:	2064      	movs	r0, #100	; 0x64
 8003b60:	f000 f90a 	bl	8003d78 <osDelay>
 8003b64:	e7fb      	b.n	8003b5e <ethernet_link_thread+0x8>
	...

08003b68 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003b70:	4812      	ldr	r0, [pc, #72]	; (8003bbc <HAL_ETH_RxAllocateCallback+0x54>)
 8003b72:	f003 fdcb 	bl	800770c <memp_malloc_pool>
 8003b76:	60f8      	str	r0, [r7, #12]
  if (p)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d014      	beq.n	8003ba8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f103 0220 	add.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <HAL_ETH_RxAllocateCallback+0x58>)
 8003b8c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003b96:	9201      	str	r2, [sp, #4]
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2241      	movs	r2, #65	; 0x41
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f004 fad9 	bl	8008158 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003ba6:	e005      	b.n	8003bb4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08016db8 	.word	0x08016db8
 8003bc0:	08003b09 	.word	0x08003b09
 8003bc4:	20004d9c 	.word	0x20004d9c

08003bc8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	; 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3b20      	subs	r3, #32
 8003be6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e003      	b.n	8003c12 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e009      	b.n	8003c34 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	891a      	ldrh	r2, [r3, #8]
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	4413      	add	r3, r2
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f2      	bne.n	8003c20 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	3724      	adds	r7, #36	; 0x24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f004 fc3b 	bl	80084cc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c70:	2b84      	cmp	r3, #132	; 0x84
 8003c72:	d005      	beq.n	8003c80 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3303      	adds	r3, #3
 8003c7e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c80:	68fb      	ldr	r3, [r7, #12]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c94:	f3ef 8305 	mrs	r3, IPSR
 8003c98:	607b      	str	r3, [r7, #4]
  return(result);
 8003c9a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cb6:	f001 fc41 	bl	800553c <vTaskStartScheduler>
  
  return osOK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003cc4:	f7ff ffe3 	bl	8003c8e <inHandlerMode>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003cce:	f001 fd59 	bl	8005784 <xTaskGetTickCountFromISR>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	e002      	b.n	8003cdc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003cd6:	f001 fd45 	bl	8005764 <xTaskGetTickCount>
 8003cda:	4603      	mov	r3, r0
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af04      	add	r7, sp, #16
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <osThreadCreate+0x54>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01c      	beq.n	8003d34 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685c      	ldr	r4, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691e      	ldr	r6, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ffa6 	bl	8003c5e <makeFreeRtosPriority>
 8003d12:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d1c:	9202      	str	r2, [sp, #8]
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	9100      	str	r1, [sp, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	4632      	mov	r2, r6
 8003d26:	4629      	mov	r1, r5
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f001 fa29 	bl	8005180 <xTaskCreateStatic>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e01c      	b.n	8003d6e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685c      	ldr	r4, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d40:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff88 	bl	8003c5e <makeFreeRtosPriority>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f107 030c 	add.w	r3, r7, #12
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	9200      	str	r2, [sp, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f001 fa6b 	bl	800523a <xTaskCreate>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <osDelay+0x16>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	e000      	b.n	8003d90 <osDelay+0x18>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fb9f 	bl	80054d4 <vTaskDelay>
  
  return osOK;
 8003d96:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d007      	beq.n	8003dc0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	2001      	movs	r0, #1
 8003db8:	f000 fc0d 	bl	80045d6 <xQueueCreateMutexStatic>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	e003      	b.n	8003dc8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f000 fbf0 	bl	80045a6 <xQueueCreateMutex>
 8003dc6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <osMutexWait+0x18>
    return osErrorParameter;
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	e03a      	b.n	8003e5e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e009      	b.n	8003e10 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d006      	beq.n	8003e10 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <osMutexWait+0x40>
      ticks = 1;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003e10:	f7ff ff3d 	bl	8003c8e <inHandlerMode>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2100      	movs	r1, #0
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f001 f804 	bl	8004e30 <xQueueReceiveFromISR>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d001      	beq.n	8003e32 <osMutexWait+0x62>
      return osErrorOS;
 8003e2e:	23ff      	movs	r3, #255	; 0xff
 8003e30:	e015      	b.n	8003e5e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d011      	beq.n	8003e5c <osMutexWait+0x8c>
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <osMutexWait+0x98>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	e008      	b.n	8003e5c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fee3 	bl	8004c18 <xQueueSemaphoreTake>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <osMutexWait+0x8c>
    return osErrorOS;
 8003e58:	23ff      	movs	r3, #255	; 0xff
 8003e5a:	e000      	b.n	8003e5e <osMutexWait+0x8e>
  }
  
  return osOK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003e7c:	f7ff ff07 	bl	8003c8e <inHandlerMode>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 fd56 	bl	800493e <xQueueGiveFromISR>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <osMutexRelease+0x30>
      return osErrorOS;
 8003e98:	23ff      	movs	r3, #255	; 0xff
 8003e9a:	e017      	b.n	8003ecc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <osMutexRelease+0x5e>
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <osMutexRelease+0x68>)
 8003ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	e00a      	b.n	8003eca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fba6 	bl	800460c <xQueueGenericSend>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d001      	beq.n	8003eca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003ec6:	23ff      	movs	r3, #255	; 0xff
 8003ec8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	e03a      	b.n	8003f66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d103      	bne.n	8003f04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e009      	b.n	8003f18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <osSemaphoreWait+0x40>
      ticks = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003f18:	f7ff feb9 	bl	8003c8e <inHandlerMode>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	461a      	mov	r2, r3
 8003f28:	2100      	movs	r1, #0
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 ff80 	bl	8004e30 <xQueueReceiveFromISR>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003f36:	23ff      	movs	r3, #255	; 0xff
 8003f38:	e015      	b.n	8003f66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d011      	beq.n	8003f64 <osSemaphoreWait+0x8c>
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <osSemaphoreWait+0x98>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	e008      	b.n	8003f64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fe5f 	bl	8004c18 <xQueueSemaphoreTake>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d001      	beq.n	8003f64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003f60:	23ff      	movs	r3, #255	; 0xff
 8003f62:	e000      	b.n	8003f66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003f84:	f7ff fe83 	bl	8003c8e <inHandlerMode>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fcd2 	bl	800493e <xQueueGiveFromISR>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003fa0:	23ff      	movs	r3, #255	; 0xff
 8003fa2:	e017      	b.n	8003fd4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d013      	beq.n	8003fd2 <osSemaphoreRelease+0x5e>
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <osSemaphoreRelease+0x68>)
 8003fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	e00a      	b.n	8003fd2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fb22 	bl	800460c <xQueueGenericSend>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003fce:	23ff      	movs	r3, #255	; 0xff
 8003fd0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d011      	beq.n	8004016 <osMessageCreate+0x36>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2400      	movs	r4, #0
 800400c:	9400      	str	r4, [sp, #0]
 800400e:	f000 f9df 	bl	80043d0 <xQueueGenericCreateStatic>
 8004012:	4603      	mov	r3, r0
 8004014:	e008      	b.n	8004028 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	4619      	mov	r1, r3
 8004022:	f000 fa4d 	bl	80044c0 <xQueueGenericCreate>
 8004026:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bd90      	pop	{r4, r7, pc}

08004030 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <osMessagePut+0x1e>
    ticks = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800404e:	f7ff fe1e 	bl	8003c8e <inHandlerMode>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004058:	f107 0210 	add.w	r2, r7, #16
 800405c:	f107 0108 	add.w	r1, r7, #8
 8004060:	2300      	movs	r3, #0
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fbd0 	bl	8004808 <xQueueGenericSendFromISR>
 8004068:	4603      	mov	r3, r0
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <osMessagePut+0x42>
      return osErrorOS;
 800406e:	23ff      	movs	r3, #255	; 0xff
 8004070:	e018      	b.n	80040a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d014      	beq.n	80040a2 <osMessagePut+0x72>
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <osMessagePut+0x7c>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	e00b      	b.n	80040a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800408a:	f107 0108 	add.w	r1, r7, #8
 800408e:	2300      	movs	r3, #0
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 faba 	bl	800460c <xQueueGenericSend>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <osMessagePut+0x72>
      return osErrorOS;
 800409e:	23ff      	movs	r3, #255	; 0xff
 80040a0:	e000      	b.n	80040a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08b      	sub	sp, #44	; 0x2c
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	617b      	str	r3, [r7, #20]
    return event;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	461c      	mov	r4, r3
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040de:	e054      	b.n	800418a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d103      	bne.n	80040f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
 80040f6:	e009      	b.n	800410c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <osMessageGet+0x5c>
      ticks = 1;
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800410c:	f7ff fdbf 	bl	8003c8e <inHandlerMode>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01c      	beq.n	8004150 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004116:	f107 0220 	add.w	r2, r7, #32
 800411a:	f107 0314 	add.w	r3, r7, #20
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	68b8      	ldr	r0, [r7, #8]
 8004124:	f000 fe84 	bl	8004e30 <xQueueReceiveFromISR>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d102      	bne.n	8004134 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800412e:	2310      	movs	r3, #16
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e001      	b.n	8004138 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01d      	beq.n	800417a <osMessageGet+0xca>
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <osMessageGet+0xe4>)
 8004140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	e014      	b.n	800417a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	3304      	adds	r3, #4
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	4619      	mov	r1, r3
 800415a:	68b8      	ldr	r0, [r7, #8]
 800415c:	f000 fc7c 	bl	8004a58 <xQueueReceive>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004166:	2310      	movs	r3, #16
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e006      	b.n	800417a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <osMessageGet+0xc6>
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <osMessageGet+0xc8>
 8004176:	2340      	movs	r3, #64	; 0x40
 8004178:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	461c      	mov	r4, r3
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004186:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	372c      	adds	r7, #44	; 0x2c
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	bf00      	nop
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f103 0208 	add.w	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f04f 32ff 	mov.w	r2, #4294967295
 80041b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f103 0208 	add.w	r2, r3, #8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f103 0208 	add.w	r2, r3, #8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d103      	bne.n	800425a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e00c      	b.n	8004274 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3308      	adds	r3, #8
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e002      	b.n	8004268 <vListInsert+0x2e>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	429a      	cmp	r2, r3
 8004272:	d2f6      	bcs.n	8004262 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6892      	ldr	r2, [r2, #8]
 80042c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d103      	bne.n	80042e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800432a:	f002 f88b 	bl	8006444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	441a      	add	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	3b01      	subs	r3, #1
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	441a      	add	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	22ff      	movs	r2, #255	; 0xff
 800436e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d114      	bne.n	80043aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01a      	beq.n	80043be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3310      	adds	r3, #16
 800438c:	4618      	mov	r0, r3
 800438e:	f001 fb49 	bl	8005a24 <xTaskRemoveFromEventList>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d012      	beq.n	80043be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <xQueueGenericReset+0xcc>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	e009      	b.n	80043be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3310      	adds	r3, #16
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fef2 	bl	8004198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3324      	adds	r3, #36	; 0x24
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff feed 	bl	8004198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043be:	f002 f871 	bl	80064a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043c2:	2301      	movs	r3, #1
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08e      	sub	sp, #56	; 0x38
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <xQueueGenericCreateStatic+0x52>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <xQueueGenericCreateStatic+0x56>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <xQueueGenericCreateStatic+0x58>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <xQueueGenericCreateStatic+0x7e>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <xQueueGenericCreateStatic+0x82>
 800444e:	2301      	movs	r3, #1
 8004450:	e000      	b.n	8004454 <xQueueGenericCreateStatic+0x84>
 8004452:	2300      	movs	r3, #0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	61fb      	str	r3, [r7, #28]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800446e:	2348      	movs	r3, #72	; 0x48
 8004470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b48      	cmp	r3, #72	; 0x48
 8004476:	d00a      	beq.n	800448e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	61bb      	str	r3, [r7, #24]
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800448e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00d      	beq.n	80044b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f83f 	bl	8004534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3730      	adds	r7, #48	; 0x30
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4613      	mov	r3, r2
 80044cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	613b      	str	r3, [r7, #16]
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3348      	adds	r3, #72	; 0x48
 80044f8:	4618      	mov	r0, r3
 80044fa:	f002 f8c5 	bl	8006688 <pvPortMalloc>
 80044fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d011      	beq.n	800452a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3348      	adds	r3, #72	; 0x48
 800450e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004518:	79fa      	ldrb	r2, [r7, #7]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f805 	bl	8004534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800452a:	69bb      	ldr	r3, [r7, #24]
	}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e002      	b.n	8004556 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004562:	2101      	movs	r1, #1
 8004564:	69b8      	ldr	r0, [r7, #24]
 8004566:	f7ff fecb 	bl	8004300 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004592:	2300      	movs	r3, #0
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f837 	bl	800460c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	4603      	mov	r3, r0
 80045ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6939      	ldr	r1, [r7, #16]
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7ff ff7e 	bl	80044c0 <xQueueGenericCreate>
 80045c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff ffd3 	bl	8004572 <prvInitialiseMutex>

		return xNewQueue;
 80045cc:	68fb      	ldr	r3, [r7, #12]
	}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b088      	sub	sp, #32
 80045da:	af02      	add	r7, sp, #8
 80045dc:	4603      	mov	r3, r0
 80045de:	6039      	str	r1, [r7, #0]
 80045e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80045e2:	2301      	movs	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	6939      	ldr	r1, [r7, #16]
 80045f4:	6978      	ldr	r0, [r7, #20]
 80045f6:	f7ff feeb 	bl	80043d0 <xQueueGenericCreateStatic>
 80045fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ffb8 	bl	8004572 <prvInitialiseMutex>

		return xNewQueue;
 8004602:	68fb      	ldr	r3, [r7, #12]
	}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	; 0x38
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericSend+0x32>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <xQueueGenericSend+0x40>
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <xQueueGenericSend+0x44>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <xQueueGenericSend+0x46>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xQueueGenericSend+0x60>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d103      	bne.n	800467a <xQueueGenericSend+0x6e>
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <xQueueGenericSend+0x72>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueGenericSend+0x74>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueGenericSend+0x8e>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	623b      	str	r3, [r7, #32]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469a:	f001 fb83 	bl	8005da4 <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xQueueGenericSend+0x9e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueGenericSend+0xa2>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueGenericSend+0xa4>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xQueueGenericSend+0xbe>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61fb      	str	r3, [r7, #28]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ca:	f001 febb 	bl	8006444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <xQueueGenericSend+0xd4>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d129      	bne.n	8004734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 fc3b 	bl	8004f60 <prvCopyDataToQueue>
 80046ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	3324      	adds	r3, #36	; 0x24
 80046f8:	4618      	mov	r0, r3
 80046fa:	f001 f993 	bl	8005a24 <xTaskRemoveFromEventList>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004704:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <xQueueGenericSend+0x1f8>)
 8004706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	e00a      	b.n	800472c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800471c:	4b39      	ldr	r3, [pc, #228]	; (8004804 <xQueueGenericSend+0x1f8>)
 800471e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800472c:	f001 feba 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004730:	2301      	movs	r3, #1
 8004732:	e063      	b.n	80047fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800473a:	f001 feb3 	bl	80064a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800473e:	2300      	movs	r3, #0
 8004740:	e05c      	b.n	80047fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004748:	f107 0314 	add.w	r3, r7, #20
 800474c:	4618      	mov	r0, r3
 800474e:	f001 f9cb 	bl	8005ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004756:	f001 fea5 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800475a:	f000 ff59 	bl	8005610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800475e:	f001 fe71 	bl	8006444 <vPortEnterCritical>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004768:	b25b      	sxtb	r3, r3
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d103      	bne.n	8004778 <xQueueGenericSend+0x16c>
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477e:	b25b      	sxtb	r3, r3
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d103      	bne.n	800478e <xQueueGenericSend+0x182>
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478e:	f001 fe89 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004792:	1d3a      	adds	r2, r7, #4
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f001 f9ba 	bl	8005b14 <xTaskCheckForTimeOut>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d124      	bne.n	80047f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a8:	f000 fcd2 	bl	8005150 <prvIsQueueFull>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	3310      	adds	r3, #16
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f90e 	bl	80059dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c2:	f000 fc5d 	bl	8005080 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047c6:	f000 ff31 	bl	800562c <xTaskResumeAll>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f af7c 	bne.w	80046ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <xQueueGenericSend+0x1f8>)
 80047d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	e772      	b.n	80046ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047e6:	f000 fc4b 	bl	8005080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ea:	f000 ff1f 	bl	800562c <xTaskResumeAll>
 80047ee:	e76c      	b.n	80046ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f2:	f000 fc45 	bl	8005080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047f6:	f000 ff19 	bl	800562c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3738      	adds	r7, #56	; 0x38
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b090      	sub	sp, #64	; 0x40
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800481a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <xQueueGenericSendFromISR+0x3c>
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericSendFromISR+0x40>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <xQueueGenericSendFromISR+0x42>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d103      	bne.n	8004872 <xQueueGenericSendFromISR+0x6a>
 800486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <xQueueGenericSendFromISR+0x6e>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <xQueueGenericSendFromISR+0x70>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	623b      	str	r3, [r7, #32]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004892:	f001 feb9 	bl	8006608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004896:	f3ef 8211 	mrs	r2, BASEPRI
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61fa      	str	r2, [r7, #28]
 80048ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <xQueueGenericSendFromISR+0xbc>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d12f      	bne.n	8004924 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048da:	f000 fb41 	bl	8004f60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d112      	bne.n	800490e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d016      	beq.n	800491e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	3324      	adds	r3, #36	; 0x24
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 f895 	bl	8005a24 <xTaskRemoveFromEventList>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00e      	beq.n	800491e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e007      	b.n	800491e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800490e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004912:	3301      	adds	r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	b25a      	sxtb	r2, r3
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800491e:	2301      	movs	r3, #1
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004922:	e001      	b.n	8004928 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004924:	2300      	movs	r3, #0
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004936:	4618      	mov	r0, r3
 8004938:	3740      	adds	r7, #64	; 0x40
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08e      	sub	sp, #56	; 0x38
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	623b      	str	r3, [r7, #32]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	61fb      	str	r3, [r7, #28]
}
 8004982:	bf00      	nop
 8004984:	e7fe      	b.n	8004984 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <xQueueGiveFromISR+0x58>
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <xQueueGiveFromISR+0x5c>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <xQueueGiveFromISR+0x5e>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	61bb      	str	r3, [r7, #24]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049b6:	f001 fe27 	bl	8006608 <vPortValidateInterruptPriority>
	__asm volatile
 80049ba:	f3ef 8211 	mrs	r2, BASEPRI
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	617a      	str	r2, [r7, #20]
 80049d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80049d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d22b      	bcs.n	8004a3e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d112      	bne.n	8004a28 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	3324      	adds	r3, #36	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 f808 	bl	8005a24 <xTaskRemoveFromEventList>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00e      	beq.n	8004a38 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e007      	b.n	8004a38 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	b25a      	sxtb	r2, r3
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3c:	e001      	b.n	8004a42 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f383 8811 	msr	BASEPRI, r3
}
 8004a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3738      	adds	r7, #56	; 0x38
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	; 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a64:	2300      	movs	r3, #0
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <xQueueReceive+0x30>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	623b      	str	r3, [r7, #32]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <xQueueReceive+0x3e>
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueReceive+0x42>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueReceive+0x44>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueReceive+0x5e>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61fb      	str	r3, [r7, #28]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ab6:	f001 f975 	bl	8005da4 <xTaskGetSchedulerState>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <xQueueReceive+0x6e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <xQueueReceive+0x72>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <xQueueReceive+0x74>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xQueueReceive+0x8e>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	61bb      	str	r3, [r7, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ae6:	f001 fcad 	bl	8006444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01f      	beq.n	8004b36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afa:	f000 fa9b 	bl	8005034 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00f      	beq.n	8004b2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	3310      	adds	r3, #16
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 ff86 	bl	8005a24 <xTaskRemoveFromEventList>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b1e:	4b3d      	ldr	r3, [pc, #244]	; (8004c14 <xQueueReceive+0x1bc>)
 8004b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b2e:	f001 fcb9 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e069      	b.n	8004c0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d103      	bne.n	8004b44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b3c:	f001 fcb2 	bl	80064a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e062      	b.n	8004c0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b4a:	f107 0310 	add.w	r3, r7, #16
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 ffca 	bl	8005ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b58:	f001 fca4 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b5c:	f000 fd58 	bl	8005610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b60:	f001 fc70 	bl	8006444 <vPortEnterCritical>
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d103      	bne.n	8004b7a <xQueueReceive+0x122>
 8004b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d103      	bne.n	8004b90 <xQueueReceive+0x138>
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b90:	f001 fc88 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b94:	1d3a      	adds	r2, r7, #4
 8004b96:	f107 0310 	add.w	r3, r7, #16
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 ffb9 	bl	8005b14 <xTaskCheckForTimeOut>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d123      	bne.n	8004bf0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004baa:	f000 fabb 	bl	8005124 <prvIsQueueEmpty>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	3324      	adds	r3, #36	; 0x24
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 ff0d 	bl	80059dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bc4:	f000 fa5c 	bl	8005080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bc8:	f000 fd30 	bl	800562c <xTaskResumeAll>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d189      	bne.n	8004ae6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <xQueueReceive+0x1bc>)
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	e780      	b.n	8004ae6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be6:	f000 fa4b 	bl	8005080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bea:	f000 fd1f 	bl	800562c <xTaskResumeAll>
 8004bee:	e77a      	b.n	8004ae6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf2:	f000 fa45 	bl	8005080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bf6:	f000 fd19 	bl	800562c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bfc:	f000 fa92 	bl	8005124 <prvIsQueueEmpty>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f43f af6f 	beq.w	8004ae6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3730      	adds	r7, #48	; 0x30
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08e      	sub	sp, #56	; 0x38
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10a      	bne.n	8004c4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	623b      	str	r3, [r7, #32]
}
 8004c46:	bf00      	nop
 8004c48:	e7fe      	b.n	8004c48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	61fb      	str	r3, [r7, #28]
}
 8004c64:	bf00      	nop
 8004c66:	e7fe      	b.n	8004c66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c68:	f001 f89c 	bl	8005da4 <xTaskGetSchedulerState>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <xQueueSemaphoreTake+0x60>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <xQueueSemaphoreTake+0x64>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <xQueueSemaphoreTake+0x66>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	61bb      	str	r3, [r7, #24]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c98:	f001 fbd4 	bl	8006444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d024      	beq.n	8004cf2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cb8:	f001 fa1c 	bl	80060f4 <pvTaskIncrementMutexHeldCount>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	3310      	adds	r3, #16
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fea8 	bl	8005a24 <xTaskRemoveFromEventList>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cda:	4b54      	ldr	r3, [pc, #336]	; (8004e2c <xQueueSemaphoreTake+0x214>)
 8004cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cea:	f001 fbdb 	bl	80064a4 <vPortExitCritical>
				return pdPASS;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e097      	b.n	8004e22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	617b      	str	r3, [r7, #20]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d14:	f001 fbc6 	bl	80064a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e082      	b.n	8004e22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d22:	f107 030c 	add.w	r3, r7, #12
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fede 	bl	8005ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d30:	f001 fbb8 	bl	80064a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d34:	f000 fc6c 	bl	8005610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d38:	f001 fb84 	bl	8006444 <vPortEnterCritical>
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d103      	bne.n	8004d52 <xQueueSemaphoreTake+0x13a>
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d103      	bne.n	8004d68 <xQueueSemaphoreTake+0x150>
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	f001 fb9c 	bl	80064a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	f107 030c 	add.w	r3, r7, #12
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fecd 	bl	8005b14 <xTaskCheckForTimeOut>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d132      	bne.n	8004de6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d82:	f000 f9cf 	bl	8005124 <prvIsQueueEmpty>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d026      	beq.n	8004dda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004d94:	f001 fb56 	bl	8006444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f81f 	bl	8005de0 <xTaskPriorityInherit>
 8004da2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004da4:	f001 fb7e 	bl	80064a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	3324      	adds	r3, #36	; 0x24
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe13 	bl	80059dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004db8:	f000 f962 	bl	8005080 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dbc:	f000 fc36 	bl	800562c <xTaskResumeAll>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f47f af68 	bne.w	8004c98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004dc8:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <xQueueSemaphoreTake+0x214>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	e75e      	b.n	8004c98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ddc:	f000 f950 	bl	8005080 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004de0:	f000 fc24 	bl	800562c <xTaskResumeAll>
 8004de4:	e758      	b.n	8004c98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004de8:	f000 f94a 	bl	8005080 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dec:	f000 fc1e 	bl	800562c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004df2:	f000 f997 	bl	8005124 <prvIsQueueEmpty>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f43f af4d 	beq.w	8004c98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e04:	f001 fb1e 	bl	8006444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e0a:	f000 f891 	bl	8004f30 <prvGetDisinheritPriorityAfterTimeout>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 f8de 	bl	8005fd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e1c:	f001 fb42 	bl	80064a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3738      	adds	r7, #56	; 0x38
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08e      	sub	sp, #56	; 0x38
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	623b      	str	r3, [r7, #32]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <xQueueReceiveFromISR+0x3a>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueReceiveFromISR+0x3e>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueReceiveFromISR+0x40>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e8a:	f001 fbbd 	bl	8006608 <vPortValidateInterruptPriority>
	__asm volatile
 8004e8e:	f3ef 8211 	mrs	r2, BASEPRI
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	61ba      	str	r2, [r7, #24]
 8004ea4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ea6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02f      	beq.n	8004f16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ec4:	f000 f8b6 	bl	8005034 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	1e5a      	subs	r2, r3, #1
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ed0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d112      	bne.n	8004f00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fd9c 	bl	8005a24 <xTaskRemoveFromEventList>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e007      	b.n	8004f10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	b25a      	sxtb	r2, r3
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004f10:	2301      	movs	r3, #1
 8004f12:	637b      	str	r3, [r7, #52]	; 0x34
 8004f14:	e001      	b.n	8004f1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f383 8811 	msr	BASEPRI, r3
}
 8004f24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3738      	adds	r7, #56	; 0x38
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d006      	beq.n	8004f4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1c3 0307 	rsb	r3, r3, #7
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e001      	b.n	8004f52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f52:	68fb      	ldr	r3, [r7, #12]
	}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10d      	bne.n	8004f9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d14d      	bne.n	8005022 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 ff9e 	bl	8005ecc <xTaskPriorityDisinherit>
 8004f90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	e043      	b.n	8005022 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d119      	bne.n	8004fd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6858      	ldr	r0, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	f00e f93c 	bl	8013228 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	441a      	add	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d32b      	bcc.n	8005022 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	e026      	b.n	8005022 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68d8      	ldr	r0, [r3, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	f00e f922 	bl	8013228 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	425b      	negs	r3, r3
 8004fee:	441a      	add	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d207      	bcs.n	8005010 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	425b      	negs	r3, r3
 800500a:	441a      	add	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d105      	bne.n	8005022 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3b01      	subs	r3, #1
 8005020:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800502a:	697b      	ldr	r3, [r7, #20]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	441a      	add	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d303      	bcc.n	8005068 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68d9      	ldr	r1, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	461a      	mov	r2, r3
 8005072:	6838      	ldr	r0, [r7, #0]
 8005074:	f00e f8d8 	bl	8013228 <memcpy>
	}
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005088:	f001 f9dc 	bl	8006444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005092:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005094:	e011      	b.n	80050ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d012      	beq.n	80050c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3324      	adds	r3, #36	; 0x24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fcbe 	bl	8005a24 <xTaskRemoveFromEventList>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050ae:	f000 fd93 	bl	8005bd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	dce9      	bgt.n	8005096 <prvUnlockQueue+0x16>
 80050c2:	e000      	b.n	80050c6 <prvUnlockQueue+0x46>
					break;
 80050c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	22ff      	movs	r2, #255	; 0xff
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050ce:	f001 f9e9 	bl	80064a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050d2:	f001 f9b7 	bl	8006444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050de:	e011      	b.n	8005104 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3310      	adds	r3, #16
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fc99 	bl	8005a24 <xTaskRemoveFromEventList>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050f8:	f000 fd6e 	bl	8005bd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	3b01      	subs	r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005104:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005108:	2b00      	cmp	r3, #0
 800510a:	dce9      	bgt.n	80050e0 <prvUnlockQueue+0x60>
 800510c:	e000      	b.n	8005110 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800510e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	22ff      	movs	r2, #255	; 0xff
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005118:	f001 f9c4 	bl	80064a4 <vPortExitCritical>
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800512c:	f001 f98a 	bl	8006444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005138:	2301      	movs	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e001      	b.n	8005142 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005142:	f001 f9af 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005158:	f001 f974 	bl	8006444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	429a      	cmp	r2, r3
 8005166:	d102      	bne.n	800516e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005168:	2301      	movs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e001      	b.n	8005172 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005172:	f001 f997 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08e      	sub	sp, #56	; 0x38
 8005184:	af04      	add	r7, sp, #16
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	61fb      	str	r3, [r7, #28]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051c6:	23a0      	movs	r3, #160	; 0xa0
 80051c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2ba0      	cmp	r3, #160	; 0xa0
 80051ce:	d00a      	beq.n	80051e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61bb      	str	r3, [r7, #24]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d01e      	beq.n	800522c <xTaskCreateStatic+0xac>
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	2202      	movs	r2, #2
 8005202:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005206:	2300      	movs	r3, #0
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	9302      	str	r3, [sp, #8]
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f850 	bl	80052c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005226:	f000 f8eb 	bl	8005400 <prvAddNewTaskToReadyList>
 800522a:	e001      	b.n	8005230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005230:	697b      	ldr	r3, [r7, #20]
	}
 8005232:	4618      	mov	r0, r3
 8005234:	3728      	adds	r7, #40	; 0x28
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800523a:	b580      	push	{r7, lr}
 800523c:	b08c      	sub	sp, #48	; 0x30
 800523e:	af04      	add	r7, sp, #16
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4618      	mov	r0, r3
 8005250:	f001 fa1a 	bl	8006688 <pvPortMalloc>
 8005254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00e      	beq.n	800527a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800525c:	20a0      	movs	r0, #160	; 0xa0
 800525e:	f001 fa13 	bl	8006688 <pvPortMalloc>
 8005262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
 8005270:	e005      	b.n	800527e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005272:	6978      	ldr	r0, [r7, #20]
 8005274:	f001 fad4 	bl	8006820 <vPortFree>
 8005278:	e001      	b.n	800527e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d017      	beq.n	80052b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	2300      	movs	r3, #0
 8005290:	9303      	str	r3, [sp, #12]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	9302      	str	r3, [sp, #8]
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	9301      	str	r3, [sp, #4]
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f80e 	bl	80052c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052a8:	69f8      	ldr	r0, [r7, #28]
 80052aa:	f000 f8a9 	bl	8005400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	e002      	b.n	80052ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295
 80052b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ba:	69bb      	ldr	r3, [r7, #24]
	}
 80052bc:	4618      	mov	r0, r3
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052dc:	3b01      	subs	r3, #1
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f023 0307 	bic.w	r3, r3, #7
 80052ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <prvInitialiseNewTask+0x48>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	617b      	str	r3, [r7, #20]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01f      	beq.n	8005352 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	e012      	b.n	800533e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	7819      	ldrb	r1, [r3, #0]
 8005320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	3334      	adds	r3, #52	; 0x34
 8005328:	460a      	mov	r2, r1
 800532a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d006      	beq.n	8005346 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d9e9      	bls.n	8005318 <prvInitialiseNewTask+0x54>
 8005344:	e000      	b.n	8005348 <prvInitialiseNewTask+0x84>
			{
				break;
 8005346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005350:	e003      	b.n	800535a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	2b06      	cmp	r3, #6
 800535e:	d901      	bls.n	8005364 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005360:	2306      	movs	r3, #6
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2200      	movs	r2, #0
 8005374:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	3304      	adds	r3, #4
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe ff2c 	bl	80041d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	3318      	adds	r3, #24
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe ff27 	bl	80041d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	f1c3 0207 	rsb	r2, r3, #7
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	334c      	adds	r3, #76	; 0x4c
 80053b4:	224c      	movs	r2, #76	; 0x4c
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f00d fe6a 	bl	8013092 <memset>
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <prvInitialiseNewTask+0x130>)
 80053c2:	651a      	str	r2, [r3, #80]	; 0x50
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	4a0c      	ldr	r2, [pc, #48]	; (80053f8 <prvInitialiseNewTask+0x134>)
 80053c8:	655a      	str	r2, [r3, #84]	; 0x54
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	4a0b      	ldr	r2, [pc, #44]	; (80053fc <prvInitialiseNewTask+0x138>)
 80053ce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	69b8      	ldr	r0, [r7, #24]
 80053d6:	f000 ff07 	bl	80061e8 <pxPortInitialiseStack>
 80053da:	4602      	mov	r2, r0
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ec:	bf00      	nop
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20010a3c 	.word	0x20010a3c
 80053f8:	20010aa4 	.word	0x20010aa4
 80053fc:	20010b0c 	.word	0x20010b0c

08005400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005408:	f001 f81c 	bl	8006444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800540c:	4b2a      	ldr	r3, [pc, #168]	; (80054b8 <prvAddNewTaskToReadyList+0xb8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <prvAddNewTaskToReadyList+0xb8>)
 8005414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005416:	4b29      	ldr	r3, [pc, #164]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800541e:	4a27      	ldr	r2, [pc, #156]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <prvAddNewTaskToReadyList+0xb8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d110      	bne.n	800544e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800542c:	f000 fbf8 	bl	8005c20 <prvInitialiseTaskLists>
 8005430:	e00d      	b.n	800544e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005432:	4b23      	ldr	r3, [pc, #140]	; (80054c0 <prvAddNewTaskToReadyList+0xc0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800543a:	4b20      	ldr	r3, [pc, #128]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	429a      	cmp	r2, r3
 8005446:	d802      	bhi.n	800544e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <prvAddNewTaskToReadyList+0xc4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <prvAddNewTaskToReadyList+0xc4>)
 8005456:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	2201      	movs	r2, #1
 800545e:	409a      	lsls	r2, r3
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <prvAddNewTaskToReadyList+0xc8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4313      	orrs	r3, r2
 8005466:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <prvAddNewTaskToReadyList+0xcc>)
 8005478:	441a      	add	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7fe feb6 	bl	80041f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005486:	f001 f80d 	bl	80064a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <prvAddNewTaskToReadyList+0xc0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <prvAddNewTaskToReadyList+0xbc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	429a      	cmp	r2, r3
 800549e:	d207      	bcs.n	80054b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <prvAddNewTaskToReadyList+0xd0>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200050d0 	.word	0x200050d0
 80054bc:	20004fd0 	.word	0x20004fd0
 80054c0:	200050dc 	.word	0x200050dc
 80054c4:	200050ec 	.word	0x200050ec
 80054c8:	200050d8 	.word	0x200050d8
 80054cc:	20004fd4 	.word	0x20004fd4
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d017      	beq.n	8005516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054e6:	4b13      	ldr	r3, [pc, #76]	; (8005534 <vTaskDelay+0x60>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <vTaskDelay+0x30>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	60bb      	str	r3, [r7, #8]
}
 8005500:	bf00      	nop
 8005502:	e7fe      	b.n	8005502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005504:	f000 f884 	bl	8005610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005508:	2100      	movs	r1, #0
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fe06 	bl	800611c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005510:	f000 f88c 	bl	800562c <xTaskResumeAll>
 8005514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <vTaskDelay+0x64>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200050f8 	.word	0x200050f8
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800554a:	463a      	mov	r2, r7
 800554c:	1d39      	adds	r1, r7, #4
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f7fb f81a 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	9202      	str	r2, [sp, #8]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2300      	movs	r3, #0
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	460a      	mov	r2, r1
 800556a:	4921      	ldr	r1, [pc, #132]	; (80055f0 <vTaskStartScheduler+0xb4>)
 800556c:	4821      	ldr	r0, [pc, #132]	; (80055f4 <vTaskStartScheduler+0xb8>)
 800556e:	f7ff fe07 	bl	8005180 <xTaskCreateStatic>
 8005572:	4603      	mov	r3, r0
 8005574:	4a20      	ldr	r2, [pc, #128]	; (80055f8 <vTaskStartScheduler+0xbc>)
 8005576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005578:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <vTaskStartScheduler+0xbc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e001      	b.n	800558a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d11b      	bne.n	80055c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	613b      	str	r3, [r7, #16]
}
 80055a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <vTaskStartScheduler+0xc0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	334c      	adds	r3, #76	; 0x4c
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <vTaskStartScheduler+0xc4>)
 80055ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <vTaskStartScheduler+0xc8>)
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <vTaskStartScheduler+0xcc>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <vTaskStartScheduler+0xd0>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055c2:	f000 fe9d 	bl	8006300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055c6:	e00e      	b.n	80055e6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d10a      	bne.n	80055e6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <vTaskStartScheduler+0xa8>
}
 80055e6:	bf00      	nop
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	08013f70 	.word	0x08013f70
 80055f4:	08005bf1 	.word	0x08005bf1
 80055f8:	200050f4 	.word	0x200050f4
 80055fc:	20004fd0 	.word	0x20004fd0
 8005600:	20000078 	.word	0x20000078
 8005604:	200050f0 	.word	0x200050f0
 8005608:	200050dc 	.word	0x200050dc
 800560c:	200050d4 	.word	0x200050d4

08005610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <vTaskSuspendAll+0x18>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3301      	adds	r3, #1
 800561a:	4a03      	ldr	r2, [pc, #12]	; (8005628 <vTaskSuspendAll+0x18>)
 800561c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800561e:	bf00      	nop
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	200050f8 	.word	0x200050f8

0800562c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <xTaskResumeAll+0x114>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <xTaskResumeAll+0x2c>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	603b      	str	r3, [r7, #0]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005658:	f000 fef4 	bl	8006444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800565c:	4b38      	ldr	r3, [pc, #224]	; (8005740 <xTaskResumeAll+0x114>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	4a37      	ldr	r2, [pc, #220]	; (8005740 <xTaskResumeAll+0x114>)
 8005664:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <xTaskResumeAll+0x114>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d161      	bne.n	8005732 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800566e:	4b35      	ldr	r3, [pc, #212]	; (8005744 <xTaskResumeAll+0x118>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d05d      	beq.n	8005732 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005676:	e02e      	b.n	80056d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	4b33      	ldr	r3, [pc, #204]	; (8005748 <xTaskResumeAll+0x11c>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3318      	adds	r3, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe fe11 	bl	80042ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fe0c 	bl	80042ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	2201      	movs	r2, #1
 800569a:	409a      	lsls	r2, r3
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <xTaskResumeAll+0x120>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	4a2a      	ldr	r2, [pc, #168]	; (800574c <xTaskResumeAll+0x120>)
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4a27      	ldr	r2, [pc, #156]	; (8005750 <xTaskResumeAll+0x124>)
 80056b4:	441a      	add	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f7fe fd98 	bl	80041f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	4b23      	ldr	r3, [pc, #140]	; (8005754 <xTaskResumeAll+0x128>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <xTaskResumeAll+0x12c>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d6:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <xTaskResumeAll+0x11c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1cc      	bne.n	8005678 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056e4:	f000 fb3e 	bl	8005d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056e8:	4b1c      	ldr	r3, [pc, #112]	; (800575c <xTaskResumeAll+0x130>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d010      	beq.n	8005716 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056f4:	f000 f858 	bl	80057a8 <xTaskIncrementTick>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056fe:	4b16      	ldr	r3, [pc, #88]	; (8005758 <xTaskResumeAll+0x12c>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3b01      	subs	r3, #1
 8005708:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f1      	bne.n	80056f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005710:	4b12      	ldr	r3, [pc, #72]	; (800575c <xTaskResumeAll+0x130>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <xTaskResumeAll+0x12c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800571e:	2301      	movs	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <xTaskResumeAll+0x134>)
 8005724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005732:	f000 feb7 	bl	80064a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005736:	68bb      	ldr	r3, [r7, #8]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	200050f8 	.word	0x200050f8
 8005744:	200050d0 	.word	0x200050d0
 8005748:	20005090 	.word	0x20005090
 800574c:	200050d8 	.word	0x200050d8
 8005750:	20004fd4 	.word	0x20004fd4
 8005754:	20004fd0 	.word	0x20004fd0
 8005758:	200050e4 	.word	0x200050e4
 800575c:	200050e0 	.word	0x200050e0
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <xTaskGetTickCount+0x1c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	200050d4 	.word	0x200050d4

08005784 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800578a:	f000 ff3d 	bl	8006608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005792:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <xTaskGetTickCountFromISR+0x20>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005798:	683b      	ldr	r3, [r7, #0]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200050d4 	.word	0x200050d4

080057a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b4e      	ldr	r3, [pc, #312]	; (80058ec <xTaskIncrementTick+0x144>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 808e 	bne.w	80058d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057bc:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <xTaskIncrementTick+0x148>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057c4:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <xTaskIncrementTick+0x148>)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d120      	bne.n	8005812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057d0:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xTaskIncrementTick+0x46>
 80057f0:	4b40      	ldr	r3, [pc, #256]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	4b40      	ldr	r3, [pc, #256]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3e      	ldr	r2, [pc, #248]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	4a3e      	ldr	r2, [pc, #248]	; (80058f8 <xTaskIncrementTick+0x150>)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <xTaskIncrementTick+0x154>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	4a3c      	ldr	r2, [pc, #240]	; (80058fc <xTaskIncrementTick+0x154>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	f000 faa9 	bl	8005d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005812:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <xTaskIncrementTick+0x158>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	d348      	bcc.n	80058ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581c:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <xTaskIncrementTick+0x14c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005826:	4b36      	ldr	r3, [pc, #216]	; (8005900 <xTaskIncrementTick+0x158>)
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	601a      	str	r2, [r3, #0]
					break;
 800582e:	e03e      	b.n	80058ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005830:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <xTaskIncrementTick+0x14c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d203      	bcs.n	8005850 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005848:	4a2d      	ldr	r2, [pc, #180]	; (8005900 <xTaskIncrementTick+0x158>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800584e:	e02e      	b.n	80058ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fd29 	bl	80042ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3318      	adds	r3, #24
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fd20 	bl	80042ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	4b23      	ldr	r3, [pc, #140]	; (8005904 <xTaskIncrementTick+0x15c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4313      	orrs	r3, r2
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <xTaskIncrementTick+0x15c>)
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a1f      	ldr	r2, [pc, #124]	; (8005908 <xTaskIncrementTick+0x160>)
 800588c:	441a      	add	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f7fe fcac 	bl	80041f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4b1b      	ldr	r3, [pc, #108]	; (800590c <xTaskIncrementTick+0x164>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3b9      	bcc.n	800581c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ac:	e7b6      	b.n	800581c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058ae:	4b17      	ldr	r3, [pc, #92]	; (800590c <xTaskIncrementTick+0x164>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4914      	ldr	r1, [pc, #80]	; (8005908 <xTaskIncrementTick+0x160>)
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d901      	bls.n	80058ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058ca:	4b11      	ldr	r3, [pc, #68]	; (8005910 <xTaskIncrementTick+0x168>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e004      	b.n	80058e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <xTaskIncrementTick+0x16c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	4a0d      	ldr	r2, [pc, #52]	; (8005914 <xTaskIncrementTick+0x16c>)
 80058e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058e2:	697b      	ldr	r3, [r7, #20]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	200050f8 	.word	0x200050f8
 80058f0:	200050d4 	.word	0x200050d4
 80058f4:	20005088 	.word	0x20005088
 80058f8:	2000508c 	.word	0x2000508c
 80058fc:	200050e8 	.word	0x200050e8
 8005900:	200050f0 	.word	0x200050f0
 8005904:	200050d8 	.word	0x200050d8
 8005908:	20004fd4 	.word	0x20004fd4
 800590c:	20004fd0 	.word	0x20004fd0
 8005910:	200050e4 	.word	0x200050e4
 8005914:	200050e0 	.word	0x200050e0

08005918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800591e:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <vTaskSwitchContext+0xac>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <vTaskSwitchContext+0xb0>)
 8005928:	2201      	movs	r2, #1
 800592a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800592c:	e044      	b.n	80059b8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800592e:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <vTaskSwitchContext+0xb0>)
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <vTaskSwitchContext+0xb4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	fab3 f383 	clz	r3, r3
 8005940:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	f1c3 031f 	rsb	r3, r3, #31
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	4921      	ldr	r1, [pc, #132]	; (80059d0 <vTaskSwitchContext+0xb8>)
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vTaskSwitchContext+0x5c>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	607b      	str	r3, [r7, #4]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vTaskSwitchContext+0x5a>
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <vTaskSwitchContext+0xb8>)
 8005980:	4413      	add	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3308      	adds	r3, #8
 8005996:	429a      	cmp	r2, r3
 8005998:	d104      	bne.n	80059a4 <vTaskSwitchContext+0x8c>
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	4a0a      	ldr	r2, [pc, #40]	; (80059d4 <vTaskSwitchContext+0xbc>)
 80059ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059ae:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <vTaskSwitchContext+0xbc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	334c      	adds	r3, #76	; 0x4c
 80059b4:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <vTaskSwitchContext+0xc0>)
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	200050f8 	.word	0x200050f8
 80059c8:	200050e4 	.word	0x200050e4
 80059cc:	200050d8 	.word	0x200050d8
 80059d0:	20004fd4 	.word	0x20004fd4
 80059d4:	20004fd0 	.word	0x20004fd0
 80059d8:	20000078 	.word	0x20000078

080059dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	60fb      	str	r3, [r7, #12]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <vTaskPlaceOnEventList+0x44>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3318      	adds	r3, #24
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fe fc15 	bl	800423a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a10:	2101      	movs	r1, #1
 8005a12:	6838      	ldr	r0, [r7, #0]
 8005a14:	f000 fb82 	bl	800611c <prvAddCurrentTaskToDelayedList>
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20004fd0 	.word	0x20004fd0

08005a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	60fb      	str	r3, [r7, #12]
}
 8005a4c:	bf00      	nop
 8005a4e:	e7fe      	b.n	8005a4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	3318      	adds	r3, #24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fc29 	bl	80042ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <xTaskRemoveFromEventList+0xac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11c      	bne.n	8005a9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	3304      	adds	r3, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fc20 	bl	80042ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	2201      	movs	r2, #1
 8005a72:	409a      	lsls	r2, r3
 8005a74:	4b17      	ldr	r3, [pc, #92]	; (8005ad4 <xTaskRemoveFromEventList+0xb0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	4a16      	ldr	r2, [pc, #88]	; (8005ad4 <xTaskRemoveFromEventList+0xb0>)
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <xTaskRemoveFromEventList+0xb4>)
 8005a8c:	441a      	add	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	3304      	adds	r3, #4
 8005a92:	4619      	mov	r1, r3
 8005a94:	4610      	mov	r0, r2
 8005a96:	f7fe fbac 	bl	80041f2 <vListInsertEnd>
 8005a9a:	e005      	b.n	8005aa8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	480e      	ldr	r0, [pc, #56]	; (8005adc <xTaskRemoveFromEventList+0xb8>)
 8005aa4:	f7fe fba5 	bl	80041f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <xTaskRemoveFromEventList+0xbc>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d905      	bls.n	8005ac2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <xTaskRemoveFromEventList+0xc0>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e001      	b.n	8005ac6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ac6:	697b      	ldr	r3, [r7, #20]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3718      	adds	r7, #24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	200050f8 	.word	0x200050f8
 8005ad4:	200050d8 	.word	0x200050d8
 8005ad8:	20004fd4 	.word	0x20004fd4
 8005adc:	20005090 	.word	0x20005090
 8005ae0:	20004fd0 	.word	0x20004fd0
 8005ae4:	200050e4 	.word	0x200050e4

08005ae8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <vTaskInternalSetTimeOutState+0x24>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005af8:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <vTaskInternalSetTimeOutState+0x28>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	605a      	str	r2, [r3, #4]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	200050e8 	.word	0x200050e8
 8005b10:	200050d4 	.word	0x200050d4

08005b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	613b      	str	r3, [r7, #16]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b56:	f000 fc75 	bl	8006444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <xTaskCheckForTimeOut+0xbc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d102      	bne.n	8005b7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
 8005b78:	e023      	b.n	8005bc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <xTaskCheckForTimeOut+0xc0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d007      	beq.n	8005b96 <xTaskCheckForTimeOut+0x82>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d302      	bcc.n	8005b96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e015      	b.n	8005bc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d20b      	bcs.n	8005bb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	1ad2      	subs	r2, r2, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff ff9b 	bl	8005ae8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
 8005bb6:	e004      	b.n	8005bc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bc2:	f000 fc6f 	bl	80064a4 <vPortExitCritical>

	return xReturn;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	200050d4 	.word	0x200050d4
 8005bd4:	200050e8 	.word	0x200050e8

08005bd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <vTaskMissedYield+0x14>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	200050e4 	.word	0x200050e4

08005bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bf8:	f000 f852 	bl	8005ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <prvIdleTask+0x28>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d9f9      	bls.n	8005bf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <prvIdleTask+0x2c>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c14:	e7f0      	b.n	8005bf8 <prvIdleTask+0x8>
 8005c16:	bf00      	nop
 8005c18:	20004fd4 	.word	0x20004fd4
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	e00c      	b.n	8005c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <prvInitialiseTaskLists+0x60>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe faac 	bl	8004198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3301      	adds	r3, #1
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d9ef      	bls.n	8005c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c4c:	480d      	ldr	r0, [pc, #52]	; (8005c84 <prvInitialiseTaskLists+0x64>)
 8005c4e:	f7fe faa3 	bl	8004198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c52:	480d      	ldr	r0, [pc, #52]	; (8005c88 <prvInitialiseTaskLists+0x68>)
 8005c54:	f7fe faa0 	bl	8004198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c58:	480c      	ldr	r0, [pc, #48]	; (8005c8c <prvInitialiseTaskLists+0x6c>)
 8005c5a:	f7fe fa9d 	bl	8004198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c5e:	480c      	ldr	r0, [pc, #48]	; (8005c90 <prvInitialiseTaskLists+0x70>)
 8005c60:	f7fe fa9a 	bl	8004198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c64:	480b      	ldr	r0, [pc, #44]	; (8005c94 <prvInitialiseTaskLists+0x74>)
 8005c66:	f7fe fa97 	bl	8004198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <prvInitialiseTaskLists+0x78>)
 8005c6c:	4a05      	ldr	r2, [pc, #20]	; (8005c84 <prvInitialiseTaskLists+0x64>)
 8005c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <prvInitialiseTaskLists+0x7c>)
 8005c72:	4a05      	ldr	r2, [pc, #20]	; (8005c88 <prvInitialiseTaskLists+0x68>)
 8005c74:	601a      	str	r2, [r3, #0]
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20004fd4 	.word	0x20004fd4
 8005c84:	20005060 	.word	0x20005060
 8005c88:	20005074 	.word	0x20005074
 8005c8c:	20005090 	.word	0x20005090
 8005c90:	200050a4 	.word	0x200050a4
 8005c94:	200050bc 	.word	0x200050bc
 8005c98:	20005088 	.word	0x20005088
 8005c9c:	2000508c 	.word	0x2000508c

08005ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ca6:	e019      	b.n	8005cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ca8:	f000 fbcc 	bl	8006444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cac:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <prvCheckTasksWaitingTermination+0x50>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3304      	adds	r3, #4
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe faf7 	bl	80042ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <prvCheckTasksWaitingTermination+0x54>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	4a0b      	ldr	r2, [pc, #44]	; (8005cf4 <prvCheckTasksWaitingTermination+0x54>)
 8005cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <prvCheckTasksWaitingTermination+0x58>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <prvCheckTasksWaitingTermination+0x58>)
 8005cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cd2:	f000 fbe7 	bl	80064a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f810 	bl	8005cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <prvCheckTasksWaitingTermination+0x58>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e1      	bne.n	8005ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200050a4 	.word	0x200050a4
 8005cf4:	200050d0 	.word	0x200050d0
 8005cf8:	200050b8 	.word	0x200050b8

08005cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	334c      	adds	r3, #76	; 0x4c
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f00d f9db 	bl	80130c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d108      	bne.n	8005d2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fd7f 	bl	8006820 <vPortFree>
				vPortFree( pxTCB );
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fd7c 	bl	8006820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d28:	e018      	b.n	8005d5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d103      	bne.n	8005d3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fd73 	bl	8006820 <vPortFree>
	}
 8005d3a:	e00f      	b.n	8005d5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d00a      	beq.n	8005d5c <prvDeleteTCB+0x60>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60fb      	str	r3, [r7, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <prvDeleteTCB+0x5e>
	}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6a:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <prvResetNextTaskUnblockTime+0x38>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d104      	bne.n	8005d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <prvResetNextTaskUnblockTime+0x3c>)
 8005d76:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d7c:	e008      	b.n	8005d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7e:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <prvResetNextTaskUnblockTime+0x38>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <prvResetNextTaskUnblockTime+0x3c>)
 8005d8e:	6013      	str	r3, [r2, #0]
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	20005088 	.word	0x20005088
 8005da0:	200050f0 	.word	0x200050f0

08005da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005daa:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <xTaskGetSchedulerState+0x34>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005db2:	2301      	movs	r3, #1
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	e008      	b.n	8005dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <xTaskGetSchedulerState+0x38>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d102      	bne.n	8005dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	607b      	str	r3, [r7, #4]
 8005dc4:	e001      	b.n	8005dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dca:	687b      	ldr	r3, [r7, #4]
	}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	200050dc 	.word	0x200050dc
 8005ddc:	200050f8 	.word	0x200050f8

08005de0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d05e      	beq.n	8005eb4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <xTaskPriorityInherit+0xe0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d24e      	bcs.n	8005ea2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	db06      	blt.n	8005e1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0c:	4b2c      	ldr	r3, [pc, #176]	; (8005ec0 <xTaskPriorityInherit+0xe0>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	f1c3 0207 	rsb	r2, r3, #7
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6959      	ldr	r1, [r3, #20]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <xTaskPriorityInherit+0xe4>)
 8005e2c:	4413      	add	r3, r2
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	d12f      	bne.n	8005e92 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	3304      	adds	r3, #4
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe fa38 	bl	80042ac <uxListRemove>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10a      	bne.n	8005e58 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	2201      	movs	r2, #1
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43da      	mvns	r2, r3
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <xTaskPriorityInherit+0xe8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4013      	ands	r3, r2
 8005e54:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <xTaskPriorityInherit+0xe8>)
 8005e56:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e58:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <xTaskPriorityInherit+0xe0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	2201      	movs	r2, #1
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <xTaskPriorityInherit+0xe8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <xTaskPriorityInherit+0xe8>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <xTaskPriorityInherit+0xe4>)
 8005e82:	441a      	add	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe f9b1 	bl	80041f2 <vListInsertEnd>
 8005e90:	e004      	b.n	8005e9c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <xTaskPriorityInherit+0xe0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e008      	b.n	8005eb4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea6:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <xTaskPriorityInherit+0xe0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d201      	bcs.n	8005eb4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
	}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20004fd0 	.word	0x20004fd0
 8005ec4:	20004fd4 	.word	0x20004fd4
 8005ec8:	200050d8 	.word	0x200050d8

08005ecc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d06e      	beq.n	8005fc0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <xTaskPriorityDisinherit+0x100>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d00a      	beq.n	8005f02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	60fb      	str	r3, [r7, #12]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	60bb      	str	r3, [r7, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d044      	beq.n	8005fc0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d140      	bne.n	8005fc0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe f9b2 	bl	80042ac <uxListRemove>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d115      	bne.n	8005f7a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f52:	491f      	ldr	r1, [pc, #124]	; (8005fd0 <xTaskPriorityDisinherit+0x104>)
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <xTaskPriorityDisinherit+0xae>
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	2201      	movs	r2, #1
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43da      	mvns	r2, r3
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <xTaskPriorityDisinherit+0x108>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4013      	ands	r3, r2
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <xTaskPriorityDisinherit+0x108>)
 8005f78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	f1c3 0207 	rsb	r2, r3, #7
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	2201      	movs	r2, #1
 8005f94:	409a      	lsls	r2, r3
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <xTaskPriorityDisinherit+0x108>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	4a0d      	ldr	r2, [pc, #52]	; (8005fd4 <xTaskPriorityDisinherit+0x108>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <xTaskPriorityDisinherit+0x104>)
 8005fae:	441a      	add	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f7fe f91b 	bl	80041f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fc0:	697b      	ldr	r3, [r7, #20]
	}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20004fd0 	.word	0x20004fd0
 8005fd0:	20004fd4 	.word	0x20004fd4
 8005fd4:	200050d8 	.word	0x200050d8

08005fd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d077      	beq.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	60fb      	str	r3, [r7, #12]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d902      	bls.n	800601e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	e002      	b.n	8006024 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	429a      	cmp	r2, r3
 800602c:	d058      	beq.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	d153      	bne.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006038:	4b2b      	ldr	r3, [pc, #172]	; (80060e8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	429a      	cmp	r2, r3
 8006040:	d10a      	bne.n	8006058 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	60bb      	str	r3, [r7, #8]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	db04      	blt.n	8006076 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f1c3 0207 	rsb	r2, r3, #7
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	6959      	ldr	r1, [r3, #20]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4a19      	ldr	r2, [pc, #100]	; (80060ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006086:	4413      	add	r3, r2
 8006088:	4299      	cmp	r1, r3
 800608a:	d129      	bne.n	80060e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	3304      	adds	r3, #4
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe f90b 	bl	80042ac <uxListRemove>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	2201      	movs	r2, #1
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	43da      	mvns	r2, r3
 80060a8:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4013      	ands	r3, r2
 80060ae:	4a10      	ldr	r2, [pc, #64]	; (80060f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	2201      	movs	r2, #1
 80060b8:	409a      	lsls	r2, r3
 80060ba:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4313      	orrs	r3, r2
 80060c0:	4a0b      	ldr	r2, [pc, #44]	; (80060f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4a06      	ldr	r2, [pc, #24]	; (80060ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80060d2:	441a      	add	r2, r3
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	3304      	adds	r3, #4
 80060d8:	4619      	mov	r1, r3
 80060da:	4610      	mov	r0, r2
 80060dc:	f7fe f889 	bl	80041f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060e0:	bf00      	nop
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20004fd0 	.word	0x20004fd0
 80060ec:	20004fd4 	.word	0x20004fd4
 80060f0:	200050d8 	.word	0x200050d8

080060f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <pvTaskIncrementMutexHeldCount+0x24>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006100:	4b05      	ldr	r3, [pc, #20]	; (8006118 <pvTaskIncrementMutexHeldCount+0x24>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006106:	3201      	adds	r2, #1
 8006108:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800610a:	4b03      	ldr	r3, [pc, #12]	; (8006118 <pvTaskIncrementMutexHeldCount+0x24>)
 800610c:	681b      	ldr	r3, [r3, #0]
	}
 800610e:	4618      	mov	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	20004fd0 	.word	0x20004fd0

0800611c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe f8ba 	bl	80042ac <uxListRemove>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800613e:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	2201      	movs	r2, #1
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43da      	mvns	r2, r3
 800614c:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4013      	ands	r3, r2
 8006152:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006154:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d10a      	bne.n	8006174 <prvAddCurrentTaskToDelayedList+0x58>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3304      	adds	r3, #4
 800616a:	4619      	mov	r1, r3
 800616c:	481a      	ldr	r0, [pc, #104]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800616e:	f7fe f840 	bl	80041f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006172:	e026      	b.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4413      	add	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	429a      	cmp	r2, r3
 800618a:	d209      	bcs.n	80061a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618c:	4b13      	ldr	r3, [pc, #76]	; (80061dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe f84e 	bl	800423a <vListInsert>
}
 800619e:	e010      	b.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a0:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3304      	adds	r3, #4
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7fe f844 	bl	800423a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d202      	bcs.n	80061c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061bc:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6013      	str	r3, [r2, #0]
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200050d4 	.word	0x200050d4
 80061d0:	20004fd0 	.word	0x20004fd0
 80061d4:	200050d8 	.word	0x200050d8
 80061d8:	200050bc 	.word	0x200050bc
 80061dc:	2000508c 	.word	0x2000508c
 80061e0:	20005088 	.word	0x20005088
 80061e4:	200050f0 	.word	0x200050f0

080061e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3b04      	subs	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3b04      	subs	r3, #4
 8006206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b04      	subs	r3, #4
 8006216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006218:	4a0c      	ldr	r2, [pc, #48]	; (800624c <pxPortInitialiseStack+0x64>)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b14      	subs	r3, #20
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b04      	subs	r3, #4
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f06f 0202 	mvn.w	r2, #2
 8006236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b20      	subs	r3, #32
 800623c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	08006251 	.word	0x08006251

08006250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <prvTaskExitError+0x54>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d00a      	beq.n	800627a <prvTaskExitError+0x2a>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <prvTaskExitError+0x28>
	__asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	60bb      	str	r3, [r7, #8]
}
 800628c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800628e:	bf00      	nop
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0fc      	beq.n	8006290 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	2000000c 	.word	0x2000000c
	...

080062b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <pxCurrentTCBConst2>)
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	6808      	ldr	r0, [r1, #0]
 80062b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	f380 8809 	msr	PSP, r0
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f04f 0000 	mov.w	r0, #0
 80062c6:	f380 8811 	msr	BASEPRI, r0
 80062ca:	4770      	bx	lr
 80062cc:	f3af 8000 	nop.w

080062d0 <pxCurrentTCBConst2>:
 80062d0:	20004fd0 	.word	0x20004fd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop

080062d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062d8:	4808      	ldr	r0, [pc, #32]	; (80062fc <prvPortStartFirstTask+0x24>)
 80062da:	6800      	ldr	r0, [r0, #0]
 80062dc:	6800      	ldr	r0, [r0, #0]
 80062de:	f380 8808 	msr	MSP, r0
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8814 	msr	CONTROL, r0
 80062ea:	b662      	cpsie	i
 80062ec:	b661      	cpsie	f
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	df00      	svc	0
 80062f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062fa:	bf00      	nop
 80062fc:	e000ed08 	.word	0xe000ed08

08006300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006306:	4b46      	ldr	r3, [pc, #280]	; (8006420 <xPortStartScheduler+0x120>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a46      	ldr	r2, [pc, #280]	; (8006424 <xPortStartScheduler+0x124>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10a      	bne.n	8006326 <xPortStartScheduler+0x26>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	613b      	str	r3, [r7, #16]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006326:	4b3e      	ldr	r3, [pc, #248]	; (8006420 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3f      	ldr	r2, [pc, #252]	; (8006428 <xPortStartScheduler+0x128>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x46>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <xPortStartScheduler+0x12c>)
 8006348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <xPortStartScheduler+0x130>)
 800636c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800636e:	4b31      	ldr	r3, [pc, #196]	; (8006434 <xPortStartScheduler+0x134>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006374:	e009      	b.n	800638a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006376:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <xPortStartScheduler+0x134>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3b01      	subs	r3, #1
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <xPortStartScheduler+0x134>)
 800637e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b80      	cmp	r3, #128	; 0x80
 8006394:	d0ef      	beq.n	8006376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006396:	4b27      	ldr	r3, [pc, #156]	; (8006434 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1c3 0307 	rsb	r3, r3, #7
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00a      	beq.n	80063b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <xPortStartScheduler+0x134>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	4a1d      	ldr	r2, [pc, #116]	; (8006434 <xPortStartScheduler+0x134>)
 80063c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063c2:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xPortStartScheduler+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ca:	4a1a      	ldr	r2, [pc, #104]	; (8006434 <xPortStartScheduler+0x134>)
 80063cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063d6:	4b18      	ldr	r3, [pc, #96]	; (8006438 <xPortStartScheduler+0x138>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <xPortStartScheduler+0x138>)
 80063dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <xPortStartScheduler+0x138>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a14      	ldr	r2, [pc, #80]	; (8006438 <xPortStartScheduler+0x138>)
 80063e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ee:	f000 f8dd 	bl	80065ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <xPortStartScheduler+0x13c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063f8:	f000 f8fc 	bl	80065f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xPortStartScheduler+0x140>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0f      	ldr	r2, [pc, #60]	; (8006440 <xPortStartScheduler+0x140>)
 8006402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006408:	f7ff ff66 	bl	80062d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800640c:	f7ff fa84 	bl	8005918 <vTaskSwitchContext>
	prvTaskExitError();
 8006410:	f7ff ff1e 	bl	8006250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	e000ed00 	.word	0xe000ed00
 8006424:	410fc271 	.word	0x410fc271
 8006428:	410fc270 	.word	0x410fc270
 800642c:	e000e400 	.word	0xe000e400
 8006430:	200050fc 	.word	0x200050fc
 8006434:	20005100 	.word	0x20005100
 8006438:	e000ed20 	.word	0xe000ed20
 800643c:	2000000c 	.word	0x2000000c
 8006440:	e000ef34 	.word	0xe000ef34

08006444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	607b      	str	r3, [r7, #4]
}
 800645c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vPortEnterCritical+0x58>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <vPortEnterCritical+0x58>)
 8006466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <vPortEnterCritical+0x58>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10f      	bne.n	8006490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortEnterCritical+0x5c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <vPortEnterCritical+0x4c>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	603b      	str	r3, [r7, #0]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <vPortEnterCritical+0x4a>
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064aa:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <vPortExitCritical+0x50>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <vPortExitCritical+0x24>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	607b      	str	r3, [r7, #4]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <vPortExitCritical+0x50>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <vPortExitCritical+0x50>)
 80064d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d2:	4b08      	ldr	r3, [pc, #32]	; (80064f4 <vPortExitCritical+0x50>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <vPortExitCritical+0x42>
 80064da:	2300      	movs	r3, #0
 80064dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f383 8811 	msr	BASEPRI, r3
}
 80064e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	2000000c 	.word	0x2000000c
	...

08006500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006500:	f3ef 8009 	mrs	r0, PSP
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	4b15      	ldr	r3, [pc, #84]	; (8006560 <pxCurrentTCBConst>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f01e 0f10 	tst.w	lr, #16
 8006510:	bf08      	it	eq
 8006512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	6010      	str	r0, [r2, #0]
 800651c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006524:	f380 8811 	msr	BASEPRI, r0
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f7ff f9f2 	bl	8005918 <vTaskSwitchContext>
 8006534:	f04f 0000 	mov.w	r0, #0
 8006538:	f380 8811 	msr	BASEPRI, r0
 800653c:	bc09      	pop	{r0, r3}
 800653e:	6819      	ldr	r1, [r3, #0]
 8006540:	6808      	ldr	r0, [r1, #0]
 8006542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006546:	f01e 0f10 	tst.w	lr, #16
 800654a:	bf08      	it	eq
 800654c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006550:	f380 8809 	msr	PSP, r0
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst>:
 8006560:	20004fd0 	.word	0x20004fd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	607b      	str	r3, [r7, #4]
}
 8006580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006582:	f7ff f911 	bl	80057a8 <xTaskIncrementTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <SysTick_Handler+0x40>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f383 8811 	msr	BASEPRI, r3
}
 800659e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065b6:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <vPortSetupTimerInterrupt+0x38>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065bc:	4b0a      	ldr	r3, [pc, #40]	; (80065e8 <vPortSetupTimerInterrupt+0x3c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <vPortSetupTimerInterrupt+0x40>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <vPortSetupTimerInterrupt+0x44>)
 80065ca:	3b01      	subs	r3, #1
 80065cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ce:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vPortSetupTimerInterrupt+0x34>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	e000e010 	.word	0xe000e010
 80065e4:	e000e018 	.word	0xe000e018
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	e000e014 	.word	0xe000e014

080065f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006604 <vPortEnableVFP+0x10>
 80065f8:	6801      	ldr	r1, [r0, #0]
 80065fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065fe:	6001      	str	r1, [r0, #0]
 8006600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006602:	bf00      	nop
 8006604:	e000ed88 	.word	0xe000ed88

08006608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b0f      	cmp	r3, #15
 8006618:	d914      	bls.n	8006644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <vPortValidateInterruptPriority+0x70>)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006624:	4b15      	ldr	r3, [pc, #84]	; (800667c <vPortValidateInterruptPriority+0x74>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	7afa      	ldrb	r2, [r7, #11]
 800662a:	429a      	cmp	r2, r3
 800662c:	d20a      	bcs.n	8006644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
 8006642:	e7fe      	b.n	8006642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006644:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <vPortValidateInterruptPriority+0x78>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <vPortValidateInterruptPriority+0x7c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d90a      	bls.n	800666a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	603b      	str	r3, [r7, #0]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <vPortValidateInterruptPriority+0x60>
	}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	e000e3f0 	.word	0xe000e3f0
 800667c:	200050fc 	.word	0x200050fc
 8006680:	e000ed0c 	.word	0xe000ed0c
 8006684:	20005100 	.word	0x20005100

08006688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006694:	f7fe ffbc 	bl	8005610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <pvPortMalloc+0x180>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066a0:	f000 f920 	bl	80068e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066a4:	4b59      	ldr	r3, [pc, #356]	; (800680c <pvPortMalloc+0x184>)
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8093 	bne.w	80067d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01d      	beq.n	80066f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066b8:	2208      	movs	r2, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	3308      	adds	r3, #8
 80066d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <pvPortMalloc+0x6c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	617b      	str	r3, [r7, #20]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d06e      	beq.n	80067d8 <pvPortMalloc+0x150>
 80066fa:	4b45      	ldr	r3, [pc, #276]	; (8006810 <pvPortMalloc+0x188>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d869      	bhi.n	80067d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006704:	4b43      	ldr	r3, [pc, #268]	; (8006814 <pvPortMalloc+0x18c>)
 8006706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006708:	4b42      	ldr	r3, [pc, #264]	; (8006814 <pvPortMalloc+0x18c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670e:	e004      	b.n	800671a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d903      	bls.n	800672c <pvPortMalloc+0xa4>
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f1      	bne.n	8006710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800672c:	4b36      	ldr	r3, [pc, #216]	; (8006808 <pvPortMalloc+0x180>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d050      	beq.n	80067d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2208      	movs	r2, #8
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	2308      	movs	r3, #8
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	429a      	cmp	r2, r3
 8006756:	d91f      	bls.n	8006798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <pvPortMalloc+0xf8>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	613b      	str	r3, [r7, #16]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006792:	69b8      	ldr	r0, [r7, #24]
 8006794:	f000 f908 	bl	80069a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <pvPortMalloc+0x188>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <pvPortMalloc+0x188>)
 80067a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <pvPortMalloc+0x188>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <pvPortMalloc+0x190>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d203      	bcs.n	80067ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <pvPortMalloc+0x188>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a18      	ldr	r2, [pc, #96]	; (8006818 <pvPortMalloc+0x190>)
 80067b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <pvPortMalloc+0x184>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <pvPortMalloc+0x194>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3301      	adds	r3, #1
 80067d4:	4a11      	ldr	r2, [pc, #68]	; (800681c <pvPortMalloc+0x194>)
 80067d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067d8:	f7fe ff28 	bl	800562c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <pvPortMalloc+0x174>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <pvPortMalloc+0x172>
	return pvReturn;
 80067fc:	69fb      	ldr	r3, [r7, #28]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000d10c 	.word	0x2000d10c
 800680c:	2000d120 	.word	0x2000d120
 8006810:	2000d110 	.word	0x2000d110
 8006814:	2000d104 	.word	0x2000d104
 8006818:	2000d114 	.word	0x2000d114
 800681c:	2000d118 	.word	0x2000d118

08006820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04d      	beq.n	80068ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006832:	2308      	movs	r3, #8
 8006834:	425b      	negs	r3, r3
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <vPortFree+0xb8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <vPortFree+0x44>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <vPortFree+0x62>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4b14      	ldr	r3, [pc, #80]	; (80068d8 <vPortFree+0xb8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11a      	bne.n	80068ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <vPortFree+0xb8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	401a      	ands	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068a8:	f7fe feb2 	bl	8005610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <vPortFree+0xbc>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	4a09      	ldr	r2, [pc, #36]	; (80068dc <vPortFree+0xbc>)
 80068b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ba:	6938      	ldr	r0, [r7, #16]
 80068bc:	f000 f874 	bl	80069a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <vPortFree+0xc0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vPortFree+0xc0>)
 80068c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ca:	f7fe feaf 	bl	800562c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000d120 	.word	0x2000d120
 80068dc:	2000d110 	.word	0x2000d110
 80068e0:	2000d11c 	.word	0x2000d11c

080068e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvHeapInit+0xac>)
 80068f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvHeapInit+0xac>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <prvHeapInit+0xb0>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <prvHeapInit+0xb0>)
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006930:	2208      	movs	r2, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvHeapInit+0xb4>)
 8006944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvHeapInit+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <prvHeapInit+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvHeapInit+0xb4>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvHeapInit+0xb8>)
 8006972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvHeapInit+0xbc>)
 800697a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvHeapInit+0xc0>)
 800697e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20005104 	.word	0x20005104
 8006994:	2000d104 	.word	0x2000d104
 8006998:	2000d10c 	.word	0x2000d10c
 800699c:	2000d114 	.word	0x2000d114
 80069a0:	2000d110 	.word	0x2000d110
 80069a4:	2000d120 	.word	0x2000d120

080069a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <prvInsertBlockIntoFreeList+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e002      	b.n	80069bc <prvInsertBlockIntoFreeList+0x14>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8f7      	bhi.n	80069b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d118      	bne.n	8006a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d00d      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e003      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d002      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000d104 	.word	0x2000d104
 8006a58:	2000d10c 	.word	0x2000d10c

08006a5c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006a66:	f007 fa79 	bl	800df5c <sys_timeouts_sleeptime>
 8006a6a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d10b      	bne.n	8006a8c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006a74:	4813      	ldr	r0, [pc, #76]	; (8006ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006a76:	f00c f968 	bl	8012d4a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f00c f8da 	bl	8012c38 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006a84:	480f      	ldr	r0, [pc, #60]	; (8006ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006a86:	f00c f951 	bl	8012d2c <sys_mutex_lock>
    return;
 8006a8a:	e018      	b.n	8006abe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8006a92:	f007 fa29 	bl	800dee8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006a96:	e7e6      	b.n	8006a66 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8006a98:	480a      	ldr	r0, [pc, #40]	; (8006ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006a9a:	f00c f956 	bl	8012d4a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f00c f8c8 	bl	8012c38 <sys_arch_mbox_fetch>
 8006aa8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8006aaa:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006aac:	f00c f93e 	bl	8012d2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d102      	bne.n	8006abe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8006ab8:	f007 fa16 	bl	800dee8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8006abc:	e7d3      	b.n	8006a66 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	2000d130 	.word	0x2000d130

08006ac8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006ad0:	4810      	ldr	r0, [pc, #64]	; (8006b14 <tcpip_thread+0x4c>)
 8006ad2:	f00c f92b 	bl	8012d2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006ad6:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <tcpip_thread+0x50>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8006ade:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <tcpip_thread+0x50>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <tcpip_thread+0x54>)
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006aea:	f107 030c 	add.w	r3, r7, #12
 8006aee:	4619      	mov	r1, r3
 8006af0:	480b      	ldr	r0, [pc, #44]	; (8006b20 <tcpip_thread+0x58>)
 8006af2:	f7ff ffb3 	bl	8006a5c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006afc:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <tcpip_thread+0x5c>)
 8006afe:	2291      	movs	r2, #145	; 0x91
 8006b00:	4909      	ldr	r1, [pc, #36]	; (8006b28 <tcpip_thread+0x60>)
 8006b02:	480a      	ldr	r0, [pc, #40]	; (8006b2c <tcpip_thread+0x64>)
 8006b04:	f00c fa60 	bl	8012fc8 <iprintf>
      continue;
 8006b08:	e003      	b.n	8006b12 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 f80f 	bl	8006b30 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006b12:	e7ea      	b.n	8006aea <tcpip_thread+0x22>
 8006b14:	2000d130 	.word	0x2000d130
 8006b18:	2000d124 	.word	0x2000d124
 8006b1c:	2000d128 	.word	0x2000d128
 8006b20:	2000d12c 	.word	0x2000d12c
 8006b24:	08013f78 	.word	0x08013f78
 8006b28:	08013fa8 	.word	0x08013fa8
 8006b2c:	08013fc8 	.word	0x08013fc8

08006b30 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d026      	beq.n	8006b8e <tcpip_thread_handle_msg+0x5e>
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	dc2b      	bgt.n	8006b9c <tcpip_thread_handle_msg+0x6c>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <tcpip_thread_handle_msg+0x1e>
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d015      	beq.n	8006b78 <tcpip_thread_handle_msg+0x48>
 8006b4c:	e026      	b.n	8006b9c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6850      	ldr	r0, [r2, #4]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6892      	ldr	r2, [r2, #8]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4798      	blx	r3
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d004      	beq.n	8006b6e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fcaf 	bl	80084cc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	2009      	movs	r0, #9
 8006b72:	f000 fe63 	bl	800783c <memp_free>
      break;
 8006b76:	e018      	b.n	8006baa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6892      	ldr	r2, [r2, #8]
 8006b80:	4610      	mov	r0, r2
 8006b82:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	2008      	movs	r0, #8
 8006b88:	f000 fe58 	bl	800783c <memp_free>
      break;
 8006b8c:	e00d      	b.n	8006baa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6892      	ldr	r2, [r2, #8]
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
      break;
 8006b9a:	e006      	b.n	8006baa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <tcpip_thread_handle_msg+0x84>)
 8006b9e:	22cf      	movs	r2, #207	; 0xcf
 8006ba0:	4905      	ldr	r1, [pc, #20]	; (8006bb8 <tcpip_thread_handle_msg+0x88>)
 8006ba2:	4806      	ldr	r0, [pc, #24]	; (8006bbc <tcpip_thread_handle_msg+0x8c>)
 8006ba4:	f00c fa10 	bl	8012fc8 <iprintf>
      break;
 8006ba8:	bf00      	nop
  }
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08013f78 	.word	0x08013f78
 8006bb8:	08013fa8 	.word	0x08013fa8
 8006bbc:	08013fc8 	.word	0x08013fc8

08006bc0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006bcc:	481a      	ldr	r0, [pc, #104]	; (8006c38 <tcpip_inpkt+0x78>)
 8006bce:	f00c f872 	bl	8012cb6 <sys_mbox_valid>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d105      	bne.n	8006be4 <tcpip_inpkt+0x24>
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <tcpip_inpkt+0x7c>)
 8006bda:	22fc      	movs	r2, #252	; 0xfc
 8006bdc:	4918      	ldr	r1, [pc, #96]	; (8006c40 <tcpip_inpkt+0x80>)
 8006bde:	4819      	ldr	r0, [pc, #100]	; (8006c44 <tcpip_inpkt+0x84>)
 8006be0:	f00c f9f2 	bl	8012fc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006be4:	2009      	movs	r0, #9
 8006be6:	f000 fdb3 	bl	8007750 <memp_malloc>
 8006bea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	e01a      	b.n	8006c2e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	4809      	ldr	r0, [pc, #36]	; (8006c38 <tcpip_inpkt+0x78>)
 8006c14:	f00b fff6 	bl	8012c04 <sys_mbox_trypost>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d006      	beq.n	8006c2c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006c1e:	6979      	ldr	r1, [r7, #20]
 8006c20:	2009      	movs	r0, #9
 8006c22:	f000 fe0b 	bl	800783c <memp_free>
    return ERR_MEM;
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2a:	e000      	b.n	8006c2e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8006c2c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2000d12c 	.word	0x2000d12c
 8006c3c:	08013f78 	.word	0x08013f78
 8006c40:	08013ff0 	.word	0x08013ff0
 8006c44:	08013fc8 	.word	0x08013fc8

08006c48 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c58:	f003 0318 	and.w	r3, r3, #24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006c60:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <tcpip_input+0x3c>)
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ffab 	bl	8006bc0 <tcpip_inpkt>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	e005      	b.n	8006c7a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006c6e:	4a06      	ldr	r2, [pc, #24]	; (8006c88 <tcpip_input+0x40>)
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff ffa4 	bl	8006bc0 <tcpip_inpkt>
 8006c78:	4603      	mov	r3, r0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	08012a15 	.word	0x08012a15
 8006c88:	080118e1 	.word	0x080118e1

08006c8c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006c96:	4819      	ldr	r0, [pc, #100]	; (8006cfc <tcpip_try_callback+0x70>)
 8006c98:	f00c f80d 	bl	8012cb6 <sys_mbox_valid>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <tcpip_try_callback+0x24>
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <tcpip_try_callback+0x74>)
 8006ca4:	f240 125d 	movw	r2, #349	; 0x15d
 8006ca8:	4916      	ldr	r1, [pc, #88]	; (8006d04 <tcpip_try_callback+0x78>)
 8006caa:	4817      	ldr	r0, [pc, #92]	; (8006d08 <tcpip_try_callback+0x7c>)
 8006cac:	f00c f98c 	bl	8012fc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006cb0:	2008      	movs	r0, #8
 8006cb2:	f000 fd4d 	bl	8007750 <memp_malloc>
 8006cb6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8006cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc2:	e017      	b.n	8006cf4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	4808      	ldr	r0, [pc, #32]	; (8006cfc <tcpip_try_callback+0x70>)
 8006cda:	f00b ff93 	bl	8012c04 <sys_mbox_trypost>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006ce4:	68f9      	ldr	r1, [r7, #12]
 8006ce6:	2008      	movs	r0, #8
 8006ce8:	f000 fda8 	bl	800783c <memp_free>
    return ERR_MEM;
 8006cec:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf0:	e000      	b.n	8006cf4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	2000d12c 	.word	0x2000d12c
 8006d00:	08013f78 	.word	0x08013f78
 8006d04:	08013ff0 	.word	0x08013ff0
 8006d08:	08013fc8 	.word	0x08013fc8

08006d0c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006d16:	f000 f871 	bl	8006dfc <lwip_init>

  tcpip_init_done = initfunc;
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <tcpip_init+0x6c>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8006d20:	4a16      	ldr	r2, [pc, #88]	; (8006d7c <tcpip_init+0x70>)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006d26:	2106      	movs	r1, #6
 8006d28:	4815      	ldr	r0, [pc, #84]	; (8006d80 <tcpip_init+0x74>)
 8006d2a:	f00b ff49 	bl	8012bc0 <sys_mbox_new>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d006      	beq.n	8006d42 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <tcpip_init+0x78>)
 8006d36:	f240 2261 	movw	r2, #609	; 0x261
 8006d3a:	4913      	ldr	r1, [pc, #76]	; (8006d88 <tcpip_init+0x7c>)
 8006d3c:	4813      	ldr	r0, [pc, #76]	; (8006d8c <tcpip_init+0x80>)
 8006d3e:	f00c f943 	bl	8012fc8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006d42:	4813      	ldr	r0, [pc, #76]	; (8006d90 <tcpip_init+0x84>)
 8006d44:	f00b ffd6 	bl	8012cf4 <sys_mutex_new>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d006      	beq.n	8006d5c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <tcpip_init+0x78>)
 8006d50:	f240 2265 	movw	r2, #613	; 0x265
 8006d54:	490f      	ldr	r1, [pc, #60]	; (8006d94 <tcpip_init+0x88>)
 8006d56:	480d      	ldr	r0, [pc, #52]	; (8006d8c <tcpip_init+0x80>)
 8006d58:	f00c f936 	bl	8012fc8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d64:	2200      	movs	r2, #0
 8006d66:	490c      	ldr	r1, [pc, #48]	; (8006d98 <tcpip_init+0x8c>)
 8006d68:	480c      	ldr	r0, [pc, #48]	; (8006d9c <tcpip_init+0x90>)
 8006d6a:	f00b fffb 	bl	8012d64 <sys_thread_new>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000d124 	.word	0x2000d124
 8006d7c:	2000d128 	.word	0x2000d128
 8006d80:	2000d12c 	.word	0x2000d12c
 8006d84:	08013f78 	.word	0x08013f78
 8006d88:	08014000 	.word	0x08014000
 8006d8c:	08013fc8 	.word	0x08013fc8
 8006d90:	2000d130 	.word	0x2000d130
 8006d94:	08014024 	.word	0x08014024
 8006d98:	08006ac9 	.word	0x08006ac9
 8006d9c:	08014048 	.word	0x08014048

08006da0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	b21a      	sxth	r2, r3
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	b21b      	sxth	r3, r3
 8006db8:	4313      	orrs	r3, r2
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	b29b      	uxth	r3, r3
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	061a      	lsls	r2, r3, #24
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	4313      	orrs	r3, r2
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006e06:	f00b ff67 	bl	8012cd8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006e0a:	f000 f8d5 	bl	8006fb8 <mem_init>
  memp_init();
 8006e0e:	f000 fc31 	bl	8007674 <memp_init>
  pbuf_init();
  netif_init();
 8006e12:	f000 fd3d 	bl	8007890 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006e16:	f007 f8d9 	bl	800dfcc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006e1a:	f001 fe01 	bl	8008a20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006e1e:	f007 f81b 	bl	800de58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <ptr_to_mem+0x20>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	4413      	add	r3, r2
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	2000d7a0 	.word	0x2000d7a0

08006e50 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <mem_to_ptr+0x20>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	b29b      	uxth	r3, r3
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	2000d7a0 	.word	0x2000d7a0

08006e74 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006e74:	b590      	push	{r4, r7, lr}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006e7c:	4b45      	ldr	r3, [pc, #276]	; (8006f94 <plug_holes+0x120>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d206      	bcs.n	8006e94 <plug_holes+0x20>
 8006e86:	4b44      	ldr	r3, [pc, #272]	; (8006f98 <plug_holes+0x124>)
 8006e88:	f240 12df 	movw	r2, #479	; 0x1df
 8006e8c:	4943      	ldr	r1, [pc, #268]	; (8006f9c <plug_holes+0x128>)
 8006e8e:	4844      	ldr	r0, [pc, #272]	; (8006fa0 <plug_holes+0x12c>)
 8006e90:	f00c f89a 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006e94:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <plug_holes+0x130>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d306      	bcc.n	8006eac <plug_holes+0x38>
 8006e9e:	4b3e      	ldr	r3, [pc, #248]	; (8006f98 <plug_holes+0x124>)
 8006ea0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006ea4:	4940      	ldr	r1, [pc, #256]	; (8006fa8 <plug_holes+0x134>)
 8006ea6:	483e      	ldr	r0, [pc, #248]	; (8006fa0 <plug_holes+0x12c>)
 8006ea8:	f00c f88e 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	791b      	ldrb	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d006      	beq.n	8006ec2 <plug_holes+0x4e>
 8006eb4:	4b38      	ldr	r3, [pc, #224]	; (8006f98 <plug_holes+0x124>)
 8006eb6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006eba:	493c      	ldr	r1, [pc, #240]	; (8006fac <plug_holes+0x138>)
 8006ebc:	4838      	ldr	r0, [pc, #224]	; (8006fa0 <plug_holes+0x12c>)
 8006ebe:	f00c f883 	bl	8012fc8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006eca:	d906      	bls.n	8006eda <plug_holes+0x66>
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <plug_holes+0x124>)
 8006ece:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006ed2:	4937      	ldr	r1, [pc, #220]	; (8006fb0 <plug_holes+0x13c>)
 8006ed4:	4832      	ldr	r0, [pc, #200]	; (8006fa0 <plug_holes+0x12c>)
 8006ed6:	f00c f877 	bl	8012fc8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ffa4 	bl	8006e2c <ptr_to_mem>
 8006ee4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d024      	beq.n	8006f38 <plug_holes+0xc4>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	791b      	ldrb	r3, [r3, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d120      	bne.n	8006f38 <plug_holes+0xc4>
 8006ef6:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <plug_holes+0x130>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d01b      	beq.n	8006f38 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006f00:	4b2c      	ldr	r3, [pc, #176]	; (8006fb4 <plug_holes+0x140>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d102      	bne.n	8006f10 <plug_holes+0x9c>
      lfree = mem;
 8006f0a:	4a2a      	ldr	r2, [pc, #168]	; (8006fb4 <plug_holes+0x140>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	881a      	ldrh	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006f20:	d00a      	beq.n	8006f38 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff ff80 	bl	8006e2c <ptr_to_mem>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff ff8e 	bl	8006e50 <mem_to_ptr>
 8006f34:	4603      	mov	r3, r0
 8006f36:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff ff75 	bl	8006e2c <ptr_to_mem>
 8006f42:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d01f      	beq.n	8006f8c <plug_holes+0x118>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	791b      	ldrb	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d11b      	bne.n	8006f8c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006f54:	4b17      	ldr	r3, [pc, #92]	; (8006fb4 <plug_holes+0x140>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d102      	bne.n	8006f64 <plug_holes+0xf0>
      lfree = pmem;
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <plug_holes+0x140>)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	881a      	ldrh	r2, [r3, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006f74:	d00a      	beq.n	8006f8c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff ff56 	bl	8006e2c <ptr_to_mem>
 8006f80:	4604      	mov	r4, r0
 8006f82:	68b8      	ldr	r0, [r7, #8]
 8006f84:	f7ff ff64 	bl	8006e50 <mem_to_ptr>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd90      	pop	{r4, r7, pc}
 8006f94:	2000d7a0 	.word	0x2000d7a0
 8006f98:	08014058 	.word	0x08014058
 8006f9c:	08014088 	.word	0x08014088
 8006fa0:	080140a0 	.word	0x080140a0
 8006fa4:	2000d7a4 	.word	0x2000d7a4
 8006fa8:	080140c8 	.word	0x080140c8
 8006fac:	080140e4 	.word	0x080140e4
 8006fb0:	08014100 	.word	0x08014100
 8006fb4:	2000d7ac 	.word	0x2000d7ac

08006fb8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	; (800703c <mem_init+0x84>)
 8006fc0:	3303      	adds	r3, #3
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <mem_init+0x88>)
 8006fca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <mem_init+0x88>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006fd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006fe6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8006fea:	f7ff ff1f 	bl	8006e2c <ptr_to_mem>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4a14      	ldr	r2, [pc, #80]	; (8007044 <mem_init+0x8c>)
 8006ff2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006ff4:	4b13      	ldr	r3, [pc, #76]	; (8007044 <mem_init+0x8c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006ffc:	4b11      	ldr	r3, [pc, #68]	; (8007044 <mem_init+0x8c>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007004:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <mem_init+0x8c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800700e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <mem_init+0x88>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a0c      	ldr	r2, [pc, #48]	; (8007048 <mem_init+0x90>)
 8007016:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007018:	480c      	ldr	r0, [pc, #48]	; (800704c <mem_init+0x94>)
 800701a:	f00b fe6b 	bl	8012cf4 <sys_mutex_new>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d006      	beq.n	8007032 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007024:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <mem_init+0x98>)
 8007026:	f240 221f 	movw	r2, #543	; 0x21f
 800702a:	490a      	ldr	r1, [pc, #40]	; (8007054 <mem_init+0x9c>)
 800702c:	480a      	ldr	r0, [pc, #40]	; (8007058 <mem_init+0xa0>)
 800702e:	f00b ffcb 	bl	8012fc8 <iprintf>
  }
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	2000d14c 	.word	0x2000d14c
 8007040:	2000d7a0 	.word	0x2000d7a0
 8007044:	2000d7a4 	.word	0x2000d7a4
 8007048:	2000d7ac 	.word	0x2000d7ac
 800704c:	2000d7a8 	.word	0x2000d7a8
 8007050:	08014058 	.word	0x08014058
 8007054:	0801412c 	.word	0x0801412c
 8007058:	080140a0 	.word	0x080140a0

0800705c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fef3 	bl	8006e50 <mem_to_ptr>
 800706a:	4603      	mov	r3, r0
 800706c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff feda 	bl	8006e2c <ptr_to_mem>
 8007078:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fed4 	bl	8006e2c <ptr_to_mem>
 8007084:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800708e:	d818      	bhi.n	80070c2 <mem_link_valid+0x66>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	885b      	ldrh	r3, [r3, #2]
 8007094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007098:	d813      	bhi.n	80070c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800709e:	8afa      	ldrh	r2, [r7, #22]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d004      	beq.n	80070ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	8afa      	ldrh	r2, [r7, #22]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d109      	bne.n	80070c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <mem_link_valid+0x74>)
 80070b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d006      	beq.n	80070c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	885b      	ldrh	r3, [r3, #2]
 80070bc:	8afa      	ldrh	r2, [r7, #22]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d001      	beq.n	80070c6 <mem_link_valid+0x6a>
    return 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	e000      	b.n	80070c8 <mem_link_valid+0x6c>
  }
  return 1;
 80070c6:	2301      	movs	r3, #1
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	2000d7a4 	.word	0x2000d7a4

080070d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d070      	beq.n	80071c4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80070ec:	4b37      	ldr	r3, [pc, #220]	; (80071cc <mem_free+0xf8>)
 80070ee:	f240 2273 	movw	r2, #627	; 0x273
 80070f2:	4937      	ldr	r1, [pc, #220]	; (80071d0 <mem_free+0xfc>)
 80070f4:	4837      	ldr	r0, [pc, #220]	; (80071d4 <mem_free+0x100>)
 80070f6:	f00b ff67 	bl	8012fc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80070fa:	f00b fe59 	bl	8012db0 <sys_arch_protect>
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f00b fe63 	bl	8012dcc <sys_arch_unprotect>
    return;
 8007106:	e05e      	b.n	80071c6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3b08      	subs	r3, #8
 800710c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800710e:	4b32      	ldr	r3, [pc, #200]	; (80071d8 <mem_free+0x104>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	429a      	cmp	r2, r3
 8007116:	d306      	bcc.n	8007126 <mem_free+0x52>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f103 020c 	add.w	r2, r3, #12
 800711e:	4b2f      	ldr	r3, [pc, #188]	; (80071dc <mem_free+0x108>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d90d      	bls.n	8007142 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007126:	4b29      	ldr	r3, [pc, #164]	; (80071cc <mem_free+0xf8>)
 8007128:	f240 227f 	movw	r2, #639	; 0x27f
 800712c:	492c      	ldr	r1, [pc, #176]	; (80071e0 <mem_free+0x10c>)
 800712e:	4829      	ldr	r0, [pc, #164]	; (80071d4 <mem_free+0x100>)
 8007130:	f00b ff4a 	bl	8012fc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007134:	f00b fe3c 	bl	8012db0 <sys_arch_protect>
 8007138:	6138      	str	r0, [r7, #16]
 800713a:	6938      	ldr	r0, [r7, #16]
 800713c:	f00b fe46 	bl	8012dcc <sys_arch_unprotect>
    return;
 8007140:	e041      	b.n	80071c6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007142:	4828      	ldr	r0, [pc, #160]	; (80071e4 <mem_free+0x110>)
 8007144:	f00b fdf2 	bl	8012d2c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d110      	bne.n	8007172 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007150:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <mem_free+0xf8>)
 8007152:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007156:	4924      	ldr	r1, [pc, #144]	; (80071e8 <mem_free+0x114>)
 8007158:	481e      	ldr	r0, [pc, #120]	; (80071d4 <mem_free+0x100>)
 800715a:	f00b ff35 	bl	8012fc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800715e:	4821      	ldr	r0, [pc, #132]	; (80071e4 <mem_free+0x110>)
 8007160:	f00b fdf3 	bl	8012d4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007164:	f00b fe24 	bl	8012db0 <sys_arch_protect>
 8007168:	6178      	str	r0, [r7, #20]
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f00b fe2e 	bl	8012dcc <sys_arch_unprotect>
    return;
 8007170:	e029      	b.n	80071c6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007172:	69f8      	ldr	r0, [r7, #28]
 8007174:	f7ff ff72 	bl	800705c <mem_link_valid>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d110      	bne.n	80071a0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <mem_free+0xf8>)
 8007180:	f240 2295 	movw	r2, #661	; 0x295
 8007184:	4919      	ldr	r1, [pc, #100]	; (80071ec <mem_free+0x118>)
 8007186:	4813      	ldr	r0, [pc, #76]	; (80071d4 <mem_free+0x100>)
 8007188:	f00b ff1e 	bl	8012fc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800718c:	4815      	ldr	r0, [pc, #84]	; (80071e4 <mem_free+0x110>)
 800718e:	f00b fddc 	bl	8012d4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007192:	f00b fe0d 	bl	8012db0 <sys_arch_protect>
 8007196:	61b8      	str	r0, [r7, #24]
 8007198:	69b8      	ldr	r0, [r7, #24]
 800719a:	f00b fe17 	bl	8012dcc <sys_arch_unprotect>
    return;
 800719e:	e012      	b.n	80071c6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2200      	movs	r2, #0
 80071a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <mem_free+0x11c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d202      	bcs.n	80071b6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80071b0:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <mem_free+0x11c>)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80071b6:	69f8      	ldr	r0, [r7, #28]
 80071b8:	f7ff fe5c 	bl	8006e74 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80071bc:	4809      	ldr	r0, [pc, #36]	; (80071e4 <mem_free+0x110>)
 80071be:	f00b fdc4 	bl	8012d4a <sys_mutex_unlock>
 80071c2:	e000      	b.n	80071c6 <mem_free+0xf2>
    return;
 80071c4:	bf00      	nop
}
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	08014058 	.word	0x08014058
 80071d0:	08014148 	.word	0x08014148
 80071d4:	080140a0 	.word	0x080140a0
 80071d8:	2000d7a0 	.word	0x2000d7a0
 80071dc:	2000d7a4 	.word	0x2000d7a4
 80071e0:	0801416c 	.word	0x0801416c
 80071e4:	2000d7a8 	.word	0x2000d7a8
 80071e8:	08014188 	.word	0x08014188
 80071ec:	080141b0 	.word	0x080141b0
 80071f0:	2000d7ac 	.word	0x2000d7ac

080071f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007200:	887b      	ldrh	r3, [r7, #2]
 8007202:	3303      	adds	r3, #3
 8007204:	b29b      	uxth	r3, r3
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800720c:	8bfb      	ldrh	r3, [r7, #30]
 800720e:	2b0b      	cmp	r3, #11
 8007210:	d801      	bhi.n	8007216 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007212:	230c      	movs	r3, #12
 8007214:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007216:	8bfb      	ldrh	r3, [r7, #30]
 8007218:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800721c:	d803      	bhi.n	8007226 <mem_trim+0x32>
 800721e:	8bfa      	ldrh	r2, [r7, #30]
 8007220:	887b      	ldrh	r3, [r7, #2]
 8007222:	429a      	cmp	r2, r3
 8007224:	d201      	bcs.n	800722a <mem_trim+0x36>
    return NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	e0d8      	b.n	80073dc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800722a:	4b6e      	ldr	r3, [pc, #440]	; (80073e4 <mem_trim+0x1f0>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d304      	bcc.n	800723e <mem_trim+0x4a>
 8007234:	4b6c      	ldr	r3, [pc, #432]	; (80073e8 <mem_trim+0x1f4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d306      	bcc.n	800724c <mem_trim+0x58>
 800723e:	4b6b      	ldr	r3, [pc, #428]	; (80073ec <mem_trim+0x1f8>)
 8007240:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007244:	496a      	ldr	r1, [pc, #424]	; (80073f0 <mem_trim+0x1fc>)
 8007246:	486b      	ldr	r0, [pc, #428]	; (80073f4 <mem_trim+0x200>)
 8007248:	f00b febe 	bl	8012fc8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800724c:	4b65      	ldr	r3, [pc, #404]	; (80073e4 <mem_trim+0x1f0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d304      	bcc.n	8007260 <mem_trim+0x6c>
 8007256:	4b64      	ldr	r3, [pc, #400]	; (80073e8 <mem_trim+0x1f4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d307      	bcc.n	8007270 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007260:	f00b fda6 	bl	8012db0 <sys_arch_protect>
 8007264:	60b8      	str	r0, [r7, #8]
 8007266:	68b8      	ldr	r0, [r7, #8]
 8007268:	f00b fdb0 	bl	8012dcc <sys_arch_unprotect>
    return rmem;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	e0b5      	b.n	80073dc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3b08      	subs	r3, #8
 8007274:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007276:	69b8      	ldr	r0, [r7, #24]
 8007278:	f7ff fdea 	bl	8006e50 <mem_to_ptr>
 800727c:	4603      	mov	r3, r0
 800727e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	8afb      	ldrh	r3, [r7, #22]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	b29b      	uxth	r3, r3
 800728a:	3b08      	subs	r3, #8
 800728c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800728e:	8bfa      	ldrh	r2, [r7, #30]
 8007290:	8abb      	ldrh	r3, [r7, #20]
 8007292:	429a      	cmp	r2, r3
 8007294:	d906      	bls.n	80072a4 <mem_trim+0xb0>
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <mem_trim+0x1f8>)
 8007298:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800729c:	4956      	ldr	r1, [pc, #344]	; (80073f8 <mem_trim+0x204>)
 800729e:	4855      	ldr	r0, [pc, #340]	; (80073f4 <mem_trim+0x200>)
 80072a0:	f00b fe92 	bl	8012fc8 <iprintf>
  if (newsize > size) {
 80072a4:	8bfa      	ldrh	r2, [r7, #30]
 80072a6:	8abb      	ldrh	r3, [r7, #20]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d901      	bls.n	80072b0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e095      	b.n	80073dc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80072b0:	8bfa      	ldrh	r2, [r7, #30]
 80072b2:	8abb      	ldrh	r3, [r7, #20]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d101      	bne.n	80072bc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	e08f      	b.n	80073dc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80072bc:	484f      	ldr	r0, [pc, #316]	; (80073fc <mem_trim+0x208>)
 80072be:	f00b fd35 	bl	8012d2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fdb0 	bl	8006e2c <ptr_to_mem>
 80072cc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	791b      	ldrb	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d13f      	bne.n	8007356 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80072de:	d106      	bne.n	80072ee <mem_trim+0xfa>
 80072e0:	4b42      	ldr	r3, [pc, #264]	; (80073ec <mem_trim+0x1f8>)
 80072e2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80072e6:	4946      	ldr	r1, [pc, #280]	; (8007400 <mem_trim+0x20c>)
 80072e8:	4842      	ldr	r0, [pc, #264]	; (80073f4 <mem_trim+0x200>)
 80072ea:	f00b fe6d 	bl	8012fc8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80072f4:	8afa      	ldrh	r2, [r7, #22]
 80072f6:	8bfb      	ldrh	r3, [r7, #30]
 80072f8:	4413      	add	r3, r2
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3308      	adds	r3, #8
 80072fe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007300:	4b40      	ldr	r3, [pc, #256]	; (8007404 <mem_trim+0x210>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	d106      	bne.n	8007318 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800730a:	89fb      	ldrh	r3, [r7, #14]
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff fd8d 	bl	8006e2c <ptr_to_mem>
 8007312:	4603      	mov	r3, r0
 8007314:	4a3b      	ldr	r2, [pc, #236]	; (8007404 <mem_trim+0x210>)
 8007316:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007318:	89fb      	ldrh	r3, [r7, #14]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fd86 	bl	8006e2c <ptr_to_mem>
 8007320:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2200      	movs	r2, #0
 8007326:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	89ba      	ldrh	r2, [r7, #12]
 800732c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	8afa      	ldrh	r2, [r7, #22]
 8007332:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	89fa      	ldrh	r2, [r7, #14]
 8007338:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007342:	d047      	beq.n	80073d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fd6f 	bl	8006e2c <ptr_to_mem>
 800734e:	4602      	mov	r2, r0
 8007350:	89fb      	ldrh	r3, [r7, #14]
 8007352:	8053      	strh	r3, [r2, #2]
 8007354:	e03e      	b.n	80073d4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007356:	8bfb      	ldrh	r3, [r7, #30]
 8007358:	f103 0214 	add.w	r2, r3, #20
 800735c:	8abb      	ldrh	r3, [r7, #20]
 800735e:	429a      	cmp	r2, r3
 8007360:	d838      	bhi.n	80073d4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007362:	8afa      	ldrh	r2, [r7, #22]
 8007364:	8bfb      	ldrh	r3, [r7, #30]
 8007366:	4413      	add	r3, r2
 8007368:	b29b      	uxth	r3, r3
 800736a:	3308      	adds	r3, #8
 800736c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007376:	d106      	bne.n	8007386 <mem_trim+0x192>
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <mem_trim+0x1f8>)
 800737a:	f240 3216 	movw	r2, #790	; 0x316
 800737e:	4920      	ldr	r1, [pc, #128]	; (8007400 <mem_trim+0x20c>)
 8007380:	481c      	ldr	r0, [pc, #112]	; (80073f4 <mem_trim+0x200>)
 8007382:	f00b fe21 	bl	8012fc8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007386:	89fb      	ldrh	r3, [r7, #14]
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fd4f 	bl	8006e2c <ptr_to_mem>
 800738e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <mem_trim+0x210>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	429a      	cmp	r2, r3
 8007398:	d202      	bcs.n	80073a0 <mem_trim+0x1ac>
      lfree = mem2;
 800739a:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <mem_trim+0x210>)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2200      	movs	r2, #0
 80073a4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	881a      	ldrh	r2, [r3, #0]
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	8afa      	ldrh	r2, [r7, #22]
 80073b2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	89fa      	ldrh	r2, [r7, #14]
 80073b8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80073c2:	d007      	beq.n	80073d4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff fd2f 	bl	8006e2c <ptr_to_mem>
 80073ce:	4602      	mov	r2, r0
 80073d0:	89fb      	ldrh	r3, [r7, #14]
 80073d2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80073d4:	4809      	ldr	r0, [pc, #36]	; (80073fc <mem_trim+0x208>)
 80073d6:	f00b fcb8 	bl	8012d4a <sys_mutex_unlock>
  return rmem;
 80073da:	687b      	ldr	r3, [r7, #4]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	2000d7a0 	.word	0x2000d7a0
 80073e8:	2000d7a4 	.word	0x2000d7a4
 80073ec:	08014058 	.word	0x08014058
 80073f0:	080141e4 	.word	0x080141e4
 80073f4:	080140a0 	.word	0x080140a0
 80073f8:	080141fc 	.word	0x080141fc
 80073fc:	2000d7a8 	.word	0x2000d7a8
 8007400:	0801421c 	.word	0x0801421c
 8007404:	2000d7ac 	.word	0x2000d7ac

08007408 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <mem_malloc+0x14>
    return NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	e0e2      	b.n	80075e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	3303      	adds	r3, #3
 8007420:	b29b      	uxth	r3, r3
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007428:	8bbb      	ldrh	r3, [r7, #28]
 800742a:	2b0b      	cmp	r3, #11
 800742c:	d801      	bhi.n	8007432 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800742e:	230c      	movs	r3, #12
 8007430:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007432:	8bbb      	ldrh	r3, [r7, #28]
 8007434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007438:	d803      	bhi.n	8007442 <mem_malloc+0x3a>
 800743a:	8bba      	ldrh	r2, [r7, #28]
 800743c:	88fb      	ldrh	r3, [r7, #6]
 800743e:	429a      	cmp	r2, r3
 8007440:	d201      	bcs.n	8007446 <mem_malloc+0x3e>
    return NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	e0cd      	b.n	80075e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007446:	4869      	ldr	r0, [pc, #420]	; (80075ec <mem_malloc+0x1e4>)
 8007448:	f00b fc70 	bl	8012d2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800744c:	4b68      	ldr	r3, [pc, #416]	; (80075f0 <mem_malloc+0x1e8>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fcfd 	bl	8006e50 <mem_to_ptr>
 8007456:	4603      	mov	r3, r0
 8007458:	83fb      	strh	r3, [r7, #30]
 800745a:	e0b7      	b.n	80075cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800745c:	8bfb      	ldrh	r3, [r7, #30]
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fce4 	bl	8006e2c <ptr_to_mem>
 8007464:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	791b      	ldrb	r3, [r3, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 80a7 	bne.w	80075be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	461a      	mov	r2, r3
 8007476:	8bfb      	ldrh	r3, [r7, #30]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	f1a3 0208 	sub.w	r2, r3, #8
 800747e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007480:	429a      	cmp	r2, r3
 8007482:	f0c0 809c 	bcc.w	80075be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	8bfb      	ldrh	r3, [r7, #30]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f1a3 0208 	sub.w	r2, r3, #8
 8007494:	8bbb      	ldrh	r3, [r7, #28]
 8007496:	3314      	adds	r3, #20
 8007498:	429a      	cmp	r2, r3
 800749a:	d333      	bcc.n	8007504 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800749c:	8bfa      	ldrh	r2, [r7, #30]
 800749e:	8bbb      	ldrh	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3308      	adds	r3, #8
 80074a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80074a8:	8a7b      	ldrh	r3, [r7, #18]
 80074aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074ae:	d106      	bne.n	80074be <mem_malloc+0xb6>
 80074b0:	4b50      	ldr	r3, [pc, #320]	; (80075f4 <mem_malloc+0x1ec>)
 80074b2:	f240 3287 	movw	r2, #903	; 0x387
 80074b6:	4950      	ldr	r1, [pc, #320]	; (80075f8 <mem_malloc+0x1f0>)
 80074b8:	4850      	ldr	r0, [pc, #320]	; (80075fc <mem_malloc+0x1f4>)
 80074ba:	f00b fd85 	bl	8012fc8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80074be:	8a7b      	ldrh	r3, [r7, #18]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fcb3 	bl	8006e2c <ptr_to_mem>
 80074c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	881a      	ldrh	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8bfa      	ldrh	r2, [r7, #30]
 80074da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	8a7a      	ldrh	r2, [r7, #18]
 80074e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2201      	movs	r2, #1
 80074e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	881b      	ldrh	r3, [r3, #0]
 80074ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80074f0:	d00b      	beq.n	800750a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fc98 	bl	8006e2c <ptr_to_mem>
 80074fc:	4602      	mov	r2, r0
 80074fe:	8a7b      	ldrh	r3, [r7, #18]
 8007500:	8053      	strh	r3, [r2, #2]
 8007502:	e002      	b.n	800750a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2201      	movs	r2, #1
 8007508:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800750a:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <mem_malloc+0x1e8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	429a      	cmp	r2, r3
 8007512:	d127      	bne.n	8007564 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007514:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <mem_malloc+0x1e8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800751a:	e005      	b.n	8007528 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fc83 	bl	8006e2c <ptr_to_mem>
 8007526:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	791b      	ldrb	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <mem_malloc+0x132>
 8007530:	4b33      	ldr	r3, [pc, #204]	; (8007600 <mem_malloc+0x1f8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	429a      	cmp	r2, r3
 8007538:	d1f0      	bne.n	800751c <mem_malloc+0x114>
          }
          lfree = cur;
 800753a:	4a2d      	ldr	r2, [pc, #180]	; (80075f0 <mem_malloc+0x1e8>)
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007540:	4b2b      	ldr	r3, [pc, #172]	; (80075f0 <mem_malloc+0x1e8>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4b2e      	ldr	r3, [pc, #184]	; (8007600 <mem_malloc+0x1f8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d00b      	beq.n	8007564 <mem_malloc+0x15c>
 800754c:	4b28      	ldr	r3, [pc, #160]	; (80075f0 <mem_malloc+0x1e8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	791b      	ldrb	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d006      	beq.n	8007564 <mem_malloc+0x15c>
 8007556:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <mem_malloc+0x1ec>)
 8007558:	f240 32b5 	movw	r2, #949	; 0x3b5
 800755c:	4929      	ldr	r1, [pc, #164]	; (8007604 <mem_malloc+0x1fc>)
 800755e:	4827      	ldr	r0, [pc, #156]	; (80075fc <mem_malloc+0x1f4>)
 8007560:	f00b fd32 	bl	8012fc8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007564:	4821      	ldr	r0, [pc, #132]	; (80075ec <mem_malloc+0x1e4>)
 8007566:	f00b fbf0 	bl	8012d4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800756a:	8bba      	ldrh	r2, [r7, #28]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	4413      	add	r3, r2
 8007570:	3308      	adds	r3, #8
 8007572:	4a23      	ldr	r2, [pc, #140]	; (8007600 <mem_malloc+0x1f8>)
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	4293      	cmp	r3, r2
 8007578:	d906      	bls.n	8007588 <mem_malloc+0x180>
 800757a:	4b1e      	ldr	r3, [pc, #120]	; (80075f4 <mem_malloc+0x1ec>)
 800757c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007580:	4921      	ldr	r1, [pc, #132]	; (8007608 <mem_malloc+0x200>)
 8007582:	481e      	ldr	r0, [pc, #120]	; (80075fc <mem_malloc+0x1f4>)
 8007584:	f00b fd20 	bl	8012fc8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <mem_malloc+0x198>
 8007592:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <mem_malloc+0x1ec>)
 8007594:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007598:	491c      	ldr	r1, [pc, #112]	; (800760c <mem_malloc+0x204>)
 800759a:	4818      	ldr	r0, [pc, #96]	; (80075fc <mem_malloc+0x1f4>)
 800759c:	f00b fd14 	bl	8012fc8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d006      	beq.n	80075b8 <mem_malloc+0x1b0>
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <mem_malloc+0x1ec>)
 80075ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 80075b0:	4917      	ldr	r1, [pc, #92]	; (8007610 <mem_malloc+0x208>)
 80075b2:	4812      	ldr	r0, [pc, #72]	; (80075fc <mem_malloc+0x1f4>)
 80075b4:	f00b fd08 	bl	8012fc8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3308      	adds	r3, #8
 80075bc:	e011      	b.n	80075e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80075be:	8bfb      	ldrh	r3, [r7, #30]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff fc33 	bl	8006e2c <ptr_to_mem>
 80075c6:	4603      	mov	r3, r0
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80075cc:	8bfa      	ldrh	r2, [r7, #30]
 80075ce:	8bbb      	ldrh	r3, [r7, #28]
 80075d0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80075d4:	429a      	cmp	r2, r3
 80075d6:	f4ff af41 	bcc.w	800745c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80075da:	4804      	ldr	r0, [pc, #16]	; (80075ec <mem_malloc+0x1e4>)
 80075dc:	f00b fbb5 	bl	8012d4a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	2000d7a8 	.word	0x2000d7a8
 80075f0:	2000d7ac 	.word	0x2000d7ac
 80075f4:	08014058 	.word	0x08014058
 80075f8:	0801421c 	.word	0x0801421c
 80075fc:	080140a0 	.word	0x080140a0
 8007600:	2000d7a4 	.word	0x2000d7a4
 8007604:	08014230 	.word	0x08014230
 8007608:	0801424c 	.word	0x0801424c
 800760c:	0801427c 	.word	0x0801427c
 8007610:	080142ac 	.word	0x080142ac

08007614 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	3303      	adds	r3, #3
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e011      	b.n	800765a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4413      	add	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	461a      	mov	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4293      	cmp	r3, r2
 8007664:	dbe7      	blt.n	8007636 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007666:	bf00      	nop
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800767a:	2300      	movs	r3, #0
 800767c:	80fb      	strh	r3, [r7, #6]
 800767e:	e009      	b.n	8007694 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007680:	88fb      	ldrh	r3, [r7, #6]
 8007682:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <memp_init+0x30>)
 8007684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff ffc3 	bl	8007614 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	3301      	adds	r3, #1
 8007692:	80fb      	strh	r3, [r7, #6]
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	2b0c      	cmp	r3, #12
 8007698:	d9f2      	bls.n	8007680 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	08016e60 	.word	0x08016e60

080076a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80076b0:	f00b fb7e 	bl	8012db0 <sys_arch_protect>
 80076b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d015      	beq.n	80076f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f003 0303 	and.w	r3, r3, #3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <do_memp_malloc_pool+0x3e>
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <do_memp_malloc_pool+0x58>)
 80076da:	f44f 728c 	mov.w	r2, #280	; 0x118
 80076de:	4909      	ldr	r1, [pc, #36]	; (8007704 <do_memp_malloc_pool+0x5c>)
 80076e0:	4809      	ldr	r0, [pc, #36]	; (8007708 <do_memp_malloc_pool+0x60>)
 80076e2:	f00b fc71 	bl	8012fc8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f00b fb70 	bl	8012dcc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	e003      	b.n	80076f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f00b fb6b 	bl	8012dcc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	080142d0 	.word	0x080142d0
 8007704:	08014300 	.word	0x08014300
 8007708:	08014324 	.word	0x08014324

0800770c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <memp_malloc_pool+0x1c>
 800771a:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <memp_malloc_pool+0x38>)
 800771c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007720:	4909      	ldr	r1, [pc, #36]	; (8007748 <memp_malloc_pool+0x3c>)
 8007722:	480a      	ldr	r0, [pc, #40]	; (800774c <memp_malloc_pool+0x40>)
 8007724:	f00b fc50 	bl	8012fc8 <iprintf>
  if (desc == NULL) {
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <memp_malloc_pool+0x26>
    return NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	e003      	b.n	800773a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ffb8 	bl	80076a8 <do_memp_malloc_pool>
 8007738:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	080142d0 	.word	0x080142d0
 8007748:	0801434c 	.word	0x0801434c
 800774c:	08014324 	.word	0x08014324

08007750 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	2b0c      	cmp	r3, #12
 800775e:	d908      	bls.n	8007772 <memp_malloc+0x22>
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <memp_malloc+0x3c>)
 8007762:	f240 1257 	movw	r2, #343	; 0x157
 8007766:	490a      	ldr	r1, [pc, #40]	; (8007790 <memp_malloc+0x40>)
 8007768:	480a      	ldr	r0, [pc, #40]	; (8007794 <memp_malloc+0x44>)
 800776a:	f00b fc2d 	bl	8012fc8 <iprintf>
 800776e:	2300      	movs	r3, #0
 8007770:	e008      	b.n	8007784 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	4a08      	ldr	r2, [pc, #32]	; (8007798 <memp_malloc+0x48>)
 8007776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff ff94 	bl	80076a8 <do_memp_malloc_pool>
 8007780:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	080142d0 	.word	0x080142d0
 8007790:	08014360 	.word	0x08014360
 8007794:	08014324 	.word	0x08014324
 8007798:	08016e60 	.word	0x08016e60

0800779c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d006      	beq.n	80077be <do_memp_free_pool+0x22>
 80077b0:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <do_memp_free_pool+0x4c>)
 80077b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80077b6:	490d      	ldr	r1, [pc, #52]	; (80077ec <do_memp_free_pool+0x50>)
 80077b8:	480d      	ldr	r0, [pc, #52]	; (80077f0 <do_memp_free_pool+0x54>)
 80077ba:	f00b fc05 	bl	8012fc8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80077c2:	f00b faf5 	bl	8012db0 <sys_arch_protect>
 80077c6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80077da:	68b8      	ldr	r0, [r7, #8]
 80077dc:	f00b faf6 	bl	8012dcc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80077e0:	bf00      	nop
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	080142d0 	.word	0x080142d0
 80077ec:	08014380 	.word	0x08014380
 80077f0:	08014324 	.word	0x08014324

080077f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d106      	bne.n	8007812 <memp_free_pool+0x1e>
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <memp_free_pool+0x3c>)
 8007806:	f240 1295 	movw	r2, #405	; 0x195
 800780a:	490a      	ldr	r1, [pc, #40]	; (8007834 <memp_free_pool+0x40>)
 800780c:	480a      	ldr	r0, [pc, #40]	; (8007838 <memp_free_pool+0x44>)
 800780e:	f00b fbdb 	bl	8012fc8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <memp_free_pool+0x34>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7ff ffbb 	bl	800779c <do_memp_free_pool>
 8007826:	e000      	b.n	800782a <memp_free_pool+0x36>
    return;
 8007828:	bf00      	nop
}
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	080142d0 	.word	0x080142d0
 8007834:	0801434c 	.word	0x0801434c
 8007838:	08014324 	.word	0x08014324

0800783c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	2b0c      	cmp	r3, #12
 800784c:	d907      	bls.n	800785e <memp_free+0x22>
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <memp_free+0x44>)
 8007850:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007854:	490b      	ldr	r1, [pc, #44]	; (8007884 <memp_free+0x48>)
 8007856:	480c      	ldr	r0, [pc, #48]	; (8007888 <memp_free+0x4c>)
 8007858:	f00b fbb6 	bl	8012fc8 <iprintf>
 800785c:	e00c      	b.n	8007878 <memp_free+0x3c>

  if (mem == NULL) {
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	4a09      	ldr	r2, [pc, #36]	; (800788c <memp_free+0x50>)
 8007868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff ff94 	bl	800779c <do_memp_free_pool>
 8007874:	e000      	b.n	8007878 <memp_free+0x3c>
    return;
 8007876:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	080142d0 	.word	0x080142d0
 8007884:	080143a0 	.word	0x080143a0
 8007888:	08014324 	.word	0x08014324
 800788c:	08016e60 	.word	0x08016e60

08007890 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <netif_add+0x26>
 80078b4:	4b5b      	ldr	r3, [pc, #364]	; (8007a24 <netif_add+0x184>)
 80078b6:	f240 1227 	movw	r2, #295	; 0x127
 80078ba:	495b      	ldr	r1, [pc, #364]	; (8007a28 <netif_add+0x188>)
 80078bc:	485b      	ldr	r0, [pc, #364]	; (8007a2c <netif_add+0x18c>)
 80078be:	f00b fb83 	bl	8012fc8 <iprintf>
 80078c2:	2300      	movs	r3, #0
 80078c4:	e0a9      	b.n	8007a1a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d108      	bne.n	80078de <netif_add+0x3e>
 80078cc:	4b55      	ldr	r3, [pc, #340]	; (8007a24 <netif_add+0x184>)
 80078ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80078d2:	4957      	ldr	r1, [pc, #348]	; (8007a30 <netif_add+0x190>)
 80078d4:	4855      	ldr	r0, [pc, #340]	; (8007a2c <netif_add+0x18c>)
 80078d6:	f00b fb77 	bl	8012fc8 <iprintf>
 80078da:	2300      	movs	r3, #0
 80078dc:	e09d      	b.n	8007a1a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80078e4:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <netif_add+0x194>)
 80078e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80078ee:	4b51      	ldr	r3, [pc, #324]	; (8007a34 <netif_add+0x194>)
 80078f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80078f8:	4b4e      	ldr	r3, [pc, #312]	; (8007a34 <netif_add+0x194>)
 80078fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4a49      	ldr	r2, [pc, #292]	; (8007a38 <netif_add+0x198>)
 8007912:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	2204      	movs	r2, #4
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f00b fbb1 	bl	8013092 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800793c:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <netif_add+0x19c>)
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800794a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f914 	bl	8007b80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	4798      	blx	r3
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <netif_add+0xc8>
    return NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	e058      	b.n	8007a1a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800796e:	2bff      	cmp	r3, #255	; 0xff
 8007970:	d103      	bne.n	800797a <netif_add+0xda>
        netif->num = 0;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800797e:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <netif_add+0x1a0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	617b      	str	r3, [r7, #20]
 8007984:	e02b      	b.n	80079de <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d106      	bne.n	800799c <netif_add+0xfc>
 800798e:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <netif_add+0x184>)
 8007990:	f240 128b 	movw	r2, #395	; 0x18b
 8007994:	492b      	ldr	r1, [pc, #172]	; (8007a44 <netif_add+0x1a4>)
 8007996:	4825      	ldr	r0, [pc, #148]	; (8007a2c <netif_add+0x18c>)
 8007998:	f00b fb16 	bl	8012fc8 <iprintf>
        num_netifs++;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	3301      	adds	r3, #1
 80079a0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2bff      	cmp	r3, #255	; 0xff
 80079a6:	dd06      	ble.n	80079b6 <netif_add+0x116>
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <netif_add+0x184>)
 80079aa:	f240 128d 	movw	r2, #397	; 0x18d
 80079ae:	4926      	ldr	r1, [pc, #152]	; (8007a48 <netif_add+0x1a8>)
 80079b0:	481e      	ldr	r0, [pc, #120]	; (8007a2c <netif_add+0x18c>)
 80079b2:	f00b fb09 	bl	8012fc8 <iprintf>
        if (netif2->num == netif->num) {
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d108      	bne.n	80079d8 <netif_add+0x138>
          netif->num++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079cc:	3301      	adds	r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80079d6:	e005      	b.n	80079e4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	617b      	str	r3, [r7, #20]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1d0      	bne.n	8007986 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1be      	bne.n	8007968 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079f0:	2bfe      	cmp	r3, #254	; 0xfe
 80079f2:	d103      	bne.n	80079fc <netif_add+0x15c>
    netif_num = 0;
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <netif_add+0x19c>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e006      	b.n	8007a0a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <netif_add+0x19c>)
 8007a08:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	; (8007a40 <netif_add+0x1a0>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <netif_add+0x1a0>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007a18:	68fb      	ldr	r3, [r7, #12]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	080143bc 	.word	0x080143bc
 8007a28:	08014450 	.word	0x08014450
 8007a2c:	0801440c 	.word	0x0801440c
 8007a30:	0801446c 	.word	0x0801446c
 8007a34:	08016ee4 	.word	0x08016ee4
 8007a38:	08007d93 	.word	0x08007d93
 8007a3c:	200108a4 	.word	0x200108a4
 8007a40:	2001089c 	.word	0x2001089c
 8007a44:	08014490 	.word	0x08014490
 8007a48:	080144a4 	.word	0x080144a4

08007a4c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f002 fb29 	bl	800a0b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f006 ff3f 	bl	800e8e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <netif_do_set_ipaddr+0x20>
 8007a82:	4b1d      	ldr	r3, [pc, #116]	; (8007af8 <netif_do_set_ipaddr+0x88>)
 8007a84:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007a88:	491c      	ldr	r1, [pc, #112]	; (8007afc <netif_do_set_ipaddr+0x8c>)
 8007a8a:	481d      	ldr	r0, [pc, #116]	; (8007b00 <netif_do_set_ipaddr+0x90>)
 8007a8c:	f00b fa9c 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d106      	bne.n	8007aa4 <netif_do_set_ipaddr+0x34>
 8007a96:	4b18      	ldr	r3, [pc, #96]	; (8007af8 <netif_do_set_ipaddr+0x88>)
 8007a98:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007a9c:	4917      	ldr	r1, [pc, #92]	; (8007afc <netif_do_set_ipaddr+0x8c>)
 8007a9e:	4818      	ldr	r0, [pc, #96]	; (8007b00 <netif_do_set_ipaddr+0x90>)
 8007aa0:	f00b fa92 	bl	8012fc8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d01c      	beq.n	8007aec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3304      	adds	r3, #4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007ac2:	f107 0314 	add.w	r3, r7, #20
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff ffbf 	bl	8007a4c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <netif_do_set_ipaddr+0x6a>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	e000      	b.n	8007adc <netif_do_set_ipaddr+0x6c>
 8007ada:	2300      	movs	r3, #0
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f8d2 	bl	8007c8c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e000      	b.n	8007aee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	080143bc 	.word	0x080143bc
 8007afc:	080144d4 	.word	0x080144d4
 8007b00:	0801440c 	.word	0x0801440c

08007b04 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3308      	adds	r3, #8
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d00a      	beq.n	8007b34 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <netif_do_set_netmask+0x26>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	e000      	b.n	8007b2c <netif_do_set_netmask+0x28>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	330c      	adds	r3, #12
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d00a      	beq.n	8007b72 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <netif_do_set_gw+0x26>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	e000      	b.n	8007b6a <netif_do_set_gw+0x28>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007b9c:	4b1c      	ldr	r3, [pc, #112]	; (8007c10 <netif_set_addr+0x90>)
 8007b9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ba6:	4b1a      	ldr	r3, [pc, #104]	; (8007c10 <netif_set_addr+0x90>)
 8007ba8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <netif_set_addr+0x90>)
 8007bb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <netif_set_addr+0x42>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <netif_set_addr+0x46>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e000      	b.n	8007bc8 <netif_set_addr+0x48>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d006      	beq.n	8007bde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007bd0:	f107 0310 	add.w	r3, r7, #16
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff ff49 	bl	8007a70 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff ff8e 	bl	8007b04 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff ffa8 	bl	8007b42 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007bf8:	f107 0310 	add.w	r3, r7, #16
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f7ff ff35 	bl	8007a70 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007c06:	bf00      	nop
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	08016ee4 	.word	0x08016ee4

08007c14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007c1c:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <netif_set_default+0x1c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	200108a0 	.word	0x200108a0

08007c34 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <netif_set_up+0x1e>
 8007c42:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <netif_set_up+0x4c>)
 8007c44:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007c48:	490e      	ldr	r1, [pc, #56]	; (8007c84 <netif_set_up+0x50>)
 8007c4a:	480f      	ldr	r0, [pc, #60]	; (8007c88 <netif_set_up+0x54>)
 8007c4c:	f00b f9bc 	bl	8012fc8 <iprintf>
 8007c50:	e013      	b.n	8007c7a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10c      	bne.n	8007c7a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007c72:	2103      	movs	r1, #3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f809 	bl	8007c8c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	080143bc 	.word	0x080143bc
 8007c84:	08014544 	.word	0x08014544
 8007c88:	0801440c 	.word	0x0801440c

08007c8c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <netif_issue_reports+0x20>
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <netif_issue_reports+0x74>)
 8007ca0:	f240 326d 	movw	r2, #877	; 0x36d
 8007ca4:	4917      	ldr	r1, [pc, #92]	; (8007d04 <netif_issue_reports+0x78>)
 8007ca6:	4818      	ldr	r0, [pc, #96]	; (8007d08 <netif_issue_reports+0x7c>)
 8007ca8:	f00b f98e 	bl	8012fc8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d01e      	beq.n	8007cf8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cc0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d017      	beq.n	8007cf8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d013      	beq.n	8007cfa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00e      	beq.n	8007cfa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f009 fbbb 	bl	801146c <etharp_request>
 8007cf6:	e000      	b.n	8007cfa <netif_issue_reports+0x6e>
    return;
 8007cf8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	080143bc 	.word	0x080143bc
 8007d04:	08014560 	.word	0x08014560
 8007d08:	0801440c 	.word	0x0801440c

08007d0c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <netif_set_down+0x1e>
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <netif_set_down+0x58>)
 8007d1c:	f240 329b 	movw	r2, #923	; 0x39b
 8007d20:	4911      	ldr	r1, [pc, #68]	; (8007d68 <netif_set_down+0x5c>)
 8007d22:	4812      	ldr	r0, [pc, #72]	; (8007d6c <netif_set_down+0x60>)
 8007d24:	f00b f950 	bl	8012fc8 <iprintf>
 8007d28:	e019      	b.n	8007d5e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f008 ff41 	bl	8010be0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	080143bc 	.word	0x080143bc
 8007d68:	08014584 	.word	0x08014584
 8007d6c:	0801440c 	.word	0x0801440c

08007d70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	61da      	str	r2, [r3, #28]
  }
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007d9e:	f06f 030b 	mvn.w	r3, #11
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
	...

08007db0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d013      	beq.n	8007de8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007dc0:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <netif_get_by_index+0x48>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e00c      	b.n	8007de2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dce:	3301      	adds	r3, #1
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	79fa      	ldrb	r2, [r7, #7]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d101      	bne.n	8007ddc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	e006      	b.n	8007dea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1ef      	bne.n	8007dc8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	2001089c 	.word	0x2001089c

08007dfc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007e02:	f00a ffd5 	bl	8012db0 <sys_arch_protect>
 8007e06:	6038      	str	r0, [r7, #0]
 8007e08:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <pbuf_free_ooseq+0x44>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	6838      	ldr	r0, [r7, #0]
 8007e10:	f00a ffdc 	bl	8012dcc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <pbuf_free_ooseq+0x48>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	e00a      	b.n	8007e32 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f002 f981 	bl	800a12c <tcp_free_ooseq>
      return;
 8007e2a:	e005      	b.n	8007e38 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1f1      	bne.n	8007e1c <pbuf_free_ooseq+0x20>
    }
  }
}
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200108a5 	.word	0x200108a5
 8007e44:	200108b4 	.word	0x200108b4

08007e48 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8007e50:	f7ff ffd4 	bl	8007dfc <pbuf_free_ooseq>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8007e62:	f00a ffa5 	bl	8012db0 <sys_arch_protect>
 8007e66:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8007e68:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <pbuf_pool_is_empty+0x4c>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <pbuf_pool_is_empty+0x4c>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f00a ffa9 	bl	8012dcc <sys_arch_unprotect>

  if (!queued) {
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10f      	bne.n	8007ea0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007e80:	2100      	movs	r1, #0
 8007e82:	480a      	ldr	r0, [pc, #40]	; (8007eac <pbuf_pool_is_empty+0x50>)
 8007e84:	f7fe ff02 	bl	8006c8c <tcpip_try_callback>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <pbuf_pool_is_empty+0x44>
 8007e8e:	f00a ff8f 	bl	8012db0 <sys_arch_protect>
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <pbuf_pool_is_empty+0x4c>)
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f00a ff96 	bl	8012dcc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	200108a5 	.word	0x200108a5
 8007eac:	08007e49 	.word	0x08007e49

08007eb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	80fb      	strh	r3, [r7, #6]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	88fa      	ldrh	r2, [r7, #6]
 8007ed6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88ba      	ldrh	r2, [r7, #4]
 8007edc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007ede:	8b3b      	ldrh	r3, [r7, #24]
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	7f3a      	ldrb	r2, [r7, #28]
 8007eea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	73da      	strb	r2, [r3, #15]
}
 8007ef8:	bf00      	nop
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08c      	sub	sp, #48	; 0x30
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	80bb      	strh	r3, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007f20:	d07f      	beq.n	8008022 <pbuf_alloc+0x11e>
 8007f22:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007f26:	f300 80c8 	bgt.w	80080ba <pbuf_alloc+0x1b6>
 8007f2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007f2e:	d010      	beq.n	8007f52 <pbuf_alloc+0x4e>
 8007f30:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007f34:	f300 80c1 	bgt.w	80080ba <pbuf_alloc+0x1b6>
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d002      	beq.n	8007f42 <pbuf_alloc+0x3e>
 8007f3c:	2b41      	cmp	r3, #65	; 0x41
 8007f3e:	f040 80bc 	bne.w	80080ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007f42:	887a      	ldrh	r2, [r7, #2]
 8007f44:	88bb      	ldrh	r3, [r7, #4]
 8007f46:	4619      	mov	r1, r3
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f000 f8d1 	bl	80080f0 <pbuf_alloc_reference>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007f50:	e0bd      	b.n	80080ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007f5a:	88bb      	ldrh	r3, [r7, #4]
 8007f5c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007f5e:	200c      	movs	r0, #12
 8007f60:	f7ff fbf6 	bl	8007750 <memp_malloc>
 8007f64:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d109      	bne.n	8007f80 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007f6c:	f7ff ff76 	bl	8007e5c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <pbuf_alloc+0x78>
            pbuf_free(p);
 8007f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f78:	f000 faa8 	bl	80084cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e0a7      	b.n	80080d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f82:	3303      	adds	r3, #3
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f023 0303 	bic.w	r3, r3, #3
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	8b7a      	ldrh	r2, [r7, #26]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	bf28      	it	cs
 8007f98:	4613      	movcs	r3, r2
 8007f9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f9e:	3310      	adds	r3, #16
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	3303      	adds	r3, #3
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	4618      	mov	r0, r3
 8007fac:	89f9      	ldrh	r1, [r7, #14]
 8007fae:	8b7a      	ldrh	r2, [r7, #26]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4601      	mov	r1, r0
 8007fbc:	6938      	ldr	r0, [r7, #16]
 8007fbe:	f7ff ff77 	bl	8007eb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <pbuf_alloc+0xd8>
 8007fce:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <pbuf_alloc+0x1d4>)
 8007fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd4:	4941      	ldr	r1, [pc, #260]	; (80080dc <pbuf_alloc+0x1d8>)
 8007fd6:	4842      	ldr	r0, [pc, #264]	; (80080e0 <pbuf_alloc+0x1dc>)
 8007fd8:	f00a fff6 	bl	8012fc8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fde:	3303      	adds	r3, #3
 8007fe0:	f023 0303 	bic.w	r3, r3, #3
 8007fe4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007fe8:	d106      	bne.n	8007ff8 <pbuf_alloc+0xf4>
 8007fea:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <pbuf_alloc+0x1d4>)
 8007fec:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007ff0:	493c      	ldr	r1, [pc, #240]	; (80080e4 <pbuf_alloc+0x1e0>)
 8007ff2:	483b      	ldr	r0, [pc, #236]	; (80080e0 <pbuf_alloc+0x1dc>)
 8007ff4:	f00a ffe8 	bl	8012fc8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d102      	bne.n	8008004 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
 8008002:	e002      	b.n	800800a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800800e:	8b7a      	ldrh	r2, [r7, #26]
 8008010:	89fb      	ldrh	r3, [r7, #14]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800801a:	8b7b      	ldrh	r3, [r7, #26]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d19e      	bne.n	8007f5e <pbuf_alloc+0x5a>
      break;
 8008020:	e055      	b.n	80080ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008022:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008024:	3303      	adds	r3, #3
 8008026:	b29b      	uxth	r3, r3
 8008028:	f023 0303 	bic.w	r3, r3, #3
 800802c:	b29a      	uxth	r2, r3
 800802e:	88bb      	ldrh	r3, [r7, #4]
 8008030:	3303      	adds	r3, #3
 8008032:	b29b      	uxth	r3, r3
 8008034:	f023 0303 	bic.w	r3, r3, #3
 8008038:	b29b      	uxth	r3, r3
 800803a:	4413      	add	r3, r2
 800803c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800803e:	8b3b      	ldrh	r3, [r7, #24]
 8008040:	3310      	adds	r3, #16
 8008042:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008044:	8b3a      	ldrh	r2, [r7, #24]
 8008046:	88bb      	ldrh	r3, [r7, #4]
 8008048:	3303      	adds	r3, #3
 800804a:	f023 0303 	bic.w	r3, r3, #3
 800804e:	429a      	cmp	r2, r3
 8008050:	d306      	bcc.n	8008060 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008052:	8afa      	ldrh	r2, [r7, #22]
 8008054:	88bb      	ldrh	r3, [r7, #4]
 8008056:	3303      	adds	r3, #3
 8008058:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800805c:	429a      	cmp	r2, r3
 800805e:	d201      	bcs.n	8008064 <pbuf_alloc+0x160>
        return NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	e035      	b.n	80080d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008064:	8afb      	ldrh	r3, [r7, #22]
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff f9ce 	bl	8007408 <mem_malloc>
 800806c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <pbuf_alloc+0x174>
        return NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	e02b      	b.n	80080d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800807a:	3310      	adds	r3, #16
 800807c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807e:	4413      	add	r3, r2
 8008080:	3303      	adds	r3, #3
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	4618      	mov	r0, r3
 8008088:	88b9      	ldrh	r1, [r7, #4]
 800808a:	88ba      	ldrh	r2, [r7, #4]
 800808c:	2300      	movs	r3, #0
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	887b      	ldrh	r3, [r7, #2]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	460b      	mov	r3, r1
 8008096:	4601      	mov	r1, r0
 8008098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800809a:	f7ff ff09 	bl	8007eb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d010      	beq.n	80080cc <pbuf_alloc+0x1c8>
 80080aa:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <pbuf_alloc+0x1d4>)
 80080ac:	f44f 7291 	mov.w	r2, #290	; 0x122
 80080b0:	490d      	ldr	r1, [pc, #52]	; (80080e8 <pbuf_alloc+0x1e4>)
 80080b2:	480b      	ldr	r0, [pc, #44]	; (80080e0 <pbuf_alloc+0x1dc>)
 80080b4:	f00a ff88 	bl	8012fc8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80080b8:	e008      	b.n	80080cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <pbuf_alloc+0x1d4>)
 80080bc:	f240 1227 	movw	r2, #295	; 0x127
 80080c0:	490a      	ldr	r1, [pc, #40]	; (80080ec <pbuf_alloc+0x1e8>)
 80080c2:	4807      	ldr	r0, [pc, #28]	; (80080e0 <pbuf_alloc+0x1dc>)
 80080c4:	f00a ff80 	bl	8012fc8 <iprintf>
      return NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	e001      	b.n	80080d0 <pbuf_alloc+0x1cc>
      break;
 80080cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3728      	adds	r7, #40	; 0x28
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	080145ec 	.word	0x080145ec
 80080dc:	0801461c 	.word	0x0801461c
 80080e0:	0801464c 	.word	0x0801464c
 80080e4:	08014674 	.word	0x08014674
 80080e8:	080146a8 	.word	0x080146a8
 80080ec:	080146d4 	.word	0x080146d4

080080f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	807b      	strh	r3, [r7, #2]
 80080fc:	4613      	mov	r3, r2
 80080fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008100:	883b      	ldrh	r3, [r7, #0]
 8008102:	2b41      	cmp	r3, #65	; 0x41
 8008104:	d009      	beq.n	800811a <pbuf_alloc_reference+0x2a>
 8008106:	883b      	ldrh	r3, [r7, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d006      	beq.n	800811a <pbuf_alloc_reference+0x2a>
 800810c:	4b0f      	ldr	r3, [pc, #60]	; (800814c <pbuf_alloc_reference+0x5c>)
 800810e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008112:	490f      	ldr	r1, [pc, #60]	; (8008150 <pbuf_alloc_reference+0x60>)
 8008114:	480f      	ldr	r0, [pc, #60]	; (8008154 <pbuf_alloc_reference+0x64>)
 8008116:	f00a ff57 	bl	8012fc8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800811a:	200b      	movs	r0, #11
 800811c:	f7ff fb18 	bl	8007750 <memp_malloc>
 8008120:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008128:	2300      	movs	r3, #0
 800812a:	e00b      	b.n	8008144 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800812c:	8879      	ldrh	r1, [r7, #2]
 800812e:	887a      	ldrh	r2, [r7, #2]
 8008130:	2300      	movs	r3, #0
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	883b      	ldrh	r3, [r7, #0]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	460b      	mov	r3, r1
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff feb7 	bl	8007eb0 <pbuf_init_alloced_pbuf>
  return p;
 8008142:	68fb      	ldr	r3, [r7, #12]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	080145ec 	.word	0x080145ec
 8008150:	080146f0 	.word	0x080146f0
 8008154:	0801464c 	.word	0x0801464c

08008158 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af02      	add	r7, sp, #8
 800815e:	607b      	str	r3, [r7, #4]
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
 8008164:	460b      	mov	r3, r1
 8008166:	81bb      	strh	r3, [r7, #12]
 8008168:	4613      	mov	r3, r2
 800816a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008170:	8a7b      	ldrh	r3, [r7, #18]
 8008172:	3303      	adds	r3, #3
 8008174:	f023 0203 	bic.w	r2, r3, #3
 8008178:	89bb      	ldrh	r3, [r7, #12]
 800817a:	441a      	add	r2, r3
 800817c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800817e:	429a      	cmp	r2, r3
 8008180:	d901      	bls.n	8008186 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	e018      	b.n	80081b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d007      	beq.n	800819c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800818c:	8a7b      	ldrh	r3, [r7, #18]
 800818e:	3303      	adds	r3, #3
 8008190:	f023 0303 	bic.w	r3, r3, #3
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	4413      	add	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	e001      	b.n	80081a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	89b9      	ldrh	r1, [r7, #12]
 80081a4:	89ba      	ldrh	r2, [r7, #12]
 80081a6:	2302      	movs	r3, #2
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	897b      	ldrh	r3, [r7, #10]
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	460b      	mov	r3, r1
 80081b0:	6979      	ldr	r1, [r7, #20]
 80081b2:	f7ff fe7d 	bl	8007eb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80081b6:	687b      	ldr	r3, [r7, #4]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <pbuf_realloc+0x20>
 80081d2:	4b3a      	ldr	r3, [pc, #232]	; (80082bc <pbuf_realloc+0xfc>)
 80081d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80081d8:	4939      	ldr	r1, [pc, #228]	; (80082c0 <pbuf_realloc+0x100>)
 80081da:	483a      	ldr	r0, [pc, #232]	; (80082c4 <pbuf_realloc+0x104>)
 80081dc:	f00a fef4 	bl	8012fc8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	891b      	ldrh	r3, [r3, #8]
 80081e4:	887a      	ldrh	r2, [r7, #2]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d263      	bcs.n	80082b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	891a      	ldrh	r2, [r3, #8]
 80081ee:	887b      	ldrh	r3, [r7, #2]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80081f4:	887b      	ldrh	r3, [r7, #2]
 80081f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80081fc:	e018      	b.n	8008230 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	895b      	ldrh	r3, [r3, #10]
 8008202:	897a      	ldrh	r2, [r7, #10]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	891a      	ldrh	r2, [r3, #8]
 800820c:	893b      	ldrh	r3, [r7, #8]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	b29a      	uxth	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d106      	bne.n	8008230 <pbuf_realloc+0x70>
 8008222:	4b26      	ldr	r3, [pc, #152]	; (80082bc <pbuf_realloc+0xfc>)
 8008224:	f240 12af 	movw	r2, #431	; 0x1af
 8008228:	4927      	ldr	r1, [pc, #156]	; (80082c8 <pbuf_realloc+0x108>)
 800822a:	4826      	ldr	r0, [pc, #152]	; (80082c4 <pbuf_realloc+0x104>)
 800822c:	f00a fecc 	bl	8012fc8 <iprintf>
  while (rem_len > q->len) {
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	895b      	ldrh	r3, [r3, #10]
 8008234:	897a      	ldrh	r2, [r7, #10]
 8008236:	429a      	cmp	r2, r3
 8008238:	d8e1      	bhi.n	80081fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	7b1b      	ldrb	r3, [r3, #12]
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	2b00      	cmp	r3, #0
 8008244:	d121      	bne.n	800828a <pbuf_realloc+0xca>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	895b      	ldrh	r3, [r3, #10]
 800824a:	897a      	ldrh	r2, [r7, #10]
 800824c:	429a      	cmp	r2, r3
 800824e:	d01c      	beq.n	800828a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	7b5b      	ldrb	r3, [r3, #13]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d116      	bne.n	800828a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	b29a      	uxth	r2, r3
 8008266:	897b      	ldrh	r3, [r7, #10]
 8008268:	4413      	add	r3, r2
 800826a:	b29b      	uxth	r3, r3
 800826c:	4619      	mov	r1, r3
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7fe ffc0 	bl	80071f4 <mem_trim>
 8008274:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <pbuf_realloc+0xca>
 800827c:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <pbuf_realloc+0xfc>)
 800827e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008282:	4912      	ldr	r1, [pc, #72]	; (80082cc <pbuf_realloc+0x10c>)
 8008284:	480f      	ldr	r0, [pc, #60]	; (80082c4 <pbuf_realloc+0x104>)
 8008286:	f00a fe9f 	bl	8012fc8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	897a      	ldrh	r2, [r7, #10]
 800828e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	895a      	ldrh	r2, [r3, #10]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 f911 	bl	80084cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	e000      	b.n	80082b4 <pbuf_realloc+0xf4>
    return;
 80082b2:	bf00      	nop

}
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	080145ec 	.word	0x080145ec
 80082c0:	08014704 	.word	0x08014704
 80082c4:	0801464c 	.word	0x0801464c
 80082c8:	0801471c 	.word	0x0801471c
 80082cc:	08014734 	.word	0x08014734

080082d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <pbuf_add_header_impl+0x22>
 80082e4:	4b2b      	ldr	r3, [pc, #172]	; (8008394 <pbuf_add_header_impl+0xc4>)
 80082e6:	f240 12df 	movw	r2, #479	; 0x1df
 80082ea:	492b      	ldr	r1, [pc, #172]	; (8008398 <pbuf_add_header_impl+0xc8>)
 80082ec:	482b      	ldr	r0, [pc, #172]	; (800839c <pbuf_add_header_impl+0xcc>)
 80082ee:	f00a fe6b 	bl	8012fc8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <pbuf_add_header_impl+0x30>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fe:	d301      	bcc.n	8008304 <pbuf_add_header_impl+0x34>
    return 1;
 8008300:	2301      	movs	r3, #1
 8008302:	e043      	b.n	800838c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <pbuf_add_header_impl+0x3e>
    return 0;
 800830a:	2300      	movs	r3, #0
 800830c:	e03e      	b.n	800838c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	891a      	ldrh	r2, [r3, #8]
 8008316:	8a7b      	ldrh	r3, [r7, #18]
 8008318:	4413      	add	r3, r2
 800831a:	b29b      	uxth	r3, r3
 800831c:	8a7a      	ldrh	r2, [r7, #18]
 800831e:	429a      	cmp	r2, r3
 8008320:	d901      	bls.n	8008326 <pbuf_add_header_impl+0x56>
    return 1;
 8008322:	2301      	movs	r3, #1
 8008324:	e032      	b.n	800838c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	7b1b      	ldrb	r3, [r3, #12]
 800832a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800832c:	8a3b      	ldrh	r3, [r7, #16]
 800832e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	425b      	negs	r3, r3
 800833e:	4413      	add	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3310      	adds	r3, #16
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	429a      	cmp	r2, r3
 800834a:	d20d      	bcs.n	8008368 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800834c:	2301      	movs	r3, #1
 800834e:	e01d      	b.n	800838c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008350:	79fb      	ldrb	r3, [r7, #7]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d006      	beq.n	8008364 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	425b      	negs	r3, r3
 800835e:	4413      	add	r3, r2
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e001      	b.n	8008368 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008364:	2301      	movs	r3, #1
 8008366:	e011      	b.n	800838c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	895a      	ldrh	r2, [r3, #10]
 8008372:	8a7b      	ldrh	r3, [r7, #18]
 8008374:	4413      	add	r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	891a      	ldrh	r2, [r3, #8]
 8008380:	8a7b      	ldrh	r3, [r7, #18]
 8008382:	4413      	add	r3, r2
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	811a      	strh	r2, [r3, #8]


  return 0;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	080145ec 	.word	0x080145ec
 8008398:	08014750 	.word	0x08014750
 800839c:	0801464c 	.word	0x0801464c

080083a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80083aa:	2200      	movs	r2, #0
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff ff8e 	bl	80082d0 <pbuf_add_header_impl>
 80083b4:	4603      	mov	r3, r0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <pbuf_remove_header+0x1e>
 80083d0:	4b20      	ldr	r3, [pc, #128]	; (8008454 <pbuf_remove_header+0x94>)
 80083d2:	f240 224b 	movw	r2, #587	; 0x24b
 80083d6:	4920      	ldr	r1, [pc, #128]	; (8008458 <pbuf_remove_header+0x98>)
 80083d8:	4820      	ldr	r0, [pc, #128]	; (800845c <pbuf_remove_header+0x9c>)
 80083da:	f00a fdf5 	bl	8012fc8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <pbuf_remove_header+0x2c>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ea:	d301      	bcc.n	80083f0 <pbuf_remove_header+0x30>
    return 1;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e02c      	b.n	800844a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d101      	bne.n	80083fa <pbuf_remove_header+0x3a>
    return 0;
 80083f6:	2300      	movs	r3, #0
 80083f8:	e027      	b.n	800844a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	895b      	ldrh	r3, [r3, #10]
 8008402:	89fa      	ldrh	r2, [r7, #14]
 8008404:	429a      	cmp	r2, r3
 8008406:	d908      	bls.n	800841a <pbuf_remove_header+0x5a>
 8008408:	4b12      	ldr	r3, [pc, #72]	; (8008454 <pbuf_remove_header+0x94>)
 800840a:	f240 2255 	movw	r2, #597	; 0x255
 800840e:	4914      	ldr	r1, [pc, #80]	; (8008460 <pbuf_remove_header+0xa0>)
 8008410:	4812      	ldr	r0, [pc, #72]	; (800845c <pbuf_remove_header+0x9c>)
 8008412:	f00a fdd9 	bl	8012fc8 <iprintf>
 8008416:	2301      	movs	r3, #1
 8008418:	e017      	b.n	800844a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	441a      	add	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	895a      	ldrh	r2, [r3, #10]
 8008430:	89fb      	ldrh	r3, [r7, #14]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	891a      	ldrh	r2, [r3, #8]
 800843e:	89fb      	ldrh	r3, [r7, #14]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	b29a      	uxth	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	080145ec 	.word	0x080145ec
 8008458:	08014750 	.word	0x08014750
 800845c:	0801464c 	.word	0x0801464c
 8008460:	0801475c 	.word	0x0801475c

08008464 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	807b      	strh	r3, [r7, #2]
 8008470:	4613      	mov	r3, r2
 8008472:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008474:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008478:	2b00      	cmp	r3, #0
 800847a:	da08      	bge.n	800848e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800847c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008480:	425b      	negs	r3, r3
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ff9b 	bl	80083c0 <pbuf_remove_header>
 800848a:	4603      	mov	r3, r0
 800848c:	e007      	b.n	800849e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800848e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008492:	787a      	ldrb	r2, [r7, #1]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff ff1a 	bl	80082d0 <pbuf_add_header_impl>
 800849c:	4603      	mov	r3, r0
  }
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80084b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084b6:	2201      	movs	r2, #1
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff ffd2 	bl	8008464 <pbuf_header_impl>
 80084c0:	4603      	mov	r3, r0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10b      	bne.n	80084f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d106      	bne.n	80084ee <pbuf_free+0x22>
 80084e0:	4b3b      	ldr	r3, [pc, #236]	; (80085d0 <pbuf_free+0x104>)
 80084e2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80084e6:	493b      	ldr	r1, [pc, #236]	; (80085d4 <pbuf_free+0x108>)
 80084e8:	483b      	ldr	r0, [pc, #236]	; (80085d8 <pbuf_free+0x10c>)
 80084ea:	f00a fd6d 	bl	8012fc8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e069      	b.n	80085c6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80084f6:	e062      	b.n	80085be <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80084f8:	f00a fc5a 	bl	8012db0 <sys_arch_protect>
 80084fc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7b9b      	ldrb	r3, [r3, #14]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <pbuf_free+0x48>
 8008506:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <pbuf_free+0x104>)
 8008508:	f240 22f1 	movw	r2, #753	; 0x2f1
 800850c:	4933      	ldr	r1, [pc, #204]	; (80085dc <pbuf_free+0x110>)
 800850e:	4832      	ldr	r0, [pc, #200]	; (80085d8 <pbuf_free+0x10c>)
 8008510:	f00a fd5a 	bl	8012fc8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7b9b      	ldrb	r3, [r3, #14]
 8008518:	3b01      	subs	r3, #1
 800851a:	b2da      	uxtb	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	739a      	strb	r2, [r3, #14]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	7b9b      	ldrb	r3, [r3, #14]
 8008524:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008526:	69b8      	ldr	r0, [r7, #24]
 8008528:	f00a fc50 	bl	8012dcc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d143      	bne.n	80085ba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7b1b      	ldrb	r3, [r3, #12]
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7b5b      	ldrb	r3, [r3, #13]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d011      	beq.n	8008572 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d106      	bne.n	8008568 <pbuf_free+0x9c>
 800855a:	4b1d      	ldr	r3, [pc, #116]	; (80085d0 <pbuf_free+0x104>)
 800855c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008560:	491f      	ldr	r1, [pc, #124]	; (80085e0 <pbuf_free+0x114>)
 8008562:	481d      	ldr	r0, [pc, #116]	; (80085d8 <pbuf_free+0x10c>)
 8008564:	f00a fd30 	bl	8012fc8 <iprintf>
        pc->custom_free_function(p);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
 8008570:	e01d      	b.n	80085ae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d104      	bne.n	8008582 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	200c      	movs	r0, #12
 800857c:	f7ff f95e 	bl	800783c <memp_free>
 8008580:	e015      	b.n	80085ae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d104      	bne.n	8008592 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	200b      	movs	r0, #11
 800858c:	f7ff f956 	bl	800783c <memp_free>
 8008590:	e00d      	b.n	80085ae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <pbuf_free+0xd4>
          mem_free(p);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7fe fd9b 	bl	80070d4 <mem_free>
 800859e:	e006      	b.n	80085ae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80085a0:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <pbuf_free+0x104>)
 80085a2:	f240 320f 	movw	r2, #783	; 0x30f
 80085a6:	490f      	ldr	r1, [pc, #60]	; (80085e4 <pbuf_free+0x118>)
 80085a8:	480b      	ldr	r0, [pc, #44]	; (80085d8 <pbuf_free+0x10c>)
 80085aa:	f00a fd0d 	bl	8012fc8 <iprintf>
        }
      }
      count++;
 80085ae:	7ffb      	ldrb	r3, [r7, #31]
 80085b0:	3301      	adds	r3, #1
 80085b2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	e001      	b.n	80085be <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d199      	bne.n	80084f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80085c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	080145ec 	.word	0x080145ec
 80085d4:	08014750 	.word	0x08014750
 80085d8:	0801464c 	.word	0x0801464c
 80085dc:	0801477c 	.word	0x0801477c
 80085e0:	08014794 	.word	0x08014794
 80085e4:	080147b8 	.word	0x080147b8

080085e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80085f4:	e005      	b.n	8008602 <pbuf_clen+0x1a>
    ++len;
 80085f6:	89fb      	ldrh	r3, [r7, #14]
 80085f8:	3301      	adds	r3, #1
 80085fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1f6      	bne.n	80085f6 <pbuf_clen+0xe>
  }
  return len;
 8008608:	89fb      	ldrh	r3, [r7, #14]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d016      	beq.n	8008654 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008626:	f00a fbc3 	bl	8012db0 <sys_arch_protect>
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7b9b      	ldrb	r3, [r3, #14]
 8008630:	3301      	adds	r3, #1
 8008632:	b2da      	uxtb	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	739a      	strb	r2, [r3, #14]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f00a fbc7 	bl	8012dcc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	7b9b      	ldrb	r3, [r3, #14]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d106      	bne.n	8008654 <pbuf_ref+0x3c>
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <pbuf_ref+0x44>)
 8008648:	f240 3242 	movw	r2, #834	; 0x342
 800864c:	4904      	ldr	r1, [pc, #16]	; (8008660 <pbuf_ref+0x48>)
 800864e:	4805      	ldr	r0, [pc, #20]	; (8008664 <pbuf_ref+0x4c>)
 8008650:	f00a fcba 	bl	8012fc8 <iprintf>
  }
}
 8008654:	bf00      	nop
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	080145ec 	.word	0x080145ec
 8008660:	080147cc 	.word	0x080147cc
 8008664:	0801464c 	.word	0x0801464c

08008668 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <pbuf_cat+0x16>
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d107      	bne.n	800868e <pbuf_cat+0x26>
 800867e:	4b20      	ldr	r3, [pc, #128]	; (8008700 <pbuf_cat+0x98>)
 8008680:	f240 3259 	movw	r2, #857	; 0x359
 8008684:	491f      	ldr	r1, [pc, #124]	; (8008704 <pbuf_cat+0x9c>)
 8008686:	4820      	ldr	r0, [pc, #128]	; (8008708 <pbuf_cat+0xa0>)
 8008688:	f00a fc9e 	bl	8012fc8 <iprintf>
 800868c:	e034      	b.n	80086f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e00a      	b.n	80086aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	891a      	ldrh	r2, [r3, #8]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	891b      	ldrh	r3, [r3, #8]
 800869c:	4413      	add	r3, r2
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	891a      	ldrh	r2, [r3, #8]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	895b      	ldrh	r3, [r3, #10]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d006      	beq.n	80086cc <pbuf_cat+0x64>
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <pbuf_cat+0x98>)
 80086c0:	f240 3262 	movw	r2, #866	; 0x362
 80086c4:	4911      	ldr	r1, [pc, #68]	; (800870c <pbuf_cat+0xa4>)
 80086c6:	4810      	ldr	r0, [pc, #64]	; (8008708 <pbuf_cat+0xa0>)
 80086c8:	f00a fc7e 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <pbuf_cat+0x7a>
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <pbuf_cat+0x98>)
 80086d6:	f240 3263 	movw	r2, #867	; 0x363
 80086da:	490d      	ldr	r1, [pc, #52]	; (8008710 <pbuf_cat+0xa8>)
 80086dc:	480a      	ldr	r0, [pc, #40]	; (8008708 <pbuf_cat+0xa0>)
 80086de:	f00a fc73 	bl	8012fc8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	891a      	ldrh	r2, [r3, #8]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	891b      	ldrh	r3, [r3, #8]
 80086ea:	4413      	add	r3, r2
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	080145ec 	.word	0x080145ec
 8008704:	080147e0 	.word	0x080147e0
 8008708:	0801464c 	.word	0x0801464c
 800870c:	08014818 	.word	0x08014818
 8008710:	08014848 	.word	0x08014848

08008714 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff ffa1 	bl	8008668 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008726:	6838      	ldr	r0, [r7, #0]
 8008728:	f7ff ff76 	bl	8008618 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <pbuf_copy+0x2a>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <pbuf_copy+0x2a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	891a      	ldrh	r2, [r3, #8]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	891b      	ldrh	r3, [r3, #8]
 800875a:	429a      	cmp	r2, r3
 800875c:	d209      	bcs.n	8008772 <pbuf_copy+0x3e>
 800875e:	4b57      	ldr	r3, [pc, #348]	; (80088bc <pbuf_copy+0x188>)
 8008760:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008764:	4956      	ldr	r1, [pc, #344]	; (80088c0 <pbuf_copy+0x18c>)
 8008766:	4857      	ldr	r0, [pc, #348]	; (80088c4 <pbuf_copy+0x190>)
 8008768:	f00a fc2e 	bl	8012fc8 <iprintf>
 800876c:	f06f 030f 	mvn.w	r3, #15
 8008770:	e09f      	b.n	80088b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	895b      	ldrh	r3, [r3, #10]
 8008776:	461a      	mov	r2, r3
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	1ad2      	subs	r2, r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	895b      	ldrh	r3, [r3, #10]
 8008780:	4619      	mov	r1, r3
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1acb      	subs	r3, r1, r3
 8008786:	429a      	cmp	r2, r3
 8008788:	d306      	bcc.n	8008798 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	461a      	mov	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e005      	b.n	80087a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	895b      	ldrh	r3, [r3, #10]
 800879c:	461a      	mov	r2, r3
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	18d0      	adds	r0, r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4413      	add	r3, r2
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4619      	mov	r1, r3
 80087b8:	f00a fd36 	bl	8013228 <memcpy>
    offset_to += len;
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4413      	add	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	895b      	ldrh	r3, [r3, #10]
 80087d0:	461a      	mov	r2, r3
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d906      	bls.n	80087e6 <pbuf_copy+0xb2>
 80087d8:	4b38      	ldr	r3, [pc, #224]	; (80088bc <pbuf_copy+0x188>)
 80087da:	f240 32d9 	movw	r2, #985	; 0x3d9
 80087de:	493a      	ldr	r1, [pc, #232]	; (80088c8 <pbuf_copy+0x194>)
 80087e0:	4838      	ldr	r0, [pc, #224]	; (80088c4 <pbuf_copy+0x190>)
 80087e2:	f00a fbf1 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	895b      	ldrh	r3, [r3, #10]
 80087ea:	461a      	mov	r2, r3
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d906      	bls.n	8008800 <pbuf_copy+0xcc>
 80087f2:	4b32      	ldr	r3, [pc, #200]	; (80088bc <pbuf_copy+0x188>)
 80087f4:	f240 32da 	movw	r2, #986	; 0x3da
 80087f8:	4934      	ldr	r1, [pc, #208]	; (80088cc <pbuf_copy+0x198>)
 80087fa:	4832      	ldr	r0, [pc, #200]	; (80088c4 <pbuf_copy+0x190>)
 80087fc:	f00a fbe4 	bl	8012fc8 <iprintf>
    if (offset_from >= p_from->len) {
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	895b      	ldrh	r3, [r3, #10]
 8008804:	461a      	mov	r2, r3
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4293      	cmp	r3, r2
 800880a:	d304      	bcc.n	8008816 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	895b      	ldrh	r3, [r3, #10]
 800881a:	461a      	mov	r2, r3
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	4293      	cmp	r3, r2
 8008820:	d114      	bne.n	800884c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10c      	bne.n	800884c <pbuf_copy+0x118>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d009      	beq.n	800884c <pbuf_copy+0x118>
 8008838:	4b20      	ldr	r3, [pc, #128]	; (80088bc <pbuf_copy+0x188>)
 800883a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800883e:	4924      	ldr	r1, [pc, #144]	; (80088d0 <pbuf_copy+0x19c>)
 8008840:	4820      	ldr	r0, [pc, #128]	; (80088c4 <pbuf_copy+0x190>)
 8008842:	f00a fbc1 	bl	8012fc8 <iprintf>
 8008846:	f06f 030f 	mvn.w	r3, #15
 800884a:	e032      	b.n	80088b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d013      	beq.n	800887a <pbuf_copy+0x146>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	895a      	ldrh	r2, [r3, #10]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	891b      	ldrh	r3, [r3, #8]
 800885a:	429a      	cmp	r2, r3
 800885c:	d10d      	bne.n	800887a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d009      	beq.n	800887a <pbuf_copy+0x146>
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <pbuf_copy+0x188>)
 8008868:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800886c:	4919      	ldr	r1, [pc, #100]	; (80088d4 <pbuf_copy+0x1a0>)
 800886e:	4815      	ldr	r0, [pc, #84]	; (80088c4 <pbuf_copy+0x190>)
 8008870:	f00a fbaa 	bl	8012fc8 <iprintf>
 8008874:	f06f 0305 	mvn.w	r3, #5
 8008878:	e01b      	b.n	80088b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <pbuf_copy+0x174>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	895a      	ldrh	r2, [r3, #10]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	891b      	ldrh	r3, [r3, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	d10d      	bne.n	80088a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d009      	beq.n	80088a8 <pbuf_copy+0x174>
 8008894:	4b09      	ldr	r3, [pc, #36]	; (80088bc <pbuf_copy+0x188>)
 8008896:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800889a:	490e      	ldr	r1, [pc, #56]	; (80088d4 <pbuf_copy+0x1a0>)
 800889c:	4809      	ldr	r0, [pc, #36]	; (80088c4 <pbuf_copy+0x190>)
 800889e:	f00a fb93 	bl	8012fc8 <iprintf>
 80088a2:	f06f 0305 	mvn.w	r3, #5
 80088a6:	e004      	b.n	80088b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f47f af61 	bne.w	8008772 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	080145ec 	.word	0x080145ec
 80088c0:	08014894 	.word	0x08014894
 80088c4:	0801464c 	.word	0x0801464c
 80088c8:	080148c4 	.word	0x080148c4
 80088cc:	080148dc 	.word	0x080148dc
 80088d0:	080148f8 	.word	0x080148f8
 80088d4:	08014908 	.word	0x08014908

080088d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4611      	mov	r1, r2
 80088e4:	461a      	mov	r2, r3
 80088e6:	460b      	mov	r3, r1
 80088e8:	80fb      	strh	r3, [r7, #6]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d108      	bne.n	800890e <pbuf_copy_partial+0x36>
 80088fc:	4b2b      	ldr	r3, [pc, #172]	; (80089ac <pbuf_copy_partial+0xd4>)
 80088fe:	f240 420a 	movw	r2, #1034	; 0x40a
 8008902:	492b      	ldr	r1, [pc, #172]	; (80089b0 <pbuf_copy_partial+0xd8>)
 8008904:	482b      	ldr	r0, [pc, #172]	; (80089b4 <pbuf_copy_partial+0xdc>)
 8008906:	f00a fb5f 	bl	8012fc8 <iprintf>
 800890a:	2300      	movs	r3, #0
 800890c:	e04a      	b.n	80089a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d108      	bne.n	8008926 <pbuf_copy_partial+0x4e>
 8008914:	4b25      	ldr	r3, [pc, #148]	; (80089ac <pbuf_copy_partial+0xd4>)
 8008916:	f240 420b 	movw	r2, #1035	; 0x40b
 800891a:	4927      	ldr	r1, [pc, #156]	; (80089b8 <pbuf_copy_partial+0xe0>)
 800891c:	4825      	ldr	r0, [pc, #148]	; (80089b4 <pbuf_copy_partial+0xdc>)
 800891e:	f00a fb53 	bl	8012fc8 <iprintf>
 8008922:	2300      	movs	r3, #0
 8008924:	e03e      	b.n	80089a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	e034      	b.n	8008996 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800892c:	88bb      	ldrh	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <pbuf_copy_partial+0x70>
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	895b      	ldrh	r3, [r3, #10]
 8008936:	88ba      	ldrh	r2, [r7, #4]
 8008938:	429a      	cmp	r2, r3
 800893a:	d305      	bcc.n	8008948 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	895b      	ldrh	r3, [r3, #10]
 8008940:	88ba      	ldrh	r2, [r7, #4]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	80bb      	strh	r3, [r7, #4]
 8008946:	e023      	b.n	8008990 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	895a      	ldrh	r2, [r3, #10]
 800894c:	88bb      	ldrh	r3, [r7, #4]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008952:	8b3a      	ldrh	r2, [r7, #24]
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	429a      	cmp	r2, r3
 8008958:	d901      	bls.n	800895e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800895e:	8b7b      	ldrh	r3, [r7, #26]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	18d0      	adds	r0, r2, r3
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	88bb      	ldrh	r3, [r7, #4]
 800896a:	4413      	add	r3, r2
 800896c:	8b3a      	ldrh	r2, [r7, #24]
 800896e:	4619      	mov	r1, r3
 8008970:	f00a fc5a 	bl	8013228 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008974:	8afa      	ldrh	r2, [r7, #22]
 8008976:	8b3b      	ldrh	r3, [r7, #24]
 8008978:	4413      	add	r3, r2
 800897a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800897c:	8b7a      	ldrh	r2, [r7, #26]
 800897e:	8b3b      	ldrh	r3, [r7, #24]
 8008980:	4413      	add	r3, r2
 8008982:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008984:	88fa      	ldrh	r2, [r7, #6]
 8008986:	8b3b      	ldrh	r3, [r7, #24]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	88fb      	ldrh	r3, [r7, #6]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <pbuf_copy_partial+0xca>
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1c4      	bne.n	800892c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80089a2:	8afb      	ldrh	r3, [r7, #22]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	080145ec 	.word	0x080145ec
 80089b0:	08014934 	.word	0x08014934
 80089b4:	0801464c 	.word	0x0801464c
 80089b8:	08014954 	.word	0x08014954

080089bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	603a      	str	r2, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
 80089c8:	460b      	mov	r3, r1
 80089ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	8919      	ldrh	r1, [r3, #8]
 80089d0:	88ba      	ldrh	r2, [r7, #4]
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff fa95 	bl	8007f04 <pbuf_alloc>
 80089da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <pbuf_clone+0x2a>
    return NULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e011      	b.n	8008a0a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff fea3 	bl	8008734 <pbuf_copy>
 80089ee:	4603      	mov	r3, r0
 80089f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80089f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d006      	beq.n	8008a08 <pbuf_clone+0x4c>
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <pbuf_clone+0x58>)
 80089fc:	f240 5224 	movw	r2, #1316	; 0x524
 8008a00:	4905      	ldr	r1, [pc, #20]	; (8008a18 <pbuf_clone+0x5c>)
 8008a02:	4806      	ldr	r0, [pc, #24]	; (8008a1c <pbuf_clone+0x60>)
 8008a04:	f00a fae0 	bl	8012fc8 <iprintf>
  return q;
 8008a08:	68fb      	ldr	r3, [r7, #12]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	080145ec 	.word	0x080145ec
 8008a18:	08014a60 	.word	0x08014a60
 8008a1c:	0801464c 	.word	0x0801464c

08008a20 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008a24:	f00a f9e2 	bl	8012dec <rand>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b01      	ldr	r3, [pc, #4]	; (8008a40 <tcp_init+0x20>)
 8008a3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008a3c:	bf00      	nop
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000010 	.word	0x20000010

08008a44 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	7d1b      	ldrb	r3, [r3, #20]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d105      	bne.n	8008a60 <tcp_free+0x1c>
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <tcp_free+0x2c>)
 8008a56:	22d4      	movs	r2, #212	; 0xd4
 8008a58:	4906      	ldr	r1, [pc, #24]	; (8008a74 <tcp_free+0x30>)
 8008a5a:	4807      	ldr	r0, [pc, #28]	; (8008a78 <tcp_free+0x34>)
 8008a5c:	f00a fab4 	bl	8012fc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	2001      	movs	r0, #1
 8008a64:	f7fe feea 	bl	800783c <memp_free>
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	08014aec 	.word	0x08014aec
 8008a74:	08014b1c 	.word	0x08014b1c
 8008a78:	08014b30 	.word	0x08014b30

08008a7c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7d1b      	ldrb	r3, [r3, #20]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d105      	bne.n	8008a98 <tcp_free_listen+0x1c>
 8008a8c:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <tcp_free_listen+0x2c>)
 8008a8e:	22df      	movs	r2, #223	; 0xdf
 8008a90:	4906      	ldr	r1, [pc, #24]	; (8008aac <tcp_free_listen+0x30>)
 8008a92:	4807      	ldr	r0, [pc, #28]	; (8008ab0 <tcp_free_listen+0x34>)
 8008a94:	f00a fa98 	bl	8012fc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	2002      	movs	r0, #2
 8008a9c:	f7fe fece 	bl	800783c <memp_free>
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	08014aec 	.word	0x08014aec
 8008aac:	08014b58 	.word	0x08014b58
 8008ab0:	08014b30 	.word	0x08014b30

08008ab4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008ab8:	f000 fea2 	bl	8009800 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008abc:	4b07      	ldr	r3, [pc, #28]	; (8008adc <tcp_tmr+0x28>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <tcp_tmr+0x28>)
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <tcp_tmr+0x28>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008ad4:	f000 fb54 	bl	8009180 <tcp_slowtmr>
  }
}
 8008ad8:	bf00      	nop
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	200108bd 	.word	0x200108bd

08008ae0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <tcp_remove_listener+0x1c>
 8008af0:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <tcp_remove_listener+0x48>)
 8008af2:	22ff      	movs	r2, #255	; 0xff
 8008af4:	490d      	ldr	r1, [pc, #52]	; (8008b2c <tcp_remove_listener+0x4c>)
 8008af6:	480e      	ldr	r0, [pc, #56]	; (8008b30 <tcp_remove_listener+0x50>)
 8008af8:	f00a fa66 	bl	8012fc8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	e00a      	b.n	8008b18 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d102      	bne.n	8008b12 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1f1      	bne.n	8008b02 <tcp_remove_listener+0x22>
    }
  }
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	08014aec 	.word	0x08014aec
 8008b2c:	08014b74 	.word	0x08014b74
 8008b30:	08014b30 	.word	0x08014b30

08008b34 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <tcp_listen_closed+0x1c>
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <tcp_listen_closed+0x60>)
 8008b44:	f240 1211 	movw	r2, #273	; 0x111
 8008b48:	4913      	ldr	r1, [pc, #76]	; (8008b98 <tcp_listen_closed+0x64>)
 8008b4a:	4814      	ldr	r0, [pc, #80]	; (8008b9c <tcp_listen_closed+0x68>)
 8008b4c:	f00a fa3c 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7d1b      	ldrb	r3, [r3, #20]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d006      	beq.n	8008b66 <tcp_listen_closed+0x32>
 8008b58:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <tcp_listen_closed+0x60>)
 8008b5a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008b5e:	4910      	ldr	r1, [pc, #64]	; (8008ba0 <tcp_listen_closed+0x6c>)
 8008b60:	480e      	ldr	r0, [pc, #56]	; (8008b9c <tcp_listen_closed+0x68>)
 8008b62:	f00a fa31 	bl	8012fc8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008b66:	2301      	movs	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	e00b      	b.n	8008b84 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <tcp_listen_closed+0x70>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7ff ffb1 	bl	8008ae0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d9f0      	bls.n	8008b6c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	08014aec 	.word	0x08014aec
 8008b98:	08014b9c 	.word	0x08014b9c
 8008b9c:	08014b30 	.word	0x08014b30
 8008ba0:	08014ba8 	.word	0x08014ba8
 8008ba4:	08016eac 	.word	0x08016eac

08008ba8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008ba8:	b5b0      	push	{r4, r5, r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af04      	add	r7, sp, #16
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <tcp_close_shutdown+0x20>
 8008bba:	4b63      	ldr	r3, [pc, #396]	; (8008d48 <tcp_close_shutdown+0x1a0>)
 8008bbc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008bc0:	4962      	ldr	r1, [pc, #392]	; (8008d4c <tcp_close_shutdown+0x1a4>)
 8008bc2:	4863      	ldr	r0, [pc, #396]	; (8008d50 <tcp_close_shutdown+0x1a8>)
 8008bc4:	f00a fa00 	bl	8012fc8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d066      	beq.n	8008c9c <tcp_close_shutdown+0xf4>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	7d1b      	ldrb	r3, [r3, #20]
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d003      	beq.n	8008bde <tcp_close_shutdown+0x36>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7d1b      	ldrb	r3, [r3, #20]
 8008bda:	2b07      	cmp	r3, #7
 8008bdc:	d15e      	bne.n	8008c9c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d104      	bne.n	8008bf0 <tcp_close_shutdown+0x48>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008bee:	d055      	beq.n	8008c9c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	8b5b      	ldrh	r3, [r3, #26]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d106      	bne.n	8008c0a <tcp_close_shutdown+0x62>
 8008bfc:	4b52      	ldr	r3, [pc, #328]	; (8008d48 <tcp_close_shutdown+0x1a0>)
 8008bfe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008c02:	4954      	ldr	r1, [pc, #336]	; (8008d54 <tcp_close_shutdown+0x1ac>)
 8008c04:	4852      	ldr	r0, [pc, #328]	; (8008d50 <tcp_close_shutdown+0x1a8>)
 8008c06:	f00a f9df 	bl	8012fc8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008c12:	687d      	ldr	r5, [r7, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3304      	adds	r3, #4
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	8ad2      	ldrh	r2, [r2, #22]
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	8b09      	ldrh	r1, [r1, #24]
 8008c20:	9102      	str	r1, [sp, #8]
 8008c22:	9201      	str	r2, [sp, #4]
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	462b      	mov	r3, r5
 8008c28:	4622      	mov	r2, r4
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f004 fe91 	bl	800d954 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f8c6 	bl	8009dc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008c38:	4b47      	ldr	r3, [pc, #284]	; (8008d58 <tcp_close_shutdown+0x1b0>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d105      	bne.n	8008c4e <tcp_close_shutdown+0xa6>
 8008c42:	4b45      	ldr	r3, [pc, #276]	; (8008d58 <tcp_close_shutdown+0x1b0>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	4a43      	ldr	r2, [pc, #268]	; (8008d58 <tcp_close_shutdown+0x1b0>)
 8008c4a:	6013      	str	r3, [r2, #0]
 8008c4c:	e013      	b.n	8008c76 <tcp_close_shutdown+0xce>
 8008c4e:	4b42      	ldr	r3, [pc, #264]	; (8008d58 <tcp_close_shutdown+0x1b0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	e00c      	b.n	8008c70 <tcp_close_shutdown+0xc8>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d104      	bne.n	8008c6a <tcp_close_shutdown+0xc2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	60da      	str	r2, [r3, #12]
 8008c68:	e005      	b.n	8008c76 <tcp_close_shutdown+0xce>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1ef      	bne.n	8008c56 <tcp_close_shutdown+0xae>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	60da      	str	r2, [r3, #12]
 8008c7c:	4b37      	ldr	r3, [pc, #220]	; (8008d5c <tcp_close_shutdown+0x1b4>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008c82:	4b37      	ldr	r3, [pc, #220]	; (8008d60 <tcp_close_shutdown+0x1b8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d102      	bne.n	8008c92 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008c8c:	f003 fd5e 	bl	800c74c <tcp_trigger_input_pcb_close>
 8008c90:	e002      	b.n	8008c98 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fed6 	bl	8008a44 <tcp_free>
      }
      return ERR_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e050      	b.n	8008d3e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d03b      	beq.n	8008d1c <tcp_close_shutdown+0x174>
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	dc44      	bgt.n	8008d32 <tcp_close_shutdown+0x18a>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <tcp_close_shutdown+0x10a>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d02a      	beq.n	8008d06 <tcp_close_shutdown+0x15e>
 8008cb0:	e03f      	b.n	8008d32 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	8adb      	ldrh	r3, [r3, #22]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d021      	beq.n	8008cfe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008cba:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <tcp_close_shutdown+0x1bc>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d105      	bne.n	8008cd0 <tcp_close_shutdown+0x128>
 8008cc4:	4b27      	ldr	r3, [pc, #156]	; (8008d64 <tcp_close_shutdown+0x1bc>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	4a26      	ldr	r2, [pc, #152]	; (8008d64 <tcp_close_shutdown+0x1bc>)
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	e013      	b.n	8008cf8 <tcp_close_shutdown+0x150>
 8008cd0:	4b24      	ldr	r3, [pc, #144]	; (8008d64 <tcp_close_shutdown+0x1bc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	60bb      	str	r3, [r7, #8]
 8008cd6:	e00c      	b.n	8008cf2 <tcp_close_shutdown+0x14a>
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d104      	bne.n	8008cec <tcp_close_shutdown+0x144>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	60da      	str	r2, [r3, #12]
 8008cea:	e005      	b.n	8008cf8 <tcp_close_shutdown+0x150>
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	60bb      	str	r3, [r7, #8]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1ef      	bne.n	8008cd8 <tcp_close_shutdown+0x130>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fea0 	bl	8008a44 <tcp_free>
      break;
 8008d04:	e01a      	b.n	8008d3c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ff14 	bl	8008b34 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4816      	ldr	r0, [pc, #88]	; (8008d68 <tcp_close_shutdown+0x1c0>)
 8008d10:	f001 f8a8 	bl	8009e64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7ff feb1 	bl	8008a7c <tcp_free_listen>
      break;
 8008d1a:	e00f      	b.n	8008d3c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	480e      	ldr	r0, [pc, #56]	; (8008d58 <tcp_close_shutdown+0x1b0>)
 8008d20:	f001 f8a0 	bl	8009e64 <tcp_pcb_remove>
 8008d24:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <tcp_close_shutdown+0x1b4>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fe8a 	bl	8008a44 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008d30:	e004      	b.n	8008d3c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f81a 	bl	8008d6c <tcp_close_shutdown_fin>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	e000      	b.n	8008d3e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bdb0      	pop	{r4, r5, r7, pc}
 8008d46:	bf00      	nop
 8008d48:	08014aec 	.word	0x08014aec
 8008d4c:	08014bc0 	.word	0x08014bc0
 8008d50:	08014b30 	.word	0x08014b30
 8008d54:	08014be0 	.word	0x08014be0
 8008d58:	200108b4 	.word	0x200108b4
 8008d5c:	200108bc 	.word	0x200108bc
 8008d60:	200108f4 	.word	0x200108f4
 8008d64:	200108ac 	.word	0x200108ac
 8008d68:	200108b0 	.word	0x200108b0

08008d6c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <tcp_close_shutdown_fin+0x1c>
 8008d7a:	4b2e      	ldr	r3, [pc, #184]	; (8008e34 <tcp_close_shutdown_fin+0xc8>)
 8008d7c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008d80:	492d      	ldr	r1, [pc, #180]	; (8008e38 <tcp_close_shutdown_fin+0xcc>)
 8008d82:	482e      	ldr	r0, [pc, #184]	; (8008e3c <tcp_close_shutdown_fin+0xd0>)
 8008d84:	f00a f920 	bl	8012fc8 <iprintf>

  switch (pcb->state) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
 8008d8c:	2b07      	cmp	r3, #7
 8008d8e:	d020      	beq.n	8008dd2 <tcp_close_shutdown_fin+0x66>
 8008d90:	2b07      	cmp	r3, #7
 8008d92:	dc2b      	bgt.n	8008dec <tcp_close_shutdown_fin+0x80>
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d002      	beq.n	8008d9e <tcp_close_shutdown_fin+0x32>
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	d00d      	beq.n	8008db8 <tcp_close_shutdown_fin+0x4c>
 8008d9c:	e026      	b.n	8008dec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f003 fee6 	bl	800cb70 <tcp_send_fin>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11f      	bne.n	8008df0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2205      	movs	r2, #5
 8008db4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008db6:	e01b      	b.n	8008df0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f003 fed9 	bl	800cb70 <tcp_send_fin>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d114      	bne.n	8008df4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2205      	movs	r2, #5
 8008dce:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008dd0:	e010      	b.n	8008df4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f003 fecc 	bl	800cb70 <tcp_send_fin>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2209      	movs	r2, #9
 8008de8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008dea:	e005      	b.n	8008df8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e01c      	b.n	8008e2a <tcp_close_shutdown_fin+0xbe>
      break;
 8008df0:	bf00      	nop
 8008df2:	e002      	b.n	8008dfa <tcp_close_shutdown_fin+0x8e>
      break;
 8008df4:	bf00      	nop
 8008df6:	e000      	b.n	8008dfa <tcp_close_shutdown_fin+0x8e>
      break;
 8008df8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f003 fff2 	bl	800cdec <tcp_output>
 8008e08:	e00d      	b.n	8008e26 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e12:	d108      	bne.n	8008e26 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8b5b      	ldrh	r3, [r3, #26]
 8008e18:	f043 0308 	orr.w	r3, r3, #8
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	e001      	b.n	8008e2a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	08014aec 	.word	0x08014aec
 8008e38:	08014b9c 	.word	0x08014b9c
 8008e3c:	08014b30 	.word	0x08014b30

08008e40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <tcp_close+0x22>
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <tcp_close+0x4c>)
 8008e50:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008e54:	490e      	ldr	r1, [pc, #56]	; (8008e90 <tcp_close+0x50>)
 8008e56:	480f      	ldr	r0, [pc, #60]	; (8008e94 <tcp_close+0x54>)
 8008e58:	f00a f8b6 	bl	8012fc8 <iprintf>
 8008e5c:	f06f 030f 	mvn.w	r3, #15
 8008e60:	e00f      	b.n	8008e82 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7d1b      	ldrb	r3, [r3, #20]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d006      	beq.n	8008e78 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	8b5b      	ldrh	r3, [r3, #26]
 8008e6e:	f043 0310 	orr.w	r3, r3, #16
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008e78:	2101      	movs	r1, #1
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fe94 	bl	8008ba8 <tcp_close_shutdown>
 8008e80:	4603      	mov	r3, r0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	08014aec 	.word	0x08014aec
 8008e90:	08014bfc 	.word	0x08014bfc
 8008e94:	08014b30 	.word	0x08014b30

08008e98 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08e      	sub	sp, #56	; 0x38
 8008e9c:	af04      	add	r7, sp, #16
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d107      	bne.n	8008eb8 <tcp_abandon+0x20>
 8008ea8:	4b52      	ldr	r3, [pc, #328]	; (8008ff4 <tcp_abandon+0x15c>)
 8008eaa:	f240 223d 	movw	r2, #573	; 0x23d
 8008eae:	4952      	ldr	r1, [pc, #328]	; (8008ff8 <tcp_abandon+0x160>)
 8008eb0:	4852      	ldr	r0, [pc, #328]	; (8008ffc <tcp_abandon+0x164>)
 8008eb2:	f00a f889 	bl	8012fc8 <iprintf>
 8008eb6:	e099      	b.n	8008fec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7d1b      	ldrb	r3, [r3, #20]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d106      	bne.n	8008ece <tcp_abandon+0x36>
 8008ec0:	4b4c      	ldr	r3, [pc, #304]	; (8008ff4 <tcp_abandon+0x15c>)
 8008ec2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008ec6:	494e      	ldr	r1, [pc, #312]	; (8009000 <tcp_abandon+0x168>)
 8008ec8:	484c      	ldr	r0, [pc, #304]	; (8008ffc <tcp_abandon+0x164>)
 8008eca:	f00a f87d 	bl	8012fc8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7d1b      	ldrb	r3, [r3, #20]
 8008ed2:	2b0a      	cmp	r3, #10
 8008ed4:	d107      	bne.n	8008ee6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008ed6:	6879      	ldr	r1, [r7, #4]
 8008ed8:	484a      	ldr	r0, [pc, #296]	; (8009004 <tcp_abandon+0x16c>)
 8008eda:	f000 ffc3 	bl	8009e64 <tcp_pcb_remove>
    tcp_free(pcb);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff fdb0 	bl	8008a44 <tcp_free>
 8008ee4:	e082      	b.n	8008fec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f00:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7d1b      	ldrb	r3, [r3, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d126      	bne.n	8008f5e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8adb      	ldrh	r3, [r3, #22]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d02e      	beq.n	8008f76 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008f18:	4b3b      	ldr	r3, [pc, #236]	; (8009008 <tcp_abandon+0x170>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d105      	bne.n	8008f2e <tcp_abandon+0x96>
 8008f22:	4b39      	ldr	r3, [pc, #228]	; (8009008 <tcp_abandon+0x170>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a37      	ldr	r2, [pc, #220]	; (8009008 <tcp_abandon+0x170>)
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	e013      	b.n	8008f56 <tcp_abandon+0xbe>
 8008f2e:	4b36      	ldr	r3, [pc, #216]	; (8009008 <tcp_abandon+0x170>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e00c      	b.n	8008f50 <tcp_abandon+0xb8>
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d104      	bne.n	8008f4a <tcp_abandon+0xb2>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	60da      	str	r2, [r3, #12]
 8008f48:	e005      	b.n	8008f56 <tcp_abandon+0xbe>
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1ef      	bne.n	8008f36 <tcp_abandon+0x9e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	60da      	str	r2, [r3, #12]
 8008f5c:	e00b      	b.n	8008f76 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	8adb      	ldrh	r3, [r3, #22]
 8008f66:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	4828      	ldr	r0, [pc, #160]	; (800900c <tcp_abandon+0x174>)
 8008f6c:	f000 ff7a 	bl	8009e64 <tcp_pcb_remove>
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <tcp_abandon+0x178>)
 8008f72:	2201      	movs	r2, #1
 8008f74:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d004      	beq.n	8008f88 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 fd1c 	bl	80099c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d004      	beq.n	8008f9a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 fd13 	bl	80099c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fd0a 	bl	80099c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00e      	beq.n	8008fd0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	8b12      	ldrh	r2, [r2, #24]
 8008fbc:	9202      	str	r2, [sp, #8]
 8008fbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	69b9      	ldr	r1, [r7, #24]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f004 fcc2 	bl	800d954 <tcp_rst>
    }
    last_state = pcb->state;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	7d1b      	ldrb	r3, [r3, #20]
 8008fd4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7ff fd34 	bl	8008a44 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <tcp_abandon+0x154>
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f06f 010c 	mvn.w	r1, #12
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	4798      	blx	r3
  }
}
 8008fec:	3728      	adds	r7, #40	; 0x28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	08014aec 	.word	0x08014aec
 8008ff8:	08014c30 	.word	0x08014c30
 8008ffc:	08014b30 	.word	0x08014b30
 8009000:	08014c4c 	.word	0x08014c4c
 8009004:	200108b8 	.word	0x200108b8
 8009008:	200108ac 	.word	0x200108ac
 800900c:	200108b4 	.word	0x200108b4
 8009010:	200108bc 	.word	0x200108bc

08009014 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800901c:	2101      	movs	r1, #1
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff ff3a 	bl	8008e98 <tcp_abandon>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d106      	bne.n	8009048 <tcp_update_rcv_ann_wnd+0x1c>
 800903a:	4b25      	ldr	r3, [pc, #148]	; (80090d0 <tcp_update_rcv_ann_wnd+0xa4>)
 800903c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009040:	4924      	ldr	r1, [pc, #144]	; (80090d4 <tcp_update_rcv_ann_wnd+0xa8>)
 8009042:	4825      	ldr	r0, [pc, #148]	; (80090d8 <tcp_update_rcv_ann_wnd+0xac>)
 8009044:	f009 ffc0 	bl	8012fc8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009050:	4413      	add	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800905c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009060:	bf28      	it	cs
 8009062:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009066:	b292      	uxth	r2, r2
 8009068:	4413      	add	r3, r2
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	db08      	blt.n	8009084 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	e020      	b.n	80090c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	dd03      	ble.n	800909a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009098:	e014      	b.n	80090c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ac:	d306      	bcc.n	80090bc <tcp_update_rcv_ann_wnd+0x90>
 80090ae:	4b08      	ldr	r3, [pc, #32]	; (80090d0 <tcp_update_rcv_ann_wnd+0xa4>)
 80090b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80090b4:	4909      	ldr	r1, [pc, #36]	; (80090dc <tcp_update_rcv_ann_wnd+0xb0>)
 80090b6:	4808      	ldr	r0, [pc, #32]	; (80090d8 <tcp_update_rcv_ann_wnd+0xac>)
 80090b8:	f009 ff86 	bl	8012fc8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80090c4:	2300      	movs	r3, #0
  }
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	08014aec 	.word	0x08014aec
 80090d4:	08014d48 	.word	0x08014d48
 80090d8:	08014b30 	.word	0x08014b30
 80090dc:	08014d6c 	.word	0x08014d6c

080090e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d107      	bne.n	8009102 <tcp_recved+0x22>
 80090f2:	4b1f      	ldr	r3, [pc, #124]	; (8009170 <tcp_recved+0x90>)
 80090f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80090f8:	491e      	ldr	r1, [pc, #120]	; (8009174 <tcp_recved+0x94>)
 80090fa:	481f      	ldr	r0, [pc, #124]	; (8009178 <tcp_recved+0x98>)
 80090fc:	f009 ff64 	bl	8012fc8 <iprintf>
 8009100:	e032      	b.n	8009168 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	7d1b      	ldrb	r3, [r3, #20]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d106      	bne.n	8009118 <tcp_recved+0x38>
 800910a:	4b19      	ldr	r3, [pc, #100]	; (8009170 <tcp_recved+0x90>)
 800910c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009110:	491a      	ldr	r1, [pc, #104]	; (800917c <tcp_recved+0x9c>)
 8009112:	4819      	ldr	r0, [pc, #100]	; (8009178 <tcp_recved+0x98>)
 8009114:	f009 ff58 	bl	8012fc8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800911c:	887b      	ldrh	r3, [r7, #2]
 800911e:	4413      	add	r3, r2
 8009120:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009122:	89fb      	ldrh	r3, [r7, #14]
 8009124:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009128:	d804      	bhi.n	8009134 <tcp_recved+0x54>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912e:	89fa      	ldrh	r2, [r7, #14]
 8009130:	429a      	cmp	r2, r3
 8009132:	d204      	bcs.n	800913e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800913a:	851a      	strh	r2, [r3, #40]	; 0x28
 800913c:	e002      	b.n	8009144 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	89fa      	ldrh	r2, [r7, #14]
 8009142:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff71 	bl	800902c <tcp_update_rcv_ann_wnd>
 800914a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009152:	d309      	bcc.n	8009168 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8b5b      	ldrh	r3, [r3, #26]
 8009158:	f043 0302 	orr.w	r3, r3, #2
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f003 fe42 	bl	800cdec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	08014aec 	.word	0x08014aec
 8009174:	08014d88 	.word	0x08014d88
 8009178:	08014b30 	.word	0x08014b30
 800917c:	08014da0 	.word	0x08014da0

08009180 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009180:	b5b0      	push	{r4, r5, r7, lr}
 8009182:	b090      	sub	sp, #64	; 0x40
 8009184:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800918c:	4b94      	ldr	r3, [pc, #592]	; (80093e0 <tcp_slowtmr+0x260>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	4a93      	ldr	r2, [pc, #588]	; (80093e0 <tcp_slowtmr+0x260>)
 8009194:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009196:	4b93      	ldr	r3, [pc, #588]	; (80093e4 <tcp_slowtmr+0x264>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	b2da      	uxtb	r2, r3
 800919e:	4b91      	ldr	r3, [pc, #580]	; (80093e4 <tcp_slowtmr+0x264>)
 80091a0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80091a6:	4b90      	ldr	r3, [pc, #576]	; (80093e8 <tcp_slowtmr+0x268>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80091ac:	e29f      	b.n	80096ee <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	7d1b      	ldrb	r3, [r3, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <tcp_slowtmr+0x44>
 80091b6:	4b8d      	ldr	r3, [pc, #564]	; (80093ec <tcp_slowtmr+0x26c>)
 80091b8:	f240 42be 	movw	r2, #1214	; 0x4be
 80091bc:	498c      	ldr	r1, [pc, #560]	; (80093f0 <tcp_slowtmr+0x270>)
 80091be:	488d      	ldr	r0, [pc, #564]	; (80093f4 <tcp_slowtmr+0x274>)
 80091c0:	f009 ff02 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	7d1b      	ldrb	r3, [r3, #20]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d106      	bne.n	80091da <tcp_slowtmr+0x5a>
 80091cc:	4b87      	ldr	r3, [pc, #540]	; (80093ec <tcp_slowtmr+0x26c>)
 80091ce:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80091d2:	4989      	ldr	r1, [pc, #548]	; (80093f8 <tcp_slowtmr+0x278>)
 80091d4:	4887      	ldr	r0, [pc, #540]	; (80093f4 <tcp_slowtmr+0x274>)
 80091d6:	f009 fef7 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	7d1b      	ldrb	r3, [r3, #20]
 80091de:	2b0a      	cmp	r3, #10
 80091e0:	d106      	bne.n	80091f0 <tcp_slowtmr+0x70>
 80091e2:	4b82      	ldr	r3, [pc, #520]	; (80093ec <tcp_slowtmr+0x26c>)
 80091e4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80091e8:	4984      	ldr	r1, [pc, #528]	; (80093fc <tcp_slowtmr+0x27c>)
 80091ea:	4882      	ldr	r0, [pc, #520]	; (80093f4 <tcp_slowtmr+0x274>)
 80091ec:	f009 feec 	bl	8012fc8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80091f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f2:	7f9a      	ldrb	r2, [r3, #30]
 80091f4:	4b7b      	ldr	r3, [pc, #492]	; (80093e4 <tcp_slowtmr+0x264>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d105      	bne.n	8009208 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009206:	e272      	b.n	80096ee <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009208:	4b76      	ldr	r3, [pc, #472]	; (80093e4 <tcp_slowtmr+0x264>)
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	7d1b      	ldrb	r3, [r3, #20]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d10a      	bne.n	800923a <tcp_slowtmr+0xba>
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800922a:	2b05      	cmp	r3, #5
 800922c:	d905      	bls.n	800923a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800922e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009232:	3301      	adds	r3, #1
 8009234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009238:	e11e      	b.n	8009478 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009240:	2b0b      	cmp	r3, #11
 8009242:	d905      	bls.n	8009250 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009248:	3301      	adds	r3, #1
 800924a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800924e:	e113      	b.n	8009478 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009256:	2b00      	cmp	r3, #0
 8009258:	d075      	beq.n	8009346 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <tcp_slowtmr+0xf0>
 8009262:	4b62      	ldr	r3, [pc, #392]	; (80093ec <tcp_slowtmr+0x26c>)
 8009264:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009268:	4965      	ldr	r1, [pc, #404]	; (8009400 <tcp_slowtmr+0x280>)
 800926a:	4862      	ldr	r0, [pc, #392]	; (80093f4 <tcp_slowtmr+0x274>)
 800926c:	f009 feac 	bl	8012fc8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d106      	bne.n	8009286 <tcp_slowtmr+0x106>
 8009278:	4b5c      	ldr	r3, [pc, #368]	; (80093ec <tcp_slowtmr+0x26c>)
 800927a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800927e:	4961      	ldr	r1, [pc, #388]	; (8009404 <tcp_slowtmr+0x284>)
 8009280:	485c      	ldr	r0, [pc, #368]	; (80093f4 <tcp_slowtmr+0x274>)
 8009282:	f009 fea1 	bl	8012fc8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800928c:	2b0b      	cmp	r3, #11
 800928e:	d905      	bls.n	800929c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009294:	3301      	adds	r3, #1
 8009296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800929a:	e0ed      	b.n	8009478 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80092a2:	3b01      	subs	r3, #1
 80092a4:	4a58      	ldr	r2, [pc, #352]	; (8009408 <tcp_slowtmr+0x288>)
 80092a6:	5cd3      	ldrb	r3, [r2, r3]
 80092a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80092b0:	7c7a      	ldrb	r2, [r7, #17]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d907      	bls.n	80092c6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80092bc:	3301      	adds	r3, #1
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80092cc:	7c7a      	ldrb	r2, [r7, #17]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	f200 80d2 	bhi.w	8009478 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80092d4:	2301      	movs	r3, #1
 80092d6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d108      	bne.n	80092f4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80092e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e4:	f004 fc2a 	bl	800db3c <tcp_zero_window_probe>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d014      	beq.n	8009318 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80092ee:	2300      	movs	r3, #0
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	e011      	b.n	8009318 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092fa:	4619      	mov	r1, r3
 80092fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fe:	f003 faef 	bl	800c8e0 <tcp_split_unsent_seg>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d107      	bne.n	8009318 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800930a:	f003 fd6f 	bl	800cdec <tcp_output>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 80ac 	beq.w	8009478 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800932e:	2b06      	cmp	r3, #6
 8009330:	f200 80a2 	bhi.w	8009478 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800933a:	3301      	adds	r3, #1
 800933c:	b2da      	uxtb	r2, r3
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009344:	e098      	b.n	8009478 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	db0f      	blt.n	8009370 <tcp_slowtmr+0x1f0>
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009356:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800935a:	4293      	cmp	r3, r2
 800935c:	d008      	beq.n	8009370 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009364:	b29b      	uxth	r3, r3
 8009366:	3301      	adds	r3, #1
 8009368:	b29b      	uxth	r3, r3
 800936a:	b21a      	sxth	r2, r3
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800937c:	429a      	cmp	r2, r3
 800937e:	db7b      	blt.n	8009478 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009380:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009382:	f004 f827 	bl	800d3d4 <tcp_rexmit_rto_prepare>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <tcp_slowtmr+0x21c>
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009390:	2b00      	cmp	r3, #0
 8009392:	d171      	bne.n	8009478 <tcp_slowtmr+0x2f8>
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d06d      	beq.n	8009478 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	7d1b      	ldrb	r3, [r3, #20]
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d03a      	beq.n	800941a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80093aa:	2b0c      	cmp	r3, #12
 80093ac:	bf28      	it	cs
 80093ae:	230c      	movcs	r3, #12
 80093b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80093b8:	10db      	asrs	r3, r3, #3
 80093ba:	b21b      	sxth	r3, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80093c4:	4413      	add	r3, r2
 80093c6:	7efa      	ldrb	r2, [r7, #27]
 80093c8:	4910      	ldr	r1, [pc, #64]	; (800940c <tcp_slowtmr+0x28c>)
 80093ca:	5c8a      	ldrb	r2, [r1, r2]
 80093cc:	4093      	lsls	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80093d6:	4293      	cmp	r3, r2
 80093d8:	dc1a      	bgt.n	8009410 <tcp_slowtmr+0x290>
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	b21a      	sxth	r2, r3
 80093de:	e019      	b.n	8009414 <tcp_slowtmr+0x294>
 80093e0:	200108a8 	.word	0x200108a8
 80093e4:	200108be 	.word	0x200108be
 80093e8:	200108b4 	.word	0x200108b4
 80093ec:	08014aec 	.word	0x08014aec
 80093f0:	08014e30 	.word	0x08014e30
 80093f4:	08014b30 	.word	0x08014b30
 80093f8:	08014e5c 	.word	0x08014e5c
 80093fc:	08014e88 	.word	0x08014e88
 8009400:	08014eb8 	.word	0x08014eb8
 8009404:	08014eec 	.word	0x08014eec
 8009408:	08016ea4 	.word	0x08016ea4
 800940c:	08016e94 	.word	0x08016e94
 8009410:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	2200      	movs	r2, #0
 800941e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800942c:	4293      	cmp	r3, r2
 800942e:	bf28      	it	cs
 8009430:	4613      	movcs	r3, r2
 8009432:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009434:	8a7b      	ldrh	r3, [r7, #18]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	b29b      	uxth	r3, r3
 800944e:	429a      	cmp	r2, r3
 8009450:	d206      	bcs.n	8009460 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	b29a      	uxth	r2, r3
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800946a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946c:	2200      	movs	r2, #0
 800946e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009474:	f004 f81e 	bl	800d4b4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	7d1b      	ldrb	r3, [r3, #20]
 800947c:	2b06      	cmp	r3, #6
 800947e:	d111      	bne.n	80094a4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	8b5b      	ldrh	r3, [r3, #26]
 8009484:	f003 0310 	and.w	r3, r3, #16
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00b      	beq.n	80094a4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800948c:	4b9d      	ldr	r3, [pc, #628]	; (8009704 <tcp_slowtmr+0x584>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b28      	cmp	r3, #40	; 0x28
 8009498:	d904      	bls.n	80094a4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800949a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800949e:	3301      	adds	r3, #1
 80094a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	7a5b      	ldrb	r3, [r3, #9]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d04c      	beq.n	800954a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	d003      	beq.n	80094c0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80094b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80094bc:	2b07      	cmp	r3, #7
 80094be:	d144      	bne.n	800954a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094c0:	4b90      	ldr	r3, [pc, #576]	; (8009704 <tcp_slowtmr+0x584>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80094d4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80094d8:	498b      	ldr	r1, [pc, #556]	; (8009708 <tcp_slowtmr+0x588>)
 80094da:	fba1 1303 	umull	r1, r3, r1, r3
 80094de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d90a      	bls.n	80094fa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e8:	3301      	adds	r3, #1
 80094ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80094ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094f2:	3301      	adds	r3, #1
 80094f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80094f8:	e027      	b.n	800954a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80094fa:	4b82      	ldr	r3, [pc, #520]	; (8009704 <tcp_slowtmr+0x584>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009506:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009510:	4618      	mov	r0, r3
 8009512:	4b7e      	ldr	r3, [pc, #504]	; (800970c <tcp_slowtmr+0x58c>)
 8009514:	fb00 f303 	mul.w	r3, r0, r3
 8009518:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800951a:	497b      	ldr	r1, [pc, #492]	; (8009708 <tcp_slowtmr+0x588>)
 800951c:	fba1 1303 	umull	r1, r3, r1, r3
 8009520:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009522:	429a      	cmp	r2, r3
 8009524:	d911      	bls.n	800954a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009528:	f004 fac8 	bl	800dabc <tcp_keepalive>
 800952c:	4603      	mov	r3, r0
 800952e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009532:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009536:	2b00      	cmp	r3, #0
 8009538:	d107      	bne.n	800954a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009540:	3301      	adds	r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800954e:	2b00      	cmp	r3, #0
 8009550:	d011      	beq.n	8009576 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009552:	4b6c      	ldr	r3, [pc, #432]	; (8009704 <tcp_slowtmr+0x584>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009562:	4619      	mov	r1, r3
 8009564:	460b      	mov	r3, r1
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	440b      	add	r3, r1
 800956a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800956c:	429a      	cmp	r2, r3
 800956e:	d302      	bcc.n	8009576 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009572:	f000 fddb 	bl	800a12c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	7d1b      	ldrb	r3, [r3, #20]
 800957a:	2b03      	cmp	r3, #3
 800957c:	d10b      	bne.n	8009596 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800957e:	4b61      	ldr	r3, [pc, #388]	; (8009704 <tcp_slowtmr+0x584>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	2b28      	cmp	r3, #40	; 0x28
 800958a:	d904      	bls.n	8009596 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800958c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009590:	3301      	adds	r3, #1
 8009592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	7d1b      	ldrb	r3, [r3, #20]
 800959a:	2b09      	cmp	r3, #9
 800959c:	d10b      	bne.n	80095b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800959e:	4b59      	ldr	r3, [pc, #356]	; (8009704 <tcp_slowtmr+0x584>)
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	6a1b      	ldr	r3, [r3, #32]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2bf0      	cmp	r3, #240	; 0xf0
 80095aa:	d904      	bls.n	80095b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095b0:	3301      	adds	r3, #1
 80095b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80095b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d060      	beq.n	8009680 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80095c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095c8:	f000 fbfc 	bl	8009dc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d010      	beq.n	80095f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80095d2:	4b4f      	ldr	r3, [pc, #316]	; (8009710 <tcp_slowtmr+0x590>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095d8:	429a      	cmp	r2, r3
 80095da:	d106      	bne.n	80095ea <tcp_slowtmr+0x46a>
 80095dc:	4b4d      	ldr	r3, [pc, #308]	; (8009714 <tcp_slowtmr+0x594>)
 80095de:	f240 526d 	movw	r2, #1389	; 0x56d
 80095e2:	494d      	ldr	r1, [pc, #308]	; (8009718 <tcp_slowtmr+0x598>)
 80095e4:	484d      	ldr	r0, [pc, #308]	; (800971c <tcp_slowtmr+0x59c>)
 80095e6:	f009 fcef 	bl	8012fc8 <iprintf>
        prev->next = pcb->next;
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	60da      	str	r2, [r3, #12]
 80095f2:	e00f      	b.n	8009614 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80095f4:	4b46      	ldr	r3, [pc, #280]	; (8009710 <tcp_slowtmr+0x590>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d006      	beq.n	800960c <tcp_slowtmr+0x48c>
 80095fe:	4b45      	ldr	r3, [pc, #276]	; (8009714 <tcp_slowtmr+0x594>)
 8009600:	f240 5271 	movw	r2, #1393	; 0x571
 8009604:	4946      	ldr	r1, [pc, #280]	; (8009720 <tcp_slowtmr+0x5a0>)
 8009606:	4845      	ldr	r0, [pc, #276]	; (800971c <tcp_slowtmr+0x59c>)
 8009608:	f009 fcde 	bl	8012fc8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	4a3f      	ldr	r2, [pc, #252]	; (8009710 <tcp_slowtmr+0x590>)
 8009612:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009618:	2b00      	cmp	r3, #0
 800961a:	d013      	beq.n	8009644 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009624:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	3304      	adds	r3, #4
 800962a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800962c:	8ad2      	ldrh	r2, [r2, #22]
 800962e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009630:	8b09      	ldrh	r1, [r1, #24]
 8009632:	9102      	str	r1, [sp, #8]
 8009634:	9201      	str	r2, [sp, #4]
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	462b      	mov	r3, r5
 800963a:	4622      	mov	r2, r4
 800963c:	4601      	mov	r1, r0
 800963e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009640:	f004 f988 	bl	800d954 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800964a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964c:	7d1b      	ldrb	r3, [r3, #20]
 800964e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800965a:	6838      	ldr	r0, [r7, #0]
 800965c:	f7ff f9f2 	bl	8008a44 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009660:	4b30      	ldr	r3, [pc, #192]	; (8009724 <tcp_slowtmr+0x5a4>)
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <tcp_slowtmr+0x4f6>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f06f 010c 	mvn.w	r1, #12
 8009672:	68b8      	ldr	r0, [r7, #8]
 8009674:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009676:	4b2b      	ldr	r3, [pc, #172]	; (8009724 <tcp_slowtmr+0x5a4>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d037      	beq.n	80096ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800967e:	e590      	b.n	80091a2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	7f1b      	ldrb	r3, [r3, #28]
 800968e:	3301      	adds	r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	7f1a      	ldrb	r2, [r3, #28]
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	7f5b      	ldrb	r3, [r3, #29]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d325      	bcc.n	80096ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	2200      	movs	r2, #0
 80096a6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80096a8:	4b1e      	ldr	r3, [pc, #120]	; (8009724 <tcp_slowtmr+0x5a4>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80096ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <tcp_slowtmr+0x550>
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096c0:	6912      	ldr	r2, [r2, #16]
 80096c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	4603      	mov	r3, r0
 80096ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80096ce:	e002      	b.n	80096d6 <tcp_slowtmr+0x556>
 80096d0:	2300      	movs	r3, #0
 80096d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80096d6:	4b13      	ldr	r3, [pc, #76]	; (8009724 <tcp_slowtmr+0x5a4>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d000      	beq.n	80096e0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80096de:	e560      	b.n	80091a2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80096e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80096e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ea:	f003 fb7f 	bl	800cdec <tcp_output>
  while (pcb != NULL) {
 80096ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f47f ad5c 	bne.w	80091ae <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80096fa:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <tcp_slowtmr+0x5a8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009700:	e067      	b.n	80097d2 <tcp_slowtmr+0x652>
 8009702:	bf00      	nop
 8009704:	200108a8 	.word	0x200108a8
 8009708:	10624dd3 	.word	0x10624dd3
 800970c:	000124f8 	.word	0x000124f8
 8009710:	200108b4 	.word	0x200108b4
 8009714:	08014aec 	.word	0x08014aec
 8009718:	08014f24 	.word	0x08014f24
 800971c:	08014b30 	.word	0x08014b30
 8009720:	08014f50 	.word	0x08014f50
 8009724:	200108bc 	.word	0x200108bc
 8009728:	200108b8 	.word	0x200108b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	7d1b      	ldrb	r3, [r3, #20]
 8009730:	2b0a      	cmp	r3, #10
 8009732:	d006      	beq.n	8009742 <tcp_slowtmr+0x5c2>
 8009734:	4b2b      	ldr	r3, [pc, #172]	; (80097e4 <tcp_slowtmr+0x664>)
 8009736:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800973a:	492b      	ldr	r1, [pc, #172]	; (80097e8 <tcp_slowtmr+0x668>)
 800973c:	482b      	ldr	r0, [pc, #172]	; (80097ec <tcp_slowtmr+0x66c>)
 800973e:	f009 fc43 	bl	8012fc8 <iprintf>
    pcb_remove = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009748:	4b29      	ldr	r3, [pc, #164]	; (80097f0 <tcp_slowtmr+0x670>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2bf0      	cmp	r3, #240	; 0xf0
 8009754:	d904      	bls.n	8009760 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800975a:	3301      	adds	r3, #1
 800975c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009764:	2b00      	cmp	r3, #0
 8009766:	d02f      	beq.n	80097c8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800976a:	f000 fb2b 	bl	8009dc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009774:	4b1f      	ldr	r3, [pc, #124]	; (80097f4 <tcp_slowtmr+0x674>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800977a:	429a      	cmp	r2, r3
 800977c:	d106      	bne.n	800978c <tcp_slowtmr+0x60c>
 800977e:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <tcp_slowtmr+0x664>)
 8009780:	f240 52af 	movw	r2, #1455	; 0x5af
 8009784:	491c      	ldr	r1, [pc, #112]	; (80097f8 <tcp_slowtmr+0x678>)
 8009786:	4819      	ldr	r0, [pc, #100]	; (80097ec <tcp_slowtmr+0x66c>)
 8009788:	f009 fc1e 	bl	8012fc8 <iprintf>
        prev->next = pcb->next;
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	60da      	str	r2, [r3, #12]
 8009794:	e00f      	b.n	80097b6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009796:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <tcp_slowtmr+0x674>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800979c:	429a      	cmp	r2, r3
 800979e:	d006      	beq.n	80097ae <tcp_slowtmr+0x62e>
 80097a0:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <tcp_slowtmr+0x664>)
 80097a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80097a6:	4915      	ldr	r1, [pc, #84]	; (80097fc <tcp_slowtmr+0x67c>)
 80097a8:	4810      	ldr	r0, [pc, #64]	; (80097ec <tcp_slowtmr+0x66c>)
 80097aa:	f009 fc0d 	bl	8012fc8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	4a10      	ldr	r2, [pc, #64]	; (80097f4 <tcp_slowtmr+0x674>)
 80097b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80097c0:	69f8      	ldr	r0, [r7, #28]
 80097c2:	f7ff f93f 	bl	8008a44 <tcp_free>
 80097c6:	e004      	b.n	80097d2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80097d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1a9      	bne.n	800972c <tcp_slowtmr+0x5ac>
    }
  }
}
 80097d8:	bf00      	nop
 80097da:	bf00      	nop
 80097dc:	3730      	adds	r7, #48	; 0x30
 80097de:	46bd      	mov	sp, r7
 80097e0:	bdb0      	pop	{r4, r5, r7, pc}
 80097e2:	bf00      	nop
 80097e4:	08014aec 	.word	0x08014aec
 80097e8:	08014f7c 	.word	0x08014f7c
 80097ec:	08014b30 	.word	0x08014b30
 80097f0:	200108a8 	.word	0x200108a8
 80097f4:	200108b8 	.word	0x200108b8
 80097f8:	08014fac 	.word	0x08014fac
 80097fc:	08014fd4 	.word	0x08014fd4

08009800 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009806:	4b2d      	ldr	r3, [pc, #180]	; (80098bc <tcp_fasttmr+0xbc>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	3301      	adds	r3, #1
 800980c:	b2da      	uxtb	r2, r3
 800980e:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <tcp_fasttmr+0xbc>)
 8009810:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009812:	4b2b      	ldr	r3, [pc, #172]	; (80098c0 <tcp_fasttmr+0xc0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009818:	e048      	b.n	80098ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	7f9a      	ldrb	r2, [r3, #30]
 800981e:	4b27      	ldr	r3, [pc, #156]	; (80098bc <tcp_fasttmr+0xbc>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d03f      	beq.n	80098a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009826:	4b25      	ldr	r3, [pc, #148]	; (80098bc <tcp_fasttmr+0xbc>)
 8009828:	781a      	ldrb	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8b5b      	ldrh	r3, [r3, #26]
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b00      	cmp	r3, #0
 8009838:	d010      	beq.n	800985c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	8b5b      	ldrh	r3, [r3, #26]
 800983e:	f043 0302 	orr.w	r3, r3, #2
 8009842:	b29a      	uxth	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f003 facf 	bl	800cdec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	8b5b      	ldrh	r3, [r3, #26]
 8009852:	f023 0303 	bic.w	r3, r3, #3
 8009856:	b29a      	uxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8b5b      	ldrh	r3, [r3, #26]
 8009860:	f003 0308 	and.w	r3, r3, #8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d009      	beq.n	800987c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	8b5b      	ldrh	r3, [r3, #26]
 800986c:	f023 0308 	bic.w	r3, r3, #8
 8009870:	b29a      	uxth	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff fa78 	bl	8008d6c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <tcp_fasttmr+0xc4>)
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f819 	bl	80098c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009896:	4b0b      	ldr	r3, [pc, #44]	; (80098c4 <tcp_fasttmr+0xc4>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d000      	beq.n	80098a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800989e:	e7b8      	b.n	8009812 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	607b      	str	r3, [r7, #4]
 80098a4:	e002      	b.n	80098ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1b3      	bne.n	800981a <tcp_fasttmr+0x1a>
    }
  }
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	200108be 	.word	0x200108be
 80098c0:	200108b4 	.word	0x200108b4
 80098c4:	200108bc 	.word	0x200108bc

080098c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <tcp_process_refused_data+0x22>
 80098d6:	4b37      	ldr	r3, [pc, #220]	; (80099b4 <tcp_process_refused_data+0xec>)
 80098d8:	f240 6209 	movw	r2, #1545	; 0x609
 80098dc:	4936      	ldr	r1, [pc, #216]	; (80099b8 <tcp_process_refused_data+0xf0>)
 80098de:	4837      	ldr	r0, [pc, #220]	; (80099bc <tcp_process_refused_data+0xf4>)
 80098e0:	f009 fb72 	bl	8012fc8 <iprintf>
 80098e4:	f06f 030f 	mvn.w	r3, #15
 80098e8:	e060      	b.n	80099ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ee:	7b5b      	ldrb	r3, [r3, #13]
 80098f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <tcp_process_refused_data+0x58>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6918      	ldr	r0, [r3, #16]
 8009912:	2300      	movs	r3, #0
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	47a0      	blx	r4
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	e007      	b.n	8009930 <tcp_process_refused_data+0x68>
 8009920:	2300      	movs	r3, #0
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	6879      	ldr	r1, [r7, #4]
 8009926:	2000      	movs	r0, #0
 8009928:	f000 f8a4 	bl	8009a74 <tcp_recv_null>
 800992c:	4603      	mov	r3, r0
 800992e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d12a      	bne.n	800998e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	f003 0320 	and.w	r3, r3, #32
 800993e:	2b00      	cmp	r3, #0
 8009940:	d033      	beq.n	80099aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009946:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800994a:	d005      	beq.n	8009958 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009950:	3301      	adds	r3, #1
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <tcp_process_refused_data+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6918      	ldr	r0, [r3, #16]
 800996c:	2300      	movs	r3, #0
 800996e:	2200      	movs	r2, #0
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	47a0      	blx	r4
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
 8009978:	e001      	b.n	800997e <tcp_process_refused_data+0xb6>
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800997e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009982:	f113 0f0d 	cmn.w	r3, #13
 8009986:	d110      	bne.n	80099aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009988:	f06f 030c 	mvn.w	r3, #12
 800998c:	e00e      	b.n	80099ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800998e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009992:	f113 0f0d 	cmn.w	r3, #13
 8009996:	d102      	bne.n	800999e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009998:	f06f 030c 	mvn.w	r3, #12
 800999c:	e006      	b.n	80099ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80099a4:	f06f 0304 	mvn.w	r3, #4
 80099a8:	e000      	b.n	80099ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd90      	pop	{r4, r7, pc}
 80099b4:	08014aec 	.word	0x08014aec
 80099b8:	08014ffc 	.word	0x08014ffc
 80099bc:	08014b30 	.word	0x08014b30

080099c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80099c8:	e007      	b.n	80099da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f80a 	bl	80099ea <tcp_seg_free>
    seg = next;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1f4      	bne.n	80099ca <tcp_segs_free+0xa>
  }
}
 80099e0:	bf00      	nop
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00c      	beq.n	8009a12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fd61 	bl	80084cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	2003      	movs	r0, #3
 8009a0e:	f7fd ff15 	bl	800783c <memp_free>
  }
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d106      	bne.n	8009a38 <tcp_seg_copy+0x1c>
 8009a2a:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <tcp_seg_copy+0x4c>)
 8009a2c:	f240 6282 	movw	r2, #1666	; 0x682
 8009a30:	490e      	ldr	r1, [pc, #56]	; (8009a6c <tcp_seg_copy+0x50>)
 8009a32:	480f      	ldr	r0, [pc, #60]	; (8009a70 <tcp_seg_copy+0x54>)
 8009a34:	f009 fac8 	bl	8012fc8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009a38:	2003      	movs	r0, #3
 8009a3a:	f7fd fe89 	bl	8007750 <memp_malloc>
 8009a3e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <tcp_seg_copy+0x2e>
    return NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	e00a      	b.n	8009a60 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009a4a:	2210      	movs	r2, #16
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f009 fbea 	bl	8013228 <memcpy>
  pbuf_ref(cseg->p);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fddd 	bl	8008618 <pbuf_ref>
  return cseg;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	08014aec 	.word	0x08014aec
 8009a6c:	08015040 	.word	0x08015040
 8009a70:	08014b30 	.word	0x08014b30

08009a74 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <tcp_recv_null+0x28>
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <tcp_recv_null+0x60>)
 8009a8a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009a8e:	4912      	ldr	r1, [pc, #72]	; (8009ad8 <tcp_recv_null+0x64>)
 8009a90:	4812      	ldr	r0, [pc, #72]	; (8009adc <tcp_recv_null+0x68>)
 8009a92:	f009 fa99 	bl	8012fc8 <iprintf>
 8009a96:	f06f 030f 	mvn.w	r3, #15
 8009a9a:	e016      	b.n	8009aca <tcp_recv_null+0x56>

  if (p != NULL) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d009      	beq.n	8009ab6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	891b      	ldrh	r3, [r3, #8]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	68b8      	ldr	r0, [r7, #8]
 8009aaa:	f7ff fb19 	bl	80090e0 <tcp_recved>
    pbuf_free(p);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe fd0c 	bl	80084cc <pbuf_free>
 8009ab4:	e008      	b.n	8009ac8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d104      	bne.n	8009ac8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009abe:	68b8      	ldr	r0, [r7, #8]
 8009ac0:	f7ff f9be 	bl	8008e40 <tcp_close>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	e000      	b.n	8009aca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	08014aec 	.word	0x08014aec
 8009ad8:	0801505c 	.word	0x0801505c
 8009adc:	08014b30 	.word	0x08014b30

08009ae0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	db01      	blt.n	8009af6 <tcp_kill_prio+0x16>
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	e000      	b.n	8009af8 <tcp_kill_prio+0x18>
 8009af6:	237f      	movs	r3, #127	; 0x7f
 8009af8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d034      	beq.n	8009b6a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b0e:	4b19      	ldr	r3, [pc, #100]	; (8009b74 <tcp_kill_prio+0x94>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	e01f      	b.n	8009b56 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	7d5b      	ldrb	r3, [r3, #21]
 8009b1a:	7afa      	ldrb	r2, [r7, #11]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d80c      	bhi.n	8009b3a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009b24:	7afa      	ldrb	r2, [r7, #11]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d112      	bne.n	8009b50 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009b2a:	4b13      	ldr	r3, [pc, #76]	; (8009b78 <tcp_kill_prio+0x98>)
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d80a      	bhi.n	8009b50 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <tcp_kill_prio+0x98>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	7d5b      	ldrb	r3, [r3, #21]
 8009b4e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1dc      	bne.n	8009b16 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d004      	beq.n	8009b6c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009b62:	6938      	ldr	r0, [r7, #16]
 8009b64:	f7ff fa56 	bl	8009014 <tcp_abort>
 8009b68:	e000      	b.n	8009b6c <tcp_kill_prio+0x8c>
    return;
 8009b6a:	bf00      	nop
  }
}
 8009b6c:	3718      	adds	r7, #24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200108b4 	.word	0x200108b4
 8009b78:	200108a8 	.word	0x200108a8

08009b7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d009      	beq.n	8009ba0 <tcp_kill_state+0x24>
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	2b09      	cmp	r3, #9
 8009b90:	d006      	beq.n	8009ba0 <tcp_kill_state+0x24>
 8009b92:	4b1a      	ldr	r3, [pc, #104]	; (8009bfc <tcp_kill_state+0x80>)
 8009b94:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009b98:	4919      	ldr	r1, [pc, #100]	; (8009c00 <tcp_kill_state+0x84>)
 8009b9a:	481a      	ldr	r0, [pc, #104]	; (8009c04 <tcp_kill_state+0x88>)
 8009b9c:	f009 fa14 	bl	8012fc8 <iprintf>

  inactivity = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ba8:	4b17      	ldr	r3, [pc, #92]	; (8009c08 <tcp_kill_state+0x8c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	e017      	b.n	8009be0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	7d1b      	ldrb	r3, [r3, #20]
 8009bb4:	79fa      	ldrb	r2, [r7, #7]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d10f      	bne.n	8009bda <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009bba:	4b14      	ldr	r3, [pc, #80]	; (8009c0c <tcp_kill_state+0x90>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d807      	bhi.n	8009bda <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009bca:	4b10      	ldr	r3, [pc, #64]	; (8009c0c <tcp_kill_state+0x90>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e4      	bne.n	8009bb0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009bec:	2100      	movs	r1, #0
 8009bee:	6938      	ldr	r0, [r7, #16]
 8009bf0:	f7ff f952 	bl	8008e98 <tcp_abandon>
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	08014aec 	.word	0x08014aec
 8009c00:	08015078 	.word	0x08015078
 8009c04:	08014b30 	.word	0x08014b30
 8009c08:	200108b4 	.word	0x200108b4
 8009c0c:	200108a8 	.word	0x200108a8

08009c10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009c16:	2300      	movs	r3, #0
 8009c18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <tcp_kill_timewait+0x58>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e012      	b.n	8009c4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <tcp_kill_timewait+0x5c>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d807      	bhi.n	8009c46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <tcp_kill_timewait+0x5c>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1e9      	bne.n	8009c26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009c58:	68b8      	ldr	r0, [r7, #8]
 8009c5a:	f7ff f9db 	bl	8009014 <tcp_abort>
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	200108b8 	.word	0x200108b8
 8009c6c:	200108a8 	.word	0x200108a8

08009c70 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <tcp_handle_closepend+0x48>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009c7c:	e014      	b.n	8009ca8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	8b5b      	ldrh	r3, [r3, #26]
 8009c88:	f003 0308 	and.w	r3, r3, #8
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8b5b      	ldrh	r3, [r3, #26]
 8009c94:	f023 0308 	bic.w	r3, r3, #8
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff f864 	bl	8008d6c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e7      	bne.n	8009c7e <tcp_handle_closepend+0xe>
  }
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	200108b4 	.word	0x200108b4

08009cbc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	f7fd fd42 	bl	8007750 <memp_malloc>
 8009ccc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d126      	bne.n	8009d22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009cd4:	f7ff ffcc 	bl	8009c70 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009cd8:	f7ff ff9a 	bl	8009c10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009cdc:	2001      	movs	r0, #1
 8009cde:	f7fd fd37 	bl	8007750 <memp_malloc>
 8009ce2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d11b      	bne.n	8009d22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009cea:	2009      	movs	r0, #9
 8009cec:	f7ff ff46 	bl	8009b7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009cf0:	2001      	movs	r0, #1
 8009cf2:	f7fd fd2d 	bl	8007750 <memp_malloc>
 8009cf6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d111      	bne.n	8009d22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009cfe:	2008      	movs	r0, #8
 8009d00:	f7ff ff3c 	bl	8009b7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d04:	2001      	movs	r0, #1
 8009d06:	f7fd fd23 	bl	8007750 <memp_malloc>
 8009d0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d107      	bne.n	8009d22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff fee3 	bl	8009ae0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	f7fd fd18 	bl	8007750 <memp_malloc>
 8009d20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d03f      	beq.n	8009da8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009d28:	229c      	movs	r2, #156	; 0x9c
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f009 f9b0 	bl	8013092 <memset>
    pcb->prio = prio;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	79fa      	ldrb	r2, [r7, #7]
 8009d36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009d3e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009d48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009d5e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2206      	movs	r2, #6
 8009d64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d74:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <tcp_alloc+0xf8>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009d86:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <tcp_alloc+0xfc>)
 8009d88:	781a      	ldrb	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009d94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <tcp_alloc+0x100>)
 8009d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a07      	ldr	r2, [pc, #28]	; (8009dc0 <tcp_alloc+0x104>)
 8009da4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009da8:	68fb      	ldr	r3, [r7, #12]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	200108a8 	.word	0x200108a8
 8009db8:	200108be 	.word	0x200108be
 8009dbc:	08009a75 	.word	0x08009a75
 8009dc0:	006ddd00 	.word	0x006ddd00

08009dc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d107      	bne.n	8009de2 <tcp_pcb_purge+0x1e>
 8009dd2:	4b21      	ldr	r3, [pc, #132]	; (8009e58 <tcp_pcb_purge+0x94>)
 8009dd4:	f640 0251 	movw	r2, #2129	; 0x851
 8009dd8:	4920      	ldr	r1, [pc, #128]	; (8009e5c <tcp_pcb_purge+0x98>)
 8009dda:	4821      	ldr	r0, [pc, #132]	; (8009e60 <tcp_pcb_purge+0x9c>)
 8009ddc:	f009 f8f4 	bl	8012fc8 <iprintf>
 8009de0:	e037      	b.n	8009e52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7d1b      	ldrb	r3, [r3, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d033      	beq.n	8009e52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009dee:	2b0a      	cmp	r3, #10
 8009df0:	d02f      	beq.n	8009e52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d02b      	beq.n	8009e52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fb60 	bl	80084cc <pbuf_free>
      pcb->refused_data = NULL;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d002      	beq.n	8009e20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f986 	bl	800a12c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fdc7 	bl	80099c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7ff fdc2 	bl	80099c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	66da      	str	r2, [r3, #108]	; 0x6c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	08014aec 	.word	0x08014aec
 8009e5c:	08015138 	.word	0x08015138
 8009e60:	08014b30 	.word	0x08014b30

08009e64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <tcp_pcb_remove+0x1e>
 8009e74:	4b3e      	ldr	r3, [pc, #248]	; (8009f70 <tcp_pcb_remove+0x10c>)
 8009e76:	f640 0283 	movw	r2, #2179	; 0x883
 8009e7a:	493e      	ldr	r1, [pc, #248]	; (8009f74 <tcp_pcb_remove+0x110>)
 8009e7c:	483e      	ldr	r0, [pc, #248]	; (8009f78 <tcp_pcb_remove+0x114>)
 8009e7e:	f009 f8a3 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d106      	bne.n	8009e96 <tcp_pcb_remove+0x32>
 8009e88:	4b39      	ldr	r3, [pc, #228]	; (8009f70 <tcp_pcb_remove+0x10c>)
 8009e8a:	f640 0284 	movw	r2, #2180	; 0x884
 8009e8e:	493b      	ldr	r1, [pc, #236]	; (8009f7c <tcp_pcb_remove+0x118>)
 8009e90:	4839      	ldr	r0, [pc, #228]	; (8009f78 <tcp_pcb_remove+0x114>)
 8009e92:	f009 f899 	bl	8012fc8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d105      	bne.n	8009eac <tcp_pcb_remove+0x48>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e013      	b.n	8009ed4 <tcp_pcb_remove+0x70>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e00c      	b.n	8009ece <tcp_pcb_remove+0x6a>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d104      	bne.n	8009ec8 <tcp_pcb_remove+0x64>
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	60da      	str	r2, [r3, #12]
 8009ec6:	e005      	b.n	8009ed4 <tcp_pcb_remove+0x70>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1ef      	bne.n	8009eb4 <tcp_pcb_remove+0x50>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009eda:	6838      	ldr	r0, [r7, #0]
 8009edc:	f7ff ff72 	bl	8009dc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	7d1b      	ldrb	r3, [r3, #20]
 8009ee4:	2b0a      	cmp	r3, #10
 8009ee6:	d013      	beq.n	8009f10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d00f      	beq.n	8009f10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	8b5b      	ldrh	r3, [r3, #26]
 8009ef4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d009      	beq.n	8009f10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	8b5b      	ldrh	r3, [r3, #26]
 8009f00:	f043 0302 	orr.w	r3, r3, #2
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009f0a:	6838      	ldr	r0, [r7, #0]
 8009f0c:	f002 ff6e 	bl	800cdec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	7d1b      	ldrb	r3, [r3, #20]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d020      	beq.n	8009f5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <tcp_pcb_remove+0xca>
 8009f20:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <tcp_pcb_remove+0x10c>)
 8009f22:	f640 0293 	movw	r2, #2195	; 0x893
 8009f26:	4916      	ldr	r1, [pc, #88]	; (8009f80 <tcp_pcb_remove+0x11c>)
 8009f28:	4813      	ldr	r0, [pc, #76]	; (8009f78 <tcp_pcb_remove+0x114>)
 8009f2a:	f009 f84d 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d006      	beq.n	8009f44 <tcp_pcb_remove+0xe0>
 8009f36:	4b0e      	ldr	r3, [pc, #56]	; (8009f70 <tcp_pcb_remove+0x10c>)
 8009f38:	f640 0294 	movw	r2, #2196	; 0x894
 8009f3c:	4911      	ldr	r1, [pc, #68]	; (8009f84 <tcp_pcb_remove+0x120>)
 8009f3e:	480e      	ldr	r0, [pc, #56]	; (8009f78 <tcp_pcb_remove+0x114>)
 8009f40:	f009 f842 	bl	8012fc8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <tcp_pcb_remove+0xf6>
 8009f4c:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <tcp_pcb_remove+0x10c>)
 8009f4e:	f640 0296 	movw	r2, #2198	; 0x896
 8009f52:	490d      	ldr	r1, [pc, #52]	; (8009f88 <tcp_pcb_remove+0x124>)
 8009f54:	4808      	ldr	r0, [pc, #32]	; (8009f78 <tcp_pcb_remove+0x114>)
 8009f56:	f009 f837 	bl	8012fc8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2200      	movs	r2, #0
 8009f64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	08014aec 	.word	0x08014aec
 8009f74:	08015154 	.word	0x08015154
 8009f78:	08014b30 	.word	0x08014b30
 8009f7c:	08015170 	.word	0x08015170
 8009f80:	08015190 	.word	0x08015190
 8009f84:	080151a8 	.word	0x080151a8
 8009f88:	080151c4 	.word	0x080151c4

08009f8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <tcp_next_iss+0x1c>
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <tcp_next_iss+0x38>)
 8009f9c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009fa0:	4909      	ldr	r1, [pc, #36]	; (8009fc8 <tcp_next_iss+0x3c>)
 8009fa2:	480a      	ldr	r0, [pc, #40]	; (8009fcc <tcp_next_iss+0x40>)
 8009fa4:	f009 f810 	bl	8012fc8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009fa8:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <tcp_next_iss+0x44>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <tcp_next_iss+0x48>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	4a07      	ldr	r2, [pc, #28]	; (8009fd0 <tcp_next_iss+0x44>)
 8009fb4:	6013      	str	r3, [r2, #0]
  return iss;
 8009fb6:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <tcp_next_iss+0x44>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	08014aec 	.word	0x08014aec
 8009fc8:	080151dc 	.word	0x080151dc
 8009fcc:	08014b30 	.word	0x08014b30
 8009fd0:	20000014 	.word	0x20000014
 8009fd4:	200108a8 	.word	0x200108a8

08009fd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <tcp_eff_send_mss_netif+0x22>
 8009fec:	4b14      	ldr	r3, [pc, #80]	; (800a040 <tcp_eff_send_mss_netif+0x68>)
 8009fee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009ff2:	4914      	ldr	r1, [pc, #80]	; (800a044 <tcp_eff_send_mss_netif+0x6c>)
 8009ff4:	4814      	ldr	r0, [pc, #80]	; (800a048 <tcp_eff_send_mss_netif+0x70>)
 8009ff6:	f008 ffe7 	bl	8012fc8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	e019      	b.n	800a038 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a008:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a00a:	8afb      	ldrh	r3, [r7, #22]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d012      	beq.n	800a036 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a010:	2328      	movs	r3, #40	; 0x28
 800a012:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a014:	8afa      	ldrh	r2, [r7, #22]
 800a016:	8abb      	ldrh	r3, [r7, #20]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d904      	bls.n	800a026 <tcp_eff_send_mss_netif+0x4e>
 800a01c:	8afa      	ldrh	r2, [r7, #22]
 800a01e:	8abb      	ldrh	r3, [r7, #20]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	b29b      	uxth	r3, r3
 800a024:	e000      	b.n	800a028 <tcp_eff_send_mss_netif+0x50>
 800a026:	2300      	movs	r3, #0
 800a028:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a02a:	8a7a      	ldrh	r2, [r7, #18]
 800a02c:	89fb      	ldrh	r3, [r7, #14]
 800a02e:	4293      	cmp	r3, r2
 800a030:	bf28      	it	cs
 800a032:	4613      	movcs	r3, r2
 800a034:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a036:	89fb      	ldrh	r3, [r7, #14]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	08014aec 	.word	0x08014aec
 800a044:	080151f8 	.word	0x080151f8
 800a048:	08014b30 	.word	0x08014b30

0800a04c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d119      	bne.n	800a094 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a060:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a062:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a066:	4910      	ldr	r1, [pc, #64]	; (800a0a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a068:	4810      	ldr	r0, [pc, #64]	; (800a0ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a06a:	f008 ffad 	bl	8012fc8 <iprintf>

  while (pcb != NULL) {
 800a06e:	e011      	b.n	800a094 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d108      	bne.n	800a08e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7fe ffc6 	bl	8009014 <tcp_abort>
      pcb = next;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	e002      	b.n	800a094 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1ea      	bne.n	800a070 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	08014aec 	.word	0x08014aec
 800a0a8:	08015220 	.word	0x08015220
 800a0ac:	08014b30 	.word	0x08014b30

0800a0b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d02a      	beq.n	800a116 <tcp_netif_ip_addr_changed+0x66>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d026      	beq.n	800a116 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a0c8:	4b15      	ldr	r3, [pc, #84]	; (800a120 <tcp_netif_ip_addr_changed+0x70>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff ffbc 	bl	800a04c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a0d4:	4b13      	ldr	r3, [pc, #76]	; (800a124 <tcp_netif_ip_addr_changed+0x74>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff ffb6 	bl	800a04c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d017      	beq.n	800a116 <tcp_netif_ip_addr_changed+0x66>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d013      	beq.n	800a116 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a0ee:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <tcp_netif_ip_addr_changed+0x78>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e00c      	b.n	800a110 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d103      	bne.n	800a10a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1ef      	bne.n	800a0f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200108b4 	.word	0x200108b4
 800a124:	200108ac 	.word	0x200108ac
 800a128:	200108b0 	.word	0x200108b0

0800a12c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d007      	beq.n	800a14c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff fc3d 	bl	80099c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a154:	b590      	push	{r4, r7, lr}
 800a156:	b08d      	sub	sp, #52	; 0x34
 800a158:	af04      	add	r7, sp, #16
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d105      	bne.n	800a170 <tcp_input+0x1c>
 800a164:	4b9b      	ldr	r3, [pc, #620]	; (800a3d4 <tcp_input+0x280>)
 800a166:	2283      	movs	r2, #131	; 0x83
 800a168:	499b      	ldr	r1, [pc, #620]	; (800a3d8 <tcp_input+0x284>)
 800a16a:	489c      	ldr	r0, [pc, #624]	; (800a3dc <tcp_input+0x288>)
 800a16c:	f008 ff2c 	bl	8012fc8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	4a9a      	ldr	r2, [pc, #616]	; (800a3e0 <tcp_input+0x28c>)
 800a176:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	895b      	ldrh	r3, [r3, #10]
 800a17c:	2b13      	cmp	r3, #19
 800a17e:	f240 83d1 	bls.w	800a924 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a182:	4b98      	ldr	r3, [pc, #608]	; (800a3e4 <tcp_input+0x290>)
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	4a97      	ldr	r2, [pc, #604]	; (800a3e4 <tcp_input+0x290>)
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	4611      	mov	r1, r2
 800a18c:	4618      	mov	r0, r3
 800a18e:	f007 fdc1 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	f040 83c7 	bne.w	800a928 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a19a:	4b92      	ldr	r3, [pc, #584]	; (800a3e4 <tcp_input+0x290>)
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a1a2:	2be0      	cmp	r3, #224	; 0xe0
 800a1a4:	f000 83c0 	beq.w	800a928 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a1a8:	4b8d      	ldr	r3, [pc, #564]	; (800a3e0 <tcp_input+0x28c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	899b      	ldrh	r3, [r3, #12]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fc fdf5 	bl	8006da0 <lwip_htons>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	0b1b      	lsrs	r3, r3, #12
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a1c2:	7cbb      	ldrb	r3, [r7, #18]
 800a1c4:	2b13      	cmp	r3, #19
 800a1c6:	f240 83b1 	bls.w	800a92c <tcp_input+0x7d8>
 800a1ca:	7cbb      	ldrb	r3, [r7, #18]
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	891b      	ldrh	r3, [r3, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	f200 83aa 	bhi.w	800a92c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a1d8:	7cbb      	ldrb	r3, [r7, #18]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	3b14      	subs	r3, #20
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	4b81      	ldr	r3, [pc, #516]	; (800a3e8 <tcp_input+0x294>)
 800a1e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a1e4:	4b81      	ldr	r3, [pc, #516]	; (800a3ec <tcp_input+0x298>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	895a      	ldrh	r2, [r3, #10]
 800a1ee:	7cbb      	ldrb	r3, [r7, #18]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d309      	bcc.n	800a20a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a1f6:	4b7c      	ldr	r3, [pc, #496]	; (800a3e8 <tcp_input+0x294>)
 800a1f8:	881a      	ldrh	r2, [r3, #0]
 800a1fa:	4b7d      	ldr	r3, [pc, #500]	; (800a3f0 <tcp_input+0x29c>)
 800a1fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a1fe:	7cbb      	ldrb	r3, [r7, #18]
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7fe f8dc 	bl	80083c0 <pbuf_remove_header>
 800a208:	e04e      	b.n	800a2a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d105      	bne.n	800a21e <tcp_input+0xca>
 800a212:	4b70      	ldr	r3, [pc, #448]	; (800a3d4 <tcp_input+0x280>)
 800a214:	22c2      	movs	r2, #194	; 0xc2
 800a216:	4977      	ldr	r1, [pc, #476]	; (800a3f4 <tcp_input+0x2a0>)
 800a218:	4870      	ldr	r0, [pc, #448]	; (800a3dc <tcp_input+0x288>)
 800a21a:	f008 fed5 	bl	8012fc8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a21e:	2114      	movs	r1, #20
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7fe f8cd 	bl	80083c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	895a      	ldrh	r2, [r3, #10]
 800a22a:	4b71      	ldr	r3, [pc, #452]	; (800a3f0 <tcp_input+0x29c>)
 800a22c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a22e:	4b6e      	ldr	r3, [pc, #440]	; (800a3e8 <tcp_input+0x294>)
 800a230:	881a      	ldrh	r2, [r3, #0]
 800a232:	4b6f      	ldr	r3, [pc, #444]	; (800a3f0 <tcp_input+0x29c>)
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a23a:	4b6d      	ldr	r3, [pc, #436]	; (800a3f0 <tcp_input+0x29c>)
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7fe f8bd 	bl	80083c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	895b      	ldrh	r3, [r3, #10]
 800a24c:	8a3a      	ldrh	r2, [r7, #16]
 800a24e:	429a      	cmp	r2, r3
 800a250:	f200 836e 	bhi.w	800a930 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	4a64      	ldr	r2, [pc, #400]	; (800a3ec <tcp_input+0x298>)
 800a25c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	8a3a      	ldrh	r2, [r7, #16]
 800a264:	4611      	mov	r1, r2
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe f8aa 	bl	80083c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	891a      	ldrh	r2, [r3, #8]
 800a270:	8a3b      	ldrh	r3, [r7, #16]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	b29a      	uxth	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	895b      	ldrh	r3, [r3, #10]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d005      	beq.n	800a28e <tcp_input+0x13a>
 800a282:	4b54      	ldr	r3, [pc, #336]	; (800a3d4 <tcp_input+0x280>)
 800a284:	22df      	movs	r2, #223	; 0xdf
 800a286:	495c      	ldr	r1, [pc, #368]	; (800a3f8 <tcp_input+0x2a4>)
 800a288:	4854      	ldr	r0, [pc, #336]	; (800a3dc <tcp_input+0x288>)
 800a28a:	f008 fe9d 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	891a      	ldrh	r2, [r3, #8]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	891b      	ldrh	r3, [r3, #8]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d005      	beq.n	800a2a8 <tcp_input+0x154>
 800a29c:	4b4d      	ldr	r3, [pc, #308]	; (800a3d4 <tcp_input+0x280>)
 800a29e:	22e0      	movs	r2, #224	; 0xe0
 800a2a0:	4956      	ldr	r1, [pc, #344]	; (800a3fc <tcp_input+0x2a8>)
 800a2a2:	484e      	ldr	r0, [pc, #312]	; (800a3dc <tcp_input+0x288>)
 800a2a4:	f008 fe90 	bl	8012fc8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a2a8:	4b4d      	ldr	r3, [pc, #308]	; (800a3e0 <tcp_input+0x28c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	881b      	ldrh	r3, [r3, #0]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4a4b      	ldr	r2, [pc, #300]	; (800a3e0 <tcp_input+0x28c>)
 800a2b2:	6814      	ldr	r4, [r2, #0]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fc fd73 	bl	8006da0 <lwip_htons>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a2be:	4b48      	ldr	r3, [pc, #288]	; (800a3e0 <tcp_input+0x28c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	885b      	ldrh	r3, [r3, #2]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	4a46      	ldr	r2, [pc, #280]	; (800a3e0 <tcp_input+0x28c>)
 800a2c8:	6814      	ldr	r4, [r2, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fc fd68 	bl	8006da0 <lwip_htons>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a2d4:	4b42      	ldr	r3, [pc, #264]	; (800a3e0 <tcp_input+0x28c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	4a41      	ldr	r2, [pc, #260]	; (800a3e0 <tcp_input+0x28c>)
 800a2dc:	6814      	ldr	r4, [r2, #0]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fc fd73 	bl	8006dca <lwip_htonl>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	6863      	ldr	r3, [r4, #4]
 800a2ea:	4a45      	ldr	r2, [pc, #276]	; (800a400 <tcp_input+0x2ac>)
 800a2ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a2ee:	4b3c      	ldr	r3, [pc, #240]	; (800a3e0 <tcp_input+0x28c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	4a3a      	ldr	r2, [pc, #232]	; (800a3e0 <tcp_input+0x28c>)
 800a2f6:	6814      	ldr	r4, [r2, #0]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fc fd66 	bl	8006dca <lwip_htonl>
 800a2fe:	4603      	mov	r3, r0
 800a300:	60a3      	str	r3, [r4, #8]
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	4a3f      	ldr	r2, [pc, #252]	; (800a404 <tcp_input+0x2b0>)
 800a306:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a308:	4b35      	ldr	r3, [pc, #212]	; (800a3e0 <tcp_input+0x28c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	89db      	ldrh	r3, [r3, #14]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4a33      	ldr	r2, [pc, #204]	; (800a3e0 <tcp_input+0x28c>)
 800a312:	6814      	ldr	r4, [r2, #0]
 800a314:	4618      	mov	r0, r3
 800a316:	f7fc fd43 	bl	8006da0 <lwip_htons>
 800a31a:	4603      	mov	r3, r0
 800a31c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a31e:	4b30      	ldr	r3, [pc, #192]	; (800a3e0 <tcp_input+0x28c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	899b      	ldrh	r3, [r3, #12]
 800a324:	b29b      	uxth	r3, r3
 800a326:	4618      	mov	r0, r3
 800a328:	f7fc fd3a 	bl	8006da0 <lwip_htons>
 800a32c:	4603      	mov	r3, r0
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a334:	b2da      	uxtb	r2, r3
 800a336:	4b34      	ldr	r3, [pc, #208]	; (800a408 <tcp_input+0x2b4>)
 800a338:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	891a      	ldrh	r2, [r3, #8]
 800a33e:	4b33      	ldr	r3, [pc, #204]	; (800a40c <tcp_input+0x2b8>)
 800a340:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a342:	4b31      	ldr	r3, [pc, #196]	; (800a408 <tcp_input+0x2b4>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <tcp_input+0x214>
    tcplen++;
 800a34e:	4b2f      	ldr	r3, [pc, #188]	; (800a40c <tcp_input+0x2b8>)
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	b29a      	uxth	r2, r3
 800a356:	4b2d      	ldr	r3, [pc, #180]	; (800a40c <tcp_input+0x2b8>)
 800a358:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	891a      	ldrh	r2, [r3, #8]
 800a35e:	4b2b      	ldr	r3, [pc, #172]	; (800a40c <tcp_input+0x2b8>)
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	f200 82e6 	bhi.w	800a934 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a36c:	4b28      	ldr	r3, [pc, #160]	; (800a410 <tcp_input+0x2bc>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	61fb      	str	r3, [r7, #28]
 800a372:	e09d      	b.n	800a4b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	7d1b      	ldrb	r3, [r3, #20]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d105      	bne.n	800a388 <tcp_input+0x234>
 800a37c:	4b15      	ldr	r3, [pc, #84]	; (800a3d4 <tcp_input+0x280>)
 800a37e:	22fb      	movs	r2, #251	; 0xfb
 800a380:	4924      	ldr	r1, [pc, #144]	; (800a414 <tcp_input+0x2c0>)
 800a382:	4816      	ldr	r0, [pc, #88]	; (800a3dc <tcp_input+0x288>)
 800a384:	f008 fe20 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	7d1b      	ldrb	r3, [r3, #20]
 800a38c:	2b0a      	cmp	r3, #10
 800a38e:	d105      	bne.n	800a39c <tcp_input+0x248>
 800a390:	4b10      	ldr	r3, [pc, #64]	; (800a3d4 <tcp_input+0x280>)
 800a392:	22fc      	movs	r2, #252	; 0xfc
 800a394:	4920      	ldr	r1, [pc, #128]	; (800a418 <tcp_input+0x2c4>)
 800a396:	4811      	ldr	r0, [pc, #68]	; (800a3dc <tcp_input+0x288>)
 800a398:	f008 fe16 	bl	8012fc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d105      	bne.n	800a3b0 <tcp_input+0x25c>
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <tcp_input+0x280>)
 800a3a6:	22fd      	movs	r2, #253	; 0xfd
 800a3a8:	491c      	ldr	r1, [pc, #112]	; (800a41c <tcp_input+0x2c8>)
 800a3aa:	480c      	ldr	r0, [pc, #48]	; (800a3dc <tcp_input+0x288>)
 800a3ac:	f008 fe0c 	bl	8012fc8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	7a1b      	ldrb	r3, [r3, #8]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d033      	beq.n	800a420 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	7a1a      	ldrb	r2, [r3, #8]
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <tcp_input+0x290>)
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d029      	beq.n	800a420 <tcp_input+0x2cc>
      prev = pcb;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	61bb      	str	r3, [r7, #24]
      continue;
 800a3d0:	e06b      	b.n	800a4aa <tcp_input+0x356>
 800a3d2:	bf00      	nop
 800a3d4:	08015254 	.word	0x08015254
 800a3d8:	08015288 	.word	0x08015288
 800a3dc:	080152a0 	.word	0x080152a0
 800a3e0:	200108d0 	.word	0x200108d0
 800a3e4:	2000d134 	.word	0x2000d134
 800a3e8:	200108d4 	.word	0x200108d4
 800a3ec:	200108d8 	.word	0x200108d8
 800a3f0:	200108d6 	.word	0x200108d6
 800a3f4:	080152c8 	.word	0x080152c8
 800a3f8:	080152d8 	.word	0x080152d8
 800a3fc:	080152e4 	.word	0x080152e4
 800a400:	200108e0 	.word	0x200108e0
 800a404:	200108e4 	.word	0x200108e4
 800a408:	200108ec 	.word	0x200108ec
 800a40c:	200108ea 	.word	0x200108ea
 800a410:	200108b4 	.word	0x200108b4
 800a414:	08015304 	.word	0x08015304
 800a418:	0801532c 	.word	0x0801532c
 800a41c:	08015358 	.word	0x08015358
    }

    if (pcb->remote_port == tcphdr->src &&
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	8b1a      	ldrh	r2, [r3, #24]
 800a424:	4b72      	ldr	r3, [pc, #456]	; (800a5f0 <tcp_input+0x49c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d13a      	bne.n	800a4a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	8ada      	ldrh	r2, [r3, #22]
 800a434:	4b6e      	ldr	r3, [pc, #440]	; (800a5f0 <tcp_input+0x49c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	885b      	ldrh	r3, [r3, #2]
 800a43a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d132      	bne.n	800a4a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	4b6b      	ldr	r3, [pc, #428]	; (800a5f4 <tcp_input+0x4a0>)
 800a446:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a448:	429a      	cmp	r2, r3
 800a44a:	d12c      	bne.n	800a4a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	4b68      	ldr	r3, [pc, #416]	; (800a5f4 <tcp_input+0x4a0>)
 800a452:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a454:	429a      	cmp	r2, r3
 800a456:	d126      	bne.n	800a4a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	69fa      	ldr	r2, [r7, #28]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d106      	bne.n	800a470 <tcp_input+0x31c>
 800a462:	4b65      	ldr	r3, [pc, #404]	; (800a5f8 <tcp_input+0x4a4>)
 800a464:	f240 120d 	movw	r2, #269	; 0x10d
 800a468:	4964      	ldr	r1, [pc, #400]	; (800a5fc <tcp_input+0x4a8>)
 800a46a:	4865      	ldr	r0, [pc, #404]	; (800a600 <tcp_input+0x4ac>)
 800a46c:	f008 fdac 	bl	8012fc8 <iprintf>
      if (prev != NULL) {
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <tcp_input+0x338>
        prev->next = pcb->next;
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	68da      	ldr	r2, [r3, #12]
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a47e:	4b61      	ldr	r3, [pc, #388]	; (800a604 <tcp_input+0x4b0>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a486:	4a5f      	ldr	r2, [pc, #380]	; (800a604 <tcp_input+0x4b0>)
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	69fa      	ldr	r2, [r7, #28]
 800a492:	429a      	cmp	r2, r3
 800a494:	d111      	bne.n	800a4ba <tcp_input+0x366>
 800a496:	4b58      	ldr	r3, [pc, #352]	; (800a5f8 <tcp_input+0x4a4>)
 800a498:	f240 1215 	movw	r2, #277	; 0x115
 800a49c:	495a      	ldr	r1, [pc, #360]	; (800a608 <tcp_input+0x4b4>)
 800a49e:	4858      	ldr	r0, [pc, #352]	; (800a600 <tcp_input+0x4ac>)
 800a4a0:	f008 fd92 	bl	8012fc8 <iprintf>
      break;
 800a4a4:	e009      	b.n	800a4ba <tcp_input+0x366>
    }
    prev = pcb;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	61fb      	str	r3, [r7, #28]
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f47f af5e 	bne.w	800a374 <tcp_input+0x220>
 800a4b8:	e000      	b.n	800a4bc <tcp_input+0x368>
      break;
 800a4ba:	bf00      	nop
  }

  if (pcb == NULL) {
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f040 80aa 	bne.w	800a618 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4c4:	4b51      	ldr	r3, [pc, #324]	; (800a60c <tcp_input+0x4b8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	61fb      	str	r3, [r7, #28]
 800a4ca:	e03f      	b.n	800a54c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	7d1b      	ldrb	r3, [r3, #20]
 800a4d0:	2b0a      	cmp	r3, #10
 800a4d2:	d006      	beq.n	800a4e2 <tcp_input+0x38e>
 800a4d4:	4b48      	ldr	r3, [pc, #288]	; (800a5f8 <tcp_input+0x4a4>)
 800a4d6:	f240 121f 	movw	r2, #287	; 0x11f
 800a4da:	494d      	ldr	r1, [pc, #308]	; (800a610 <tcp_input+0x4bc>)
 800a4dc:	4848      	ldr	r0, [pc, #288]	; (800a600 <tcp_input+0x4ac>)
 800a4de:	f008 fd73 	bl	8012fc8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	7a1b      	ldrb	r3, [r3, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d009      	beq.n	800a4fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	7a1a      	ldrb	r2, [r3, #8]
 800a4ee:	4b41      	ldr	r3, [pc, #260]	; (800a5f4 <tcp_input+0x4a0>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d122      	bne.n	800a544 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	8b1a      	ldrh	r2, [r3, #24]
 800a502:	4b3b      	ldr	r3, [pc, #236]	; (800a5f0 <tcp_input+0x49c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d11b      	bne.n	800a546 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	8ada      	ldrh	r2, [r3, #22]
 800a512:	4b37      	ldr	r3, [pc, #220]	; (800a5f0 <tcp_input+0x49c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	885b      	ldrh	r3, [r3, #2]
 800a518:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d113      	bne.n	800a546 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	4b34      	ldr	r3, [pc, #208]	; (800a5f4 <tcp_input+0x4a0>)
 800a524:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a526:	429a      	cmp	r2, r3
 800a528:	d10d      	bne.n	800a546 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4b31      	ldr	r3, [pc, #196]	; (800a5f4 <tcp_input+0x4a0>)
 800a530:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a532:	429a      	cmp	r2, r3
 800a534:	d107      	bne.n	800a546 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a536:	69f8      	ldr	r0, [r7, #28]
 800a538:	f000 fb56 	bl	800abe8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7fd ffc5 	bl	80084cc <pbuf_free>
        return;
 800a542:	e1fd      	b.n	800a940 <tcp_input+0x7ec>
        continue;
 800a544:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	61fb      	str	r3, [r7, #28]
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1bc      	bne.n	800a4cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a552:	2300      	movs	r3, #0
 800a554:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a556:	4b2f      	ldr	r3, [pc, #188]	; (800a614 <tcp_input+0x4c0>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	617b      	str	r3, [r7, #20]
 800a55c:	e02a      	b.n	800a5b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	7a1b      	ldrb	r3, [r3, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00c      	beq.n	800a580 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	7a1a      	ldrb	r2, [r3, #8]
 800a56a:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <tcp_input+0x4a0>)
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a572:	3301      	adds	r3, #1
 800a574:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a576:	429a      	cmp	r2, r3
 800a578:	d002      	beq.n	800a580 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	61bb      	str	r3, [r7, #24]
        continue;
 800a57e:	e016      	b.n	800a5ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	8ada      	ldrh	r2, [r3, #22]
 800a584:	4b1a      	ldr	r3, [pc, #104]	; (800a5f0 <tcp_input+0x49c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	885b      	ldrh	r3, [r3, #2]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d10c      	bne.n	800a5aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	4b17      	ldr	r3, [pc, #92]	; (800a5f4 <tcp_input+0x4a0>)
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d00f      	beq.n	800a5bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00d      	beq.n	800a5be <tcp_input+0x46a>
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d009      	beq.n	800a5be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1d1      	bne.n	800a55e <tcp_input+0x40a>
 800a5ba:	e000      	b.n	800a5be <tcp_input+0x46a>
            break;
 800a5bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d029      	beq.n	800a618 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a5d2:	4b10      	ldr	r3, [pc, #64]	; (800a614 <tcp_input+0x4c0>)
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a5da:	4a0e      	ldr	r2, [pc, #56]	; (800a614 <tcp_input+0x4c0>)
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a5e0:	6978      	ldr	r0, [r7, #20]
 800a5e2:	f000 fa03 	bl	800a9ec <tcp_listen_input>
      }
      pbuf_free(p);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fd ff70 	bl	80084cc <pbuf_free>
      return;
 800a5ec:	e1a8      	b.n	800a940 <tcp_input+0x7ec>
 800a5ee:	bf00      	nop
 800a5f0:	200108d0 	.word	0x200108d0
 800a5f4:	2000d134 	.word	0x2000d134
 800a5f8:	08015254 	.word	0x08015254
 800a5fc:	08015380 	.word	0x08015380
 800a600:	080152a0 	.word	0x080152a0
 800a604:	200108b4 	.word	0x200108b4
 800a608:	080153ac 	.word	0x080153ac
 800a60c:	200108b8 	.word	0x200108b8
 800a610:	080153d8 	.word	0x080153d8
 800a614:	200108b0 	.word	0x200108b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8158 	beq.w	800a8d0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a620:	4b95      	ldr	r3, [pc, #596]	; (800a878 <tcp_input+0x724>)
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	891a      	ldrh	r2, [r3, #8]
 800a62a:	4b93      	ldr	r3, [pc, #588]	; (800a878 <tcp_input+0x724>)
 800a62c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a62e:	4a92      	ldr	r2, [pc, #584]	; (800a878 <tcp_input+0x724>)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a634:	4b91      	ldr	r3, [pc, #580]	; (800a87c <tcp_input+0x728>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a8f      	ldr	r2, [pc, #572]	; (800a878 <tcp_input+0x724>)
 800a63a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a63c:	4b90      	ldr	r3, [pc, #576]	; (800a880 <tcp_input+0x72c>)
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a642:	4b90      	ldr	r3, [pc, #576]	; (800a884 <tcp_input+0x730>)
 800a644:	2200      	movs	r2, #0
 800a646:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a648:	4b8f      	ldr	r3, [pc, #572]	; (800a888 <tcp_input+0x734>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a64e:	4b8f      	ldr	r3, [pc, #572]	; (800a88c <tcp_input+0x738>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	f003 0308 	and.w	r3, r3, #8
 800a656:	2b00      	cmp	r3, #0
 800a658:	d006      	beq.n	800a668 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	7b5b      	ldrb	r3, [r3, #13]
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d017      	beq.n	800a6a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a670:	69f8      	ldr	r0, [r7, #28]
 800a672:	f7ff f929 	bl	80098c8 <tcp_process_refused_data>
 800a676:	4603      	mov	r3, r0
 800a678:	f113 0f0d 	cmn.w	r3, #13
 800a67c:	d007      	beq.n	800a68e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00c      	beq.n	800a6a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a686:	4b82      	ldr	r3, [pc, #520]	; (800a890 <tcp_input+0x73c>)
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d008      	beq.n	800a6a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a692:	2b00      	cmp	r3, #0
 800a694:	f040 80e3 	bne.w	800a85e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a698:	69f8      	ldr	r0, [r7, #28]
 800a69a:	f003 f9ad 	bl	800d9f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a69e:	e0de      	b.n	800a85e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a6a0:	4a7c      	ldr	r2, [pc, #496]	; (800a894 <tcp_input+0x740>)
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a6a6:	69f8      	ldr	r0, [r7, #28]
 800a6a8:	f000 fb18 	bl	800acdc <tcp_process>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a6b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a6b4:	f113 0f0d 	cmn.w	r3, #13
 800a6b8:	f000 80d3 	beq.w	800a862 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a6bc:	4b71      	ldr	r3, [pc, #452]	; (800a884 <tcp_input+0x730>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	f003 0308 	and.w	r3, r3, #8
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d015      	beq.n	800a6f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d008      	beq.n	800a6e4 <tcp_input+0x590>
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6d8:	69fa      	ldr	r2, [r7, #28]
 800a6da:	6912      	ldr	r2, [r2, #16]
 800a6dc:	f06f 010d 	mvn.w	r1, #13
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a6e4:	69f9      	ldr	r1, [r7, #28]
 800a6e6:	486c      	ldr	r0, [pc, #432]	; (800a898 <tcp_input+0x744>)
 800a6e8:	f7ff fbbc 	bl	8009e64 <tcp_pcb_remove>
        tcp_free(pcb);
 800a6ec:	69f8      	ldr	r0, [r7, #28]
 800a6ee:	f7fe f9a9 	bl	8008a44 <tcp_free>
 800a6f2:	e0da      	b.n	800a8aa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a6f8:	4b63      	ldr	r3, [pc, #396]	; (800a888 <tcp_input+0x734>)
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01d      	beq.n	800a73c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a700:	4b61      	ldr	r3, [pc, #388]	; (800a888 <tcp_input+0x734>)
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00a      	beq.n	800a726 <tcp_input+0x5d2>
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	6910      	ldr	r0, [r2, #16]
 800a71a:	89fa      	ldrh	r2, [r7, #14]
 800a71c:	69f9      	ldr	r1, [r7, #28]
 800a71e:	4798      	blx	r3
 800a720:	4603      	mov	r3, r0
 800a722:	74fb      	strb	r3, [r7, #19]
 800a724:	e001      	b.n	800a72a <tcp_input+0x5d6>
 800a726:	2300      	movs	r3, #0
 800a728:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a72a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a72e:	f113 0f0d 	cmn.w	r3, #13
 800a732:	f000 8098 	beq.w	800a866 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a736:	4b54      	ldr	r3, [pc, #336]	; (800a888 <tcp_input+0x734>)
 800a738:	2200      	movs	r2, #0
 800a73a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a73c:	69f8      	ldr	r0, [r7, #28]
 800a73e:	f000 f915 	bl	800a96c <tcp_input_delayed_close>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8090 	bne.w	800a86a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a74a:	4b4d      	ldr	r3, [pc, #308]	; (800a880 <tcp_input+0x72c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d041      	beq.n	800a7d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a756:	2b00      	cmp	r3, #0
 800a758:	d006      	beq.n	800a768 <tcp_input+0x614>
 800a75a:	4b50      	ldr	r3, [pc, #320]	; (800a89c <tcp_input+0x748>)
 800a75c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a760:	494f      	ldr	r1, [pc, #316]	; (800a8a0 <tcp_input+0x74c>)
 800a762:	4850      	ldr	r0, [pc, #320]	; (800a8a4 <tcp_input+0x750>)
 800a764:	f008 fc30 	bl	8012fc8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	8b5b      	ldrh	r3, [r3, #26]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a774:	4b42      	ldr	r3, [pc, #264]	; (800a880 <tcp_input+0x72c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd fea7 	bl	80084cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a77e:	69f8      	ldr	r0, [r7, #28]
 800a780:	f7fe fc48 	bl	8009014 <tcp_abort>
            goto aborted;
 800a784:	e091      	b.n	800a8aa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00c      	beq.n	800a7aa <tcp_input+0x656>
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	6918      	ldr	r0, [r3, #16]
 800a79a:	4b39      	ldr	r3, [pc, #228]	; (800a880 <tcp_input+0x72c>)
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	69f9      	ldr	r1, [r7, #28]
 800a7a2:	47a0      	blx	r4
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	74fb      	strb	r3, [r7, #19]
 800a7a8:	e008      	b.n	800a7bc <tcp_input+0x668>
 800a7aa:	4b35      	ldr	r3, [pc, #212]	; (800a880 <tcp_input+0x72c>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	69f9      	ldr	r1, [r7, #28]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	f7ff f95e 	bl	8009a74 <tcp_recv_null>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a7bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7c0:	f113 0f0d 	cmn.w	r3, #13
 800a7c4:	d053      	beq.n	800a86e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a7c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a7ce:	4b2c      	ldr	r3, [pc, #176]	; (800a880 <tcp_input+0x72c>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a7d6:	4b2b      	ldr	r3, [pc, #172]	; (800a884 <tcp_input+0x730>)
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	f003 0320 	and.w	r3, r3, #32
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d030      	beq.n	800a844 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d009      	beq.n	800a7fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ee:	7b5a      	ldrb	r2, [r3, #13]
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7f4:	f042 0220 	orr.w	r2, r2, #32
 800a7f8:	b2d2      	uxtb	r2, r2
 800a7fa:	735a      	strb	r2, [r3, #13]
 800a7fc:	e022      	b.n	800a844 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a802:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a806:	d005      	beq.n	800a814 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a80c:	3301      	adds	r3, #1
 800a80e:	b29a      	uxth	r2, r3
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00b      	beq.n	800a836 <tcp_input+0x6e2>
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	6918      	ldr	r0, [r3, #16]
 800a828:	2300      	movs	r3, #0
 800a82a:	2200      	movs	r2, #0
 800a82c:	69f9      	ldr	r1, [r7, #28]
 800a82e:	47a0      	blx	r4
 800a830:	4603      	mov	r3, r0
 800a832:	74fb      	strb	r3, [r7, #19]
 800a834:	e001      	b.n	800a83a <tcp_input+0x6e6>
 800a836:	2300      	movs	r3, #0
 800a838:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a83a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a83e:	f113 0f0d 	cmn.w	r3, #13
 800a842:	d016      	beq.n	800a872 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a844:	4b13      	ldr	r3, [pc, #76]	; (800a894 <tcp_input+0x740>)
 800a846:	2200      	movs	r2, #0
 800a848:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a84a:	69f8      	ldr	r0, [r7, #28]
 800a84c:	f000 f88e 	bl	800a96c <tcp_input_delayed_close>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d128      	bne.n	800a8a8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a856:	69f8      	ldr	r0, [r7, #28]
 800a858:	f002 fac8 	bl	800cdec <tcp_output>
 800a85c:	e025      	b.n	800a8aa <tcp_input+0x756>
        goto aborted;
 800a85e:	bf00      	nop
 800a860:	e023      	b.n	800a8aa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a862:	bf00      	nop
 800a864:	e021      	b.n	800a8aa <tcp_input+0x756>
              goto aborted;
 800a866:	bf00      	nop
 800a868:	e01f      	b.n	800a8aa <tcp_input+0x756>
          goto aborted;
 800a86a:	bf00      	nop
 800a86c:	e01d      	b.n	800a8aa <tcp_input+0x756>
            goto aborted;
 800a86e:	bf00      	nop
 800a870:	e01b      	b.n	800a8aa <tcp_input+0x756>
              goto aborted;
 800a872:	bf00      	nop
 800a874:	e019      	b.n	800a8aa <tcp_input+0x756>
 800a876:	bf00      	nop
 800a878:	200108c0 	.word	0x200108c0
 800a87c:	200108d0 	.word	0x200108d0
 800a880:	200108f0 	.word	0x200108f0
 800a884:	200108ed 	.word	0x200108ed
 800a888:	200108e8 	.word	0x200108e8
 800a88c:	200108ec 	.word	0x200108ec
 800a890:	200108ea 	.word	0x200108ea
 800a894:	200108f4 	.word	0x200108f4
 800a898:	200108b4 	.word	0x200108b4
 800a89c:	08015254 	.word	0x08015254
 800a8a0:	08015408 	.word	0x08015408
 800a8a4:	080152a0 	.word	0x080152a0
          goto aborted;
 800a8a8:	bf00      	nop
    tcp_input_pcb = NULL;
 800a8aa:	4b27      	ldr	r3, [pc, #156]	; (800a948 <tcp_input+0x7f4>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a8b0:	4b26      	ldr	r3, [pc, #152]	; (800a94c <tcp_input+0x7f8>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a8b6:	4b26      	ldr	r3, [pc, #152]	; (800a950 <tcp_input+0x7fc>)
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d03f      	beq.n	800a93e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <tcp_input+0x7fc>)
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fd fe02 	bl	80084cc <pbuf_free>
      inseg.p = NULL;
 800a8c8:	4b21      	ldr	r3, [pc, #132]	; (800a950 <tcp_input+0x7fc>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a8ce:	e036      	b.n	800a93e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a8d0:	4b20      	ldr	r3, [pc, #128]	; (800a954 <tcp_input+0x800>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	899b      	ldrh	r3, [r3, #12]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fc fa61 	bl	8006da0 <lwip_htons>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	f003 0304 	and.w	r3, r3, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d118      	bne.n	800a91c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8ea:	4b1b      	ldr	r3, [pc, #108]	; (800a958 <tcp_input+0x804>)
 800a8ec:	6819      	ldr	r1, [r3, #0]
 800a8ee:	4b1b      	ldr	r3, [pc, #108]	; (800a95c <tcp_input+0x808>)
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <tcp_input+0x80c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8fa:	4b16      	ldr	r3, [pc, #88]	; (800a954 <tcp_input+0x800>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8fe:	885b      	ldrh	r3, [r3, #2]
 800a900:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a902:	4a14      	ldr	r2, [pc, #80]	; (800a954 <tcp_input+0x800>)
 800a904:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a906:	8812      	ldrh	r2, [r2, #0]
 800a908:	b292      	uxth	r2, r2
 800a90a:	9202      	str	r2, [sp, #8]
 800a90c:	9301      	str	r3, [sp, #4]
 800a90e:	4b15      	ldr	r3, [pc, #84]	; (800a964 <tcp_input+0x810>)
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	4b15      	ldr	r3, [pc, #84]	; (800a968 <tcp_input+0x814>)
 800a914:	4602      	mov	r2, r0
 800a916:	2000      	movs	r0, #0
 800a918:	f003 f81c 	bl	800d954 <tcp_rst>
    pbuf_free(p);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7fd fdd5 	bl	80084cc <pbuf_free>
  return;
 800a922:	e00c      	b.n	800a93e <tcp_input+0x7ea>
    goto dropped;
 800a924:	bf00      	nop
 800a926:	e006      	b.n	800a936 <tcp_input+0x7e2>
    goto dropped;
 800a928:	bf00      	nop
 800a92a:	e004      	b.n	800a936 <tcp_input+0x7e2>
    goto dropped;
 800a92c:	bf00      	nop
 800a92e:	e002      	b.n	800a936 <tcp_input+0x7e2>
      goto dropped;
 800a930:	bf00      	nop
 800a932:	e000      	b.n	800a936 <tcp_input+0x7e2>
      goto dropped;
 800a934:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7fd fdc8 	bl	80084cc <pbuf_free>
 800a93c:	e000      	b.n	800a940 <tcp_input+0x7ec>
  return;
 800a93e:	bf00      	nop
}
 800a940:	3724      	adds	r7, #36	; 0x24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}
 800a946:	bf00      	nop
 800a948:	200108f4 	.word	0x200108f4
 800a94c:	200108f0 	.word	0x200108f0
 800a950:	200108c0 	.word	0x200108c0
 800a954:	200108d0 	.word	0x200108d0
 800a958:	200108e4 	.word	0x200108e4
 800a95c:	200108ea 	.word	0x200108ea
 800a960:	200108e0 	.word	0x200108e0
 800a964:	2000d144 	.word	0x2000d144
 800a968:	2000d148 	.word	0x2000d148

0800a96c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <tcp_input_delayed_close+0x1c>
 800a97a:	4b17      	ldr	r3, [pc, #92]	; (800a9d8 <tcp_input_delayed_close+0x6c>)
 800a97c:	f240 225a 	movw	r2, #602	; 0x25a
 800a980:	4916      	ldr	r1, [pc, #88]	; (800a9dc <tcp_input_delayed_close+0x70>)
 800a982:	4817      	ldr	r0, [pc, #92]	; (800a9e0 <tcp_input_delayed_close+0x74>)
 800a984:	f008 fb20 	bl	8012fc8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a988:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <tcp_input_delayed_close+0x78>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f003 0310 	and.w	r3, r3, #16
 800a990:	2b00      	cmp	r3, #0
 800a992:	d01c      	beq.n	800a9ce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	8b5b      	ldrh	r3, [r3, #26]
 800a998:	f003 0310 	and.w	r3, r3, #16
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10d      	bne.n	800a9bc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d008      	beq.n	800a9bc <tcp_input_delayed_close+0x50>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6912      	ldr	r2, [r2, #16]
 800a9b4:	f06f 010e 	mvn.w	r1, #14
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a9bc:	6879      	ldr	r1, [r7, #4]
 800a9be:	480a      	ldr	r0, [pc, #40]	; (800a9e8 <tcp_input_delayed_close+0x7c>)
 800a9c0:	f7ff fa50 	bl	8009e64 <tcp_pcb_remove>
    tcp_free(pcb);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7fe f83d 	bl	8008a44 <tcp_free>
    return 1;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	08015254 	.word	0x08015254
 800a9dc:	08015424 	.word	0x08015424
 800a9e0:	080152a0 	.word	0x080152a0
 800a9e4:	200108ed 	.word	0x200108ed
 800a9e8:	200108b4 	.word	0x200108b4

0800a9ec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a9ec:	b590      	push	{r4, r7, lr}
 800a9ee:	b08b      	sub	sp, #44	; 0x2c
 800a9f0:	af04      	add	r7, sp, #16
 800a9f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a9f4:	4b6f      	ldr	r3, [pc, #444]	; (800abb4 <tcp_listen_input+0x1c8>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 80d2 	bne.w	800aba6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d106      	bne.n	800aa16 <tcp_listen_input+0x2a>
 800aa08:	4b6b      	ldr	r3, [pc, #428]	; (800abb8 <tcp_listen_input+0x1cc>)
 800aa0a:	f240 2281 	movw	r2, #641	; 0x281
 800aa0e:	496b      	ldr	r1, [pc, #428]	; (800abbc <tcp_listen_input+0x1d0>)
 800aa10:	486b      	ldr	r0, [pc, #428]	; (800abc0 <tcp_listen_input+0x1d4>)
 800aa12:	f008 fad9 	bl	8012fc8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aa16:	4b67      	ldr	r3, [pc, #412]	; (800abb4 <tcp_listen_input+0x1c8>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	f003 0310 	and.w	r3, r3, #16
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d019      	beq.n	800aa56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa22:	4b68      	ldr	r3, [pc, #416]	; (800abc4 <tcp_listen_input+0x1d8>)
 800aa24:	6819      	ldr	r1, [r3, #0]
 800aa26:	4b68      	ldr	r3, [pc, #416]	; (800abc8 <tcp_listen_input+0x1dc>)
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4b67      	ldr	r3, [pc, #412]	; (800abcc <tcp_listen_input+0x1e0>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa32:	4b67      	ldr	r3, [pc, #412]	; (800abd0 <tcp_listen_input+0x1e4>)
 800aa34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa36:	885b      	ldrh	r3, [r3, #2]
 800aa38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa3a:	4a65      	ldr	r2, [pc, #404]	; (800abd0 <tcp_listen_input+0x1e4>)
 800aa3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa3e:	8812      	ldrh	r2, [r2, #0]
 800aa40:	b292      	uxth	r2, r2
 800aa42:	9202      	str	r2, [sp, #8]
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	4b63      	ldr	r3, [pc, #396]	; (800abd4 <tcp_listen_input+0x1e8>)
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	4b63      	ldr	r3, [pc, #396]	; (800abd8 <tcp_listen_input+0x1ec>)
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f002 ff80 	bl	800d954 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800aa54:	e0a9      	b.n	800abaa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800aa56:	4b57      	ldr	r3, [pc, #348]	; (800abb4 <tcp_listen_input+0x1c8>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 80a3 	beq.w	800abaa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7d5b      	ldrb	r3, [r3, #21]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff f927 	bl	8009cbc <tcp_alloc>
 800aa6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d111      	bne.n	800aa9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <tcp_listen_input+0xa8>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	6910      	ldr	r0, [r2, #16]
 800aa86:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4798      	blx	r3
 800aa8e:	4603      	mov	r3, r0
 800aa90:	73bb      	strb	r3, [r7, #14]
      return;
 800aa92:	e08b      	b.n	800abac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aa94:	23f0      	movs	r3, #240	; 0xf0
 800aa96:	73bb      	strb	r3, [r7, #14]
      return;
 800aa98:	e088      	b.n	800abac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aa9a:	4b50      	ldr	r3, [pc, #320]	; (800abdc <tcp_listen_input+0x1f0>)
 800aa9c:	695a      	ldr	r2, [r3, #20]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800aaa2:	4b4e      	ldr	r3, [pc, #312]	; (800abdc <tcp_listen_input+0x1f0>)
 800aaa4:	691a      	ldr	r2, [r3, #16]
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	8ada      	ldrh	r2, [r3, #22]
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800aab2:	4b47      	ldr	r3, [pc, #284]	; (800abd0 <tcp_listen_input+0x1e4>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	2203      	movs	r2, #3
 800aac2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aac4:	4b41      	ldr	r3, [pc, #260]	; (800abcc <tcp_listen_input+0x1e0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aad6:	6978      	ldr	r0, [r7, #20]
 800aad8:	f7ff fa58 	bl	8009f8c <tcp_next_iss>
 800aadc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aaf6:	4b35      	ldr	r3, [pc, #212]	; (800abcc <tcp_listen_input+0x1e0>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	7a5b      	ldrb	r3, [r3, #9]
 800ab12:	f003 030c 	and.w	r3, r3, #12
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7a1a      	ldrb	r2, [r3, #8]
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ab24:	4b2e      	ldr	r3, [pc, #184]	; (800abe0 <tcp_listen_input+0x1f4>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	60da      	str	r2, [r3, #12]
 800ab2c:	4a2c      	ldr	r2, [pc, #176]	; (800abe0 <tcp_listen_input+0x1f4>)
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	f003 f8d1 	bl	800dcd8 <tcp_timer_needed>
 800ab36:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <tcp_listen_input+0x1f8>)
 800ab38:	2201      	movs	r2, #1
 800ab3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ab3c:	6978      	ldr	r0, [r7, #20]
 800ab3e:	f001 fd8f 	bl	800c660 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ab42:	4b23      	ldr	r3, [pc, #140]	; (800abd0 <tcp_listen_input+0x1e4>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	89db      	ldrh	r3, [r3, #14]
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4618      	mov	r0, r3
 800ab66:	f006 fe21 	bl	80117ac <ip4_route>
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	461a      	mov	r2, r3
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff fa30 	bl	8009fd8 <tcp_eff_send_mss_netif>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ab80:	2112      	movs	r1, #18
 800ab82:	6978      	ldr	r0, [r7, #20]
 800ab84:	f002 f844 	bl	800cc10 <tcp_enqueue_flags>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ab8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d004      	beq.n	800ab9e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ab94:	2100      	movs	r1, #0
 800ab96:	6978      	ldr	r0, [r7, #20]
 800ab98:	f7fe f97e 	bl	8008e98 <tcp_abandon>
      return;
 800ab9c:	e006      	b.n	800abac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ab9e:	6978      	ldr	r0, [r7, #20]
 800aba0:	f002 f924 	bl	800cdec <tcp_output>
  return;
 800aba4:	e001      	b.n	800abaa <tcp_listen_input+0x1be>
    return;
 800aba6:	bf00      	nop
 800aba8:	e000      	b.n	800abac <tcp_listen_input+0x1c0>
  return;
 800abaa:	bf00      	nop
}
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd90      	pop	{r4, r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200108ec 	.word	0x200108ec
 800abb8:	08015254 	.word	0x08015254
 800abbc:	0801544c 	.word	0x0801544c
 800abc0:	080152a0 	.word	0x080152a0
 800abc4:	200108e4 	.word	0x200108e4
 800abc8:	200108ea 	.word	0x200108ea
 800abcc:	200108e0 	.word	0x200108e0
 800abd0:	200108d0 	.word	0x200108d0
 800abd4:	2000d144 	.word	0x2000d144
 800abd8:	2000d148 	.word	0x2000d148
 800abdc:	2000d134 	.word	0x2000d134
 800abe0:	200108b4 	.word	0x200108b4
 800abe4:	200108bc 	.word	0x200108bc

0800abe8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af04      	add	r7, sp, #16
 800abee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800abf0:	4b2f      	ldr	r3, [pc, #188]	; (800acb0 <tcp_timewait_input+0xc8>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d153      	bne.n	800aca4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <tcp_timewait_input+0x28>
 800ac02:	4b2c      	ldr	r3, [pc, #176]	; (800acb4 <tcp_timewait_input+0xcc>)
 800ac04:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ac08:	492b      	ldr	r1, [pc, #172]	; (800acb8 <tcp_timewait_input+0xd0>)
 800ac0a:	482c      	ldr	r0, [pc, #176]	; (800acbc <tcp_timewait_input+0xd4>)
 800ac0c:	f008 f9dc 	bl	8012fc8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ac10:	4b27      	ldr	r3, [pc, #156]	; (800acb0 <tcp_timewait_input+0xc8>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f003 0302 	and.w	r3, r3, #2
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d02a      	beq.n	800ac72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ac1c:	4b28      	ldr	r3, [pc, #160]	; (800acc0 <tcp_timewait_input+0xd8>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	db2d      	blt.n	800ac86 <tcp_timewait_input+0x9e>
 800ac2a:	4b25      	ldr	r3, [pc, #148]	; (800acc0 <tcp_timewait_input+0xd8>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac36:	440b      	add	r3, r1
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dc23      	bgt.n	800ac86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac3e:	4b21      	ldr	r3, [pc, #132]	; (800acc4 <tcp_timewait_input+0xdc>)
 800ac40:	6819      	ldr	r1, [r3, #0]
 800ac42:	4b21      	ldr	r3, [pc, #132]	; (800acc8 <tcp_timewait_input+0xe0>)
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <tcp_timewait_input+0xd8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac4e:	4b1f      	ldr	r3, [pc, #124]	; (800accc <tcp_timewait_input+0xe4>)
 800ac50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac52:	885b      	ldrh	r3, [r3, #2]
 800ac54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac56:	4a1d      	ldr	r2, [pc, #116]	; (800accc <tcp_timewait_input+0xe4>)
 800ac58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac5a:	8812      	ldrh	r2, [r2, #0]
 800ac5c:	b292      	uxth	r2, r2
 800ac5e:	9202      	str	r2, [sp, #8]
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	4b1b      	ldr	r3, [pc, #108]	; (800acd0 <tcp_timewait_input+0xe8>)
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <tcp_timewait_input+0xec>)
 800ac68:	4602      	mov	r2, r0
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f002 fe72 	bl	800d954 <tcp_rst>
      return;
 800ac70:	e01b      	b.n	800acaa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ac72:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <tcp_timewait_input+0xc8>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ac7e:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <tcp_timewait_input+0xf0>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ac86:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <tcp_timewait_input+0xe0>)
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00c      	beq.n	800aca8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	8b5b      	ldrh	r3, [r3, #26]
 800ac92:	f043 0302 	orr.w	r3, r3, #2
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f002 f8a5 	bl	800cdec <tcp_output>
  }
  return;
 800aca2:	e001      	b.n	800aca8 <tcp_timewait_input+0xc0>
    return;
 800aca4:	bf00      	nop
 800aca6:	e000      	b.n	800acaa <tcp_timewait_input+0xc2>
  return;
 800aca8:	bf00      	nop
}
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	200108ec 	.word	0x200108ec
 800acb4:	08015254 	.word	0x08015254
 800acb8:	0801546c 	.word	0x0801546c
 800acbc:	080152a0 	.word	0x080152a0
 800acc0:	200108e0 	.word	0x200108e0
 800acc4:	200108e4 	.word	0x200108e4
 800acc8:	200108ea 	.word	0x200108ea
 800accc:	200108d0 	.word	0x200108d0
 800acd0:	2000d144 	.word	0x2000d144
 800acd4:	2000d148 	.word	0x2000d148
 800acd8:	200108a8 	.word	0x200108a8

0800acdc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b08d      	sub	sp, #52	; 0x34
 800ace0:	af04      	add	r7, sp, #16
 800ace2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <tcp_process+0x24>
 800acf2:	4b9d      	ldr	r3, [pc, #628]	; (800af68 <tcp_process+0x28c>)
 800acf4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800acf8:	499c      	ldr	r1, [pc, #624]	; (800af6c <tcp_process+0x290>)
 800acfa:	489d      	ldr	r0, [pc, #628]	; (800af70 <tcp_process+0x294>)
 800acfc:	f008 f964 	bl	8012fc8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ad00:	4b9c      	ldr	r3, [pc, #624]	; (800af74 <tcp_process+0x298>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d04e      	beq.n	800adaa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	7d1b      	ldrb	r3, [r3, #20]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d108      	bne.n	800ad26 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad18:	4b97      	ldr	r3, [pc, #604]	; (800af78 <tcp_process+0x29c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d123      	bne.n	800ad68 <tcp_process+0x8c>
        acceptable = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	76fb      	strb	r3, [r7, #27]
 800ad24:	e020      	b.n	800ad68 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad2a:	4b94      	ldr	r3, [pc, #592]	; (800af7c <tcp_process+0x2a0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d102      	bne.n	800ad38 <tcp_process+0x5c>
        acceptable = 1;
 800ad32:	2301      	movs	r3, #1
 800ad34:	76fb      	strb	r3, [r7, #27]
 800ad36:	e017      	b.n	800ad68 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ad38:	4b90      	ldr	r3, [pc, #576]	; (800af7c <tcp_process+0x2a0>)
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	db10      	blt.n	800ad68 <tcp_process+0x8c>
 800ad46:	4b8d      	ldr	r3, [pc, #564]	; (800af7c <tcp_process+0x2a0>)
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad52:	440b      	add	r3, r1
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dc06      	bgt.n	800ad68 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	8b5b      	ldrh	r3, [r3, #26]
 800ad5e:	f043 0302 	orr.w	r3, r3, #2
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ad68:	7efb      	ldrb	r3, [r7, #27]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01b      	beq.n	800ada6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	7d1b      	ldrb	r3, [r3, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <tcp_process+0xa8>
 800ad76:	4b7c      	ldr	r3, [pc, #496]	; (800af68 <tcp_process+0x28c>)
 800ad78:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ad7c:	4980      	ldr	r1, [pc, #512]	; (800af80 <tcp_process+0x2a4>)
 800ad7e:	487c      	ldr	r0, [pc, #496]	; (800af70 <tcp_process+0x294>)
 800ad80:	f008 f922 	bl	8012fc8 <iprintf>
      recv_flags |= TF_RESET;
 800ad84:	4b7f      	ldr	r3, [pc, #508]	; (800af84 <tcp_process+0x2a8>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f043 0308 	orr.w	r3, r3, #8
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	4b7d      	ldr	r3, [pc, #500]	; (800af84 <tcp_process+0x2a8>)
 800ad90:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	8b5b      	ldrh	r3, [r3, #26]
 800ad96:	f023 0301 	bic.w	r3, r3, #1
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ada0:	f06f 030d 	mvn.w	r3, #13
 800ada4:	e37a      	b.n	800b49c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e378      	b.n	800b49c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800adaa:	4b72      	ldr	r3, [pc, #456]	; (800af74 <tcp_process+0x298>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d010      	beq.n	800add8 <tcp_process+0xfc>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	7d1b      	ldrb	r3, [r3, #20]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d00c      	beq.n	800add8 <tcp_process+0xfc>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7d1b      	ldrb	r3, [r3, #20]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d008      	beq.n	800add8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	8b5b      	ldrh	r3, [r3, #26]
 800adca:	f043 0302 	orr.w	r3, r3, #2
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	e361      	b.n	800b49c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	8b5b      	ldrh	r3, [r3, #26]
 800addc:	f003 0310 	and.w	r3, r3, #16
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ade4:	4b68      	ldr	r3, [pc, #416]	; (800af88 <tcp_process+0x2ac>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fc2f 	bl	800c660 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	7d1b      	ldrb	r3, [r3, #20]
 800ae06:	3b02      	subs	r3, #2
 800ae08:	2b07      	cmp	r3, #7
 800ae0a:	f200 8337 	bhi.w	800b47c <tcp_process+0x7a0>
 800ae0e:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <tcp_process+0x138>)
 800ae10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae14:	0800ae35 	.word	0x0800ae35
 800ae18:	0800b065 	.word	0x0800b065
 800ae1c:	0800b1dd 	.word	0x0800b1dd
 800ae20:	0800b207 	.word	0x0800b207
 800ae24:	0800b32b 	.word	0x0800b32b
 800ae28:	0800b1dd 	.word	0x0800b1dd
 800ae2c:	0800b3b7 	.word	0x0800b3b7
 800ae30:	0800b447 	.word	0x0800b447
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ae34:	4b4f      	ldr	r3, [pc, #316]	; (800af74 <tcp_process+0x298>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 80e4 	beq.w	800b00a <tcp_process+0x32e>
 800ae42:	4b4c      	ldr	r3, [pc, #304]	; (800af74 <tcp_process+0x298>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 80dd 	beq.w	800b00a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	4b48      	ldr	r3, [pc, #288]	; (800af78 <tcp_process+0x29c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	f040 80d5 	bne.w	800b00a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ae60:	4b46      	ldr	r3, [pc, #280]	; (800af7c <tcp_process+0x2a0>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	1c5a      	adds	r2, r3, #1
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ae72:	4b41      	ldr	r3, [pc, #260]	; (800af78 <tcp_process+0x29c>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ae7a:	4b44      	ldr	r3, [pc, #272]	; (800af8c <tcp_process+0x2b0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	89db      	ldrh	r3, [r3, #14]
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ae94:	4b39      	ldr	r3, [pc, #228]	; (800af7c <tcp_process+0x2a0>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	1e5a      	subs	r2, r3, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2204      	movs	r2, #4
 800aea2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4618      	mov	r0, r3
 800aeae:	f006 fc7d 	bl	80117ac <ip4_route>
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4620      	mov	r0, r4
 800aebc:	f7ff f88c 	bl	8009fd8 <tcp_eff_send_mss_netif>
 800aec0:	4603      	mov	r3, r0
 800aec2:	461a      	mov	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aecc:	009a      	lsls	r2, r3, #2
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	f241 111c 	movw	r1, #4380	; 0x111c
 800aed8:	428b      	cmp	r3, r1
 800aeda:	bf38      	it	cc
 800aedc:	460b      	movcc	r3, r1
 800aede:	429a      	cmp	r2, r3
 800aee0:	d204      	bcs.n	800aeec <tcp_process+0x210>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	e00d      	b.n	800af08 <tcp_process+0x22c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	f241 121c 	movw	r2, #4380	; 0x111c
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d904      	bls.n	800af04 <tcp_process+0x228>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	b29b      	uxth	r3, r3
 800af02:	e001      	b.n	800af08 <tcp_process+0x22c>
 800af04:	f241 131c 	movw	r3, #4380	; 0x111c
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af14:	2b00      	cmp	r3, #0
 800af16:	d106      	bne.n	800af26 <tcp_process+0x24a>
 800af18:	4b13      	ldr	r3, [pc, #76]	; (800af68 <tcp_process+0x28c>)
 800af1a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800af1e:	491c      	ldr	r1, [pc, #112]	; (800af90 <tcp_process+0x2b4>)
 800af20:	4813      	ldr	r0, [pc, #76]	; (800af70 <tcp_process+0x294>)
 800af22:	f008 f851 	bl	8012fc8 <iprintf>
        --pcb->snd_queuelen;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af2c:	3b01      	subs	r3, #1
 800af2e:	b29a      	uxth	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d12a      	bne.n	800af98 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af46:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d106      	bne.n	800af5c <tcp_process+0x280>
 800af4e:	4b06      	ldr	r3, [pc, #24]	; (800af68 <tcp_process+0x28c>)
 800af50:	f44f 725d 	mov.w	r2, #884	; 0x374
 800af54:	490f      	ldr	r1, [pc, #60]	; (800af94 <tcp_process+0x2b8>)
 800af56:	4806      	ldr	r0, [pc, #24]	; (800af70 <tcp_process+0x294>)
 800af58:	f008 f836 	bl	8012fc8 <iprintf>
          pcb->unsent = rseg->next;
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	66da      	str	r2, [r3, #108]	; 0x6c
 800af64:	e01c      	b.n	800afa0 <tcp_process+0x2c4>
 800af66:	bf00      	nop
 800af68:	08015254 	.word	0x08015254
 800af6c:	0801548c 	.word	0x0801548c
 800af70:	080152a0 	.word	0x080152a0
 800af74:	200108ec 	.word	0x200108ec
 800af78:	200108e4 	.word	0x200108e4
 800af7c:	200108e0 	.word	0x200108e0
 800af80:	080154a8 	.word	0x080154a8
 800af84:	200108ed 	.word	0x200108ed
 800af88:	200108a8 	.word	0x200108a8
 800af8c:	200108d0 	.word	0x200108d0
 800af90:	080154c8 	.word	0x080154c8
 800af94:	080154e0 	.word	0x080154e0
        } else {
          pcb->unacked = rseg->next;
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800afa0:	69f8      	ldr	r0, [r7, #28]
 800afa2:	f7fe fd22 	bl	80099ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d104      	bne.n	800afb8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afb4:	861a      	strh	r2, [r3, #48]	; 0x30
 800afb6:	e006      	b.n	800afc6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <tcp_process+0x30a>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	6910      	ldr	r0, [r2, #16]
 800afda:	2200      	movs	r2, #0
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4798      	blx	r3
 800afe0:	4603      	mov	r3, r0
 800afe2:	76bb      	strb	r3, [r7, #26]
 800afe4:	e001      	b.n	800afea <tcp_process+0x30e>
 800afe6:	2300      	movs	r3, #0
 800afe8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800afea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afee:	f113 0f0d 	cmn.w	r3, #13
 800aff2:	d102      	bne.n	800affa <tcp_process+0x31e>
          return ERR_ABRT;
 800aff4:	f06f 030c 	mvn.w	r3, #12
 800aff8:	e250      	b.n	800b49c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	8b5b      	ldrh	r3, [r3, #26]
 800affe:	f043 0302 	orr.w	r3, r3, #2
 800b002:	b29a      	uxth	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b008:	e23a      	b.n	800b480 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b00a:	4b98      	ldr	r3, [pc, #608]	; (800b26c <tcp_process+0x590>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	f003 0310 	and.w	r3, r3, #16
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 8234 	beq.w	800b480 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b018:	4b95      	ldr	r3, [pc, #596]	; (800b270 <tcp_process+0x594>)
 800b01a:	6819      	ldr	r1, [r3, #0]
 800b01c:	4b95      	ldr	r3, [pc, #596]	; (800b274 <tcp_process+0x598>)
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	4b95      	ldr	r3, [pc, #596]	; (800b278 <tcp_process+0x59c>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b028:	4b94      	ldr	r3, [pc, #592]	; (800b27c <tcp_process+0x5a0>)
 800b02a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b030:	4a92      	ldr	r2, [pc, #584]	; (800b27c <tcp_process+0x5a0>)
 800b032:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b034:	8812      	ldrh	r2, [r2, #0]
 800b036:	b292      	uxth	r2, r2
 800b038:	9202      	str	r2, [sp, #8]
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	4b90      	ldr	r3, [pc, #576]	; (800b280 <tcp_process+0x5a4>)
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	4b90      	ldr	r3, [pc, #576]	; (800b284 <tcp_process+0x5a8>)
 800b042:	4602      	mov	r2, r0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f002 fc85 	bl	800d954 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b050:	2b05      	cmp	r3, #5
 800b052:	f200 8215 	bhi.w	800b480 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f002 fa51 	bl	800d504 <tcp_rexmit_rto>
      break;
 800b062:	e20d      	b.n	800b480 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b064:	4b81      	ldr	r3, [pc, #516]	; (800b26c <tcp_process+0x590>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 80a1 	beq.w	800b1b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b072:	4b7f      	ldr	r3, [pc, #508]	; (800b270 <tcp_process+0x594>)
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	3b01      	subs	r3, #1
 800b07e:	2b00      	cmp	r3, #0
 800b080:	db7e      	blt.n	800b180 <tcp_process+0x4a4>
 800b082:	4b7b      	ldr	r3, [pc, #492]	; (800b270 <tcp_process+0x594>)
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dc77      	bgt.n	800b180 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2204      	movs	r2, #4
 800b094:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b09e:	23fa      	movs	r3, #250	; 0xfa
 800b0a0:	76bb      	strb	r3, [r7, #26]
 800b0a2:	e01d      	b.n	800b0e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <tcp_process+0x3e0>
 800b0ae:	4b76      	ldr	r3, [pc, #472]	; (800b288 <tcp_process+0x5ac>)
 800b0b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b0b4:	4975      	ldr	r1, [pc, #468]	; (800b28c <tcp_process+0x5b0>)
 800b0b6:	4876      	ldr	r0, [pc, #472]	; (800b290 <tcp_process+0x5b4>)
 800b0b8:	f007 ff86 	bl	8012fc8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <tcp_process+0x400>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	6910      	ldr	r0, [r2, #16]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	4798      	blx	r3
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	76bb      	strb	r3, [r7, #26]
 800b0da:	e001      	b.n	800b0e0 <tcp_process+0x404>
 800b0dc:	23f0      	movs	r3, #240	; 0xf0
 800b0de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b0e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00a      	beq.n	800b0fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b0e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0ec:	f113 0f0d 	cmn.w	r3, #13
 800b0f0:	d002      	beq.n	800b0f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7fd ff8e 	bl	8009014 <tcp_abort>
            }
            return ERR_ABRT;
 800b0f8:	f06f 030c 	mvn.w	r3, #12
 800b0fc:	e1ce      	b.n	800b49c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fae0 	bl	800b6c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b104:	4b63      	ldr	r3, [pc, #396]	; (800b294 <tcp_process+0x5b8>)
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d005      	beq.n	800b118 <tcp_process+0x43c>
            recv_acked--;
 800b10c:	4b61      	ldr	r3, [pc, #388]	; (800b294 <tcp_process+0x5b8>)
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	3b01      	subs	r3, #1
 800b112:	b29a      	uxth	r2, r3
 800b114:	4b5f      	ldr	r3, [pc, #380]	; (800b294 <tcp_process+0x5b8>)
 800b116:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b11c:	009a      	lsls	r2, r3, #2
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	f241 111c 	movw	r1, #4380	; 0x111c
 800b128:	428b      	cmp	r3, r1
 800b12a:	bf38      	it	cc
 800b12c:	460b      	movcc	r3, r1
 800b12e:	429a      	cmp	r2, r3
 800b130:	d204      	bcs.n	800b13c <tcp_process+0x460>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	b29b      	uxth	r3, r3
 800b13a:	e00d      	b.n	800b158 <tcp_process+0x47c>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b140:	005b      	lsls	r3, r3, #1
 800b142:	f241 121c 	movw	r2, #4380	; 0x111c
 800b146:	4293      	cmp	r3, r2
 800b148:	d904      	bls.n	800b154 <tcp_process+0x478>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	b29b      	uxth	r3, r3
 800b152:	e001      	b.n	800b158 <tcp_process+0x47c>
 800b154:	f241 131c 	movw	r3, #4380	; 0x111c
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b15e:	4b4e      	ldr	r3, [pc, #312]	; (800b298 <tcp_process+0x5bc>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	f003 0320 	and.w	r3, r3, #32
 800b166:	2b00      	cmp	r3, #0
 800b168:	d037      	beq.n	800b1da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	8b5b      	ldrh	r3, [r3, #26]
 800b16e:	f043 0302 	orr.w	r3, r3, #2
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2207      	movs	r2, #7
 800b17c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b17e:	e02c      	b.n	800b1da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b180:	4b3b      	ldr	r3, [pc, #236]	; (800b270 <tcp_process+0x594>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	4b3b      	ldr	r3, [pc, #236]	; (800b274 <tcp_process+0x598>)
 800b186:	881b      	ldrh	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	4b3b      	ldr	r3, [pc, #236]	; (800b278 <tcp_process+0x59c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b190:	4b3a      	ldr	r3, [pc, #232]	; (800b27c <tcp_process+0x5a0>)
 800b192:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b198:	4a38      	ldr	r2, [pc, #224]	; (800b27c <tcp_process+0x5a0>)
 800b19a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b19c:	8812      	ldrh	r2, [r2, #0]
 800b19e:	b292      	uxth	r2, r2
 800b1a0:	9202      	str	r2, [sp, #8]
 800b1a2:	9301      	str	r3, [sp, #4]
 800b1a4:	4b36      	ldr	r3, [pc, #216]	; (800b280 <tcp_process+0x5a4>)
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	4b36      	ldr	r3, [pc, #216]	; (800b284 <tcp_process+0x5a8>)
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f002 fbd1 	bl	800d954 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b1b2:	e167      	b.n	800b484 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b1b4:	4b2d      	ldr	r3, [pc, #180]	; (800b26c <tcp_process+0x590>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 8161 	beq.w	800b484 <tcp_process+0x7a8>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c6:	1e5a      	subs	r2, r3, #1
 800b1c8:	4b2b      	ldr	r3, [pc, #172]	; (800b278 <tcp_process+0x59c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	f040 8159 	bne.w	800b484 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f002 f9b8 	bl	800d548 <tcp_rexmit>
      break;
 800b1d8:	e154      	b.n	800b484 <tcp_process+0x7a8>
 800b1da:	e153      	b.n	800b484 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa71 	bl	800b6c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b1e2:	4b2d      	ldr	r3, [pc, #180]	; (800b298 <tcp_process+0x5bc>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	f003 0320 	and.w	r3, r3, #32
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 814c 	beq.w	800b488 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	8b5b      	ldrh	r3, [r3, #26]
 800b1f4:	f043 0302 	orr.w	r3, r3, #2
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2207      	movs	r2, #7
 800b202:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b204:	e140      	b.n	800b488 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fa5c 	bl	800b6c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b20c:	4b22      	ldr	r3, [pc, #136]	; (800b298 <tcp_process+0x5bc>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d071      	beq.n	800b2fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b218:	4b14      	ldr	r3, [pc, #80]	; (800b26c <tcp_process+0x590>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	f003 0310 	and.w	r3, r3, #16
 800b220:	2b00      	cmp	r3, #0
 800b222:	d060      	beq.n	800b2e6 <tcp_process+0x60a>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b228:	4b11      	ldr	r3, [pc, #68]	; (800b270 <tcp_process+0x594>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d15a      	bne.n	800b2e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b234:	2b00      	cmp	r3, #0
 800b236:	d156      	bne.n	800b2e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	8b5b      	ldrh	r3, [r3, #26]
 800b23c:	f043 0302 	orr.w	r3, r3, #2
 800b240:	b29a      	uxth	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7fe fdbc 	bl	8009dc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b24c:	4b13      	ldr	r3, [pc, #76]	; (800b29c <tcp_process+0x5c0>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	429a      	cmp	r2, r3
 800b254:	d105      	bne.n	800b262 <tcp_process+0x586>
 800b256:	4b11      	ldr	r3, [pc, #68]	; (800b29c <tcp_process+0x5c0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	4a0f      	ldr	r2, [pc, #60]	; (800b29c <tcp_process+0x5c0>)
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	e02e      	b.n	800b2c0 <tcp_process+0x5e4>
 800b262:	4b0e      	ldr	r3, [pc, #56]	; (800b29c <tcp_process+0x5c0>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	e027      	b.n	800b2ba <tcp_process+0x5de>
 800b26a:	bf00      	nop
 800b26c:	200108ec 	.word	0x200108ec
 800b270:	200108e4 	.word	0x200108e4
 800b274:	200108ea 	.word	0x200108ea
 800b278:	200108e0 	.word	0x200108e0
 800b27c:	200108d0 	.word	0x200108d0
 800b280:	2000d144 	.word	0x2000d144
 800b284:	2000d148 	.word	0x2000d148
 800b288:	08015254 	.word	0x08015254
 800b28c:	080154f4 	.word	0x080154f4
 800b290:	080152a0 	.word	0x080152a0
 800b294:	200108e8 	.word	0x200108e8
 800b298:	200108ed 	.word	0x200108ed
 800b29c:	200108b4 	.word	0x200108b4
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d104      	bne.n	800b2b4 <tcp_process+0x5d8>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	60da      	str	r2, [r3, #12]
 800b2b2:	e005      	b.n	800b2c0 <tcp_process+0x5e4>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1ef      	bne.n	800b2a0 <tcp_process+0x5c4>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	60da      	str	r2, [r3, #12]
 800b2c6:	4b77      	ldr	r3, [pc, #476]	; (800b4a4 <tcp_process+0x7c8>)
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	220a      	movs	r2, #10
 800b2d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b2d2:	4b75      	ldr	r3, [pc, #468]	; (800b4a8 <tcp_process+0x7cc>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	60da      	str	r2, [r3, #12]
 800b2da:	4a73      	ldr	r2, [pc, #460]	; (800b4a8 <tcp_process+0x7cc>)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	f002 fcfa 	bl	800dcd8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b2e4:	e0d2      	b.n	800b48c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ea:	f043 0302 	orr.w	r3, r3, #2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2208      	movs	r2, #8
 800b2f8:	751a      	strb	r2, [r3, #20]
      break;
 800b2fa:	e0c7      	b.n	800b48c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b2fc:	4b6b      	ldr	r3, [pc, #428]	; (800b4ac <tcp_process+0x7d0>)
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 0310 	and.w	r3, r3, #16
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 80c1 	beq.w	800b48c <tcp_process+0x7b0>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b30e:	4b68      	ldr	r3, [pc, #416]	; (800b4b0 <tcp_process+0x7d4>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	f040 80ba 	bne.w	800b48c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f040 80b5 	bne.w	800b48c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2206      	movs	r2, #6
 800b326:	751a      	strb	r2, [r3, #20]
      break;
 800b328:	e0b0      	b.n	800b48c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f9ca 	bl	800b6c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b330:	4b60      	ldr	r3, [pc, #384]	; (800b4b4 <tcp_process+0x7d8>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 80a9 	beq.w	800b490 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f043 0302 	orr.w	r3, r3, #2
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7fe fd39 	bl	8009dc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b352:	4b59      	ldr	r3, [pc, #356]	; (800b4b8 <tcp_process+0x7dc>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d105      	bne.n	800b368 <tcp_process+0x68c>
 800b35c:	4b56      	ldr	r3, [pc, #344]	; (800b4b8 <tcp_process+0x7dc>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	4a55      	ldr	r2, [pc, #340]	; (800b4b8 <tcp_process+0x7dc>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	e013      	b.n	800b390 <tcp_process+0x6b4>
 800b368:	4b53      	ldr	r3, [pc, #332]	; (800b4b8 <tcp_process+0x7dc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	613b      	str	r3, [r7, #16]
 800b36e:	e00c      	b.n	800b38a <tcp_process+0x6ae>
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d104      	bne.n	800b384 <tcp_process+0x6a8>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68da      	ldr	r2, [r3, #12]
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	60da      	str	r2, [r3, #12]
 800b382:	e005      	b.n	800b390 <tcp_process+0x6b4>
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1ef      	bne.n	800b370 <tcp_process+0x694>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	60da      	str	r2, [r3, #12]
 800b396:	4b43      	ldr	r3, [pc, #268]	; (800b4a4 <tcp_process+0x7c8>)
 800b398:	2201      	movs	r2, #1
 800b39a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	220a      	movs	r2, #10
 800b3a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b3a2:	4b41      	ldr	r3, [pc, #260]	; (800b4a8 <tcp_process+0x7cc>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60da      	str	r2, [r3, #12]
 800b3aa:	4a3f      	ldr	r2, [pc, #252]	; (800b4a8 <tcp_process+0x7cc>)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	f002 fc92 	bl	800dcd8 <tcp_timer_needed>
      }
      break;
 800b3b4:	e06c      	b.n	800b490 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f984 	bl	800b6c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b3bc:	4b3b      	ldr	r3, [pc, #236]	; (800b4ac <tcp_process+0x7d0>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	f003 0310 	and.w	r3, r3, #16
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d065      	beq.n	800b494 <tcp_process+0x7b8>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3cc:	4b38      	ldr	r3, [pc, #224]	; (800b4b0 <tcp_process+0x7d4>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d15f      	bne.n	800b494 <tcp_process+0x7b8>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d15b      	bne.n	800b494 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7fe fcf1 	bl	8009dc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b3e2:	4b35      	ldr	r3, [pc, #212]	; (800b4b8 <tcp_process+0x7dc>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d105      	bne.n	800b3f8 <tcp_process+0x71c>
 800b3ec:	4b32      	ldr	r3, [pc, #200]	; (800b4b8 <tcp_process+0x7dc>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	4a31      	ldr	r2, [pc, #196]	; (800b4b8 <tcp_process+0x7dc>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	e013      	b.n	800b420 <tcp_process+0x744>
 800b3f8:	4b2f      	ldr	r3, [pc, #188]	; (800b4b8 <tcp_process+0x7dc>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	e00c      	b.n	800b41a <tcp_process+0x73e>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	429a      	cmp	r2, r3
 800b408:	d104      	bne.n	800b414 <tcp_process+0x738>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	60da      	str	r2, [r3, #12]
 800b412:	e005      	b.n	800b420 <tcp_process+0x744>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1ef      	bne.n	800b400 <tcp_process+0x724>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	60da      	str	r2, [r3, #12]
 800b426:	4b1f      	ldr	r3, [pc, #124]	; (800b4a4 <tcp_process+0x7c8>)
 800b428:	2201      	movs	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	220a      	movs	r2, #10
 800b430:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b432:	4b1d      	ldr	r3, [pc, #116]	; (800b4a8 <tcp_process+0x7cc>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	60da      	str	r2, [r3, #12]
 800b43a:	4a1b      	ldr	r2, [pc, #108]	; (800b4a8 <tcp_process+0x7cc>)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	f002 fc4a 	bl	800dcd8 <tcp_timer_needed>
      }
      break;
 800b444:	e026      	b.n	800b494 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 f93c 	bl	800b6c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b44c:	4b17      	ldr	r3, [pc, #92]	; (800b4ac <tcp_process+0x7d0>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 0310 	and.w	r3, r3, #16
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01f      	beq.n	800b498 <tcp_process+0x7bc>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b45c:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <tcp_process+0x7d4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d119      	bne.n	800b498 <tcp_process+0x7bc>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d115      	bne.n	800b498 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <tcp_process+0x7d8>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	f043 0310 	orr.w	r3, r3, #16
 800b474:	b2da      	uxtb	r2, r3
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <tcp_process+0x7d8>)
 800b478:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b47a:	e00d      	b.n	800b498 <tcp_process+0x7bc>
    default:
      break;
 800b47c:	bf00      	nop
 800b47e:	e00c      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b480:	bf00      	nop
 800b482:	e00a      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b484:	bf00      	nop
 800b486:	e008      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b488:	bf00      	nop
 800b48a:	e006      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b48c:	bf00      	nop
 800b48e:	e004      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b490:	bf00      	nop
 800b492:	e002      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b494:	bf00      	nop
 800b496:	e000      	b.n	800b49a <tcp_process+0x7be>
      break;
 800b498:	bf00      	nop
  }
  return ERR_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3724      	adds	r7, #36	; 0x24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}
 800b4a4:	200108bc 	.word	0x200108bc
 800b4a8:	200108b8 	.word	0x200108b8
 800b4ac:	200108ec 	.word	0x200108ec
 800b4b0:	200108e4 	.word	0x200108e4
 800b4b4:	200108ed 	.word	0x200108ed
 800b4b8:	200108b4 	.word	0x200108b4

0800b4bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d106      	bne.n	800b4da <tcp_oos_insert_segment+0x1e>
 800b4cc:	4b3b      	ldr	r3, [pc, #236]	; (800b5bc <tcp_oos_insert_segment+0x100>)
 800b4ce:	f240 421f 	movw	r2, #1055	; 0x41f
 800b4d2:	493b      	ldr	r1, [pc, #236]	; (800b5c0 <tcp_oos_insert_segment+0x104>)
 800b4d4:	483b      	ldr	r0, [pc, #236]	; (800b5c4 <tcp_oos_insert_segment+0x108>)
 800b4d6:	f007 fd77 	bl	8012fc8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	899b      	ldrh	r3, [r3, #12]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fb fc5c 	bl	8006da0 <lwip_htons>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d028      	beq.n	800b546 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b4f4:	6838      	ldr	r0, [r7, #0]
 800b4f6:	f7fe fa63 	bl	80099c0 <tcp_segs_free>
    next = NULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	603b      	str	r3, [r7, #0]
 800b4fe:	e056      	b.n	800b5ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	899b      	ldrh	r3, [r3, #12]
 800b506:	b29b      	uxth	r3, r3
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fb fc49 	bl	8006da0 <lwip_htons>
 800b50e:	4603      	mov	r3, r0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00d      	beq.n	800b536 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	899b      	ldrh	r3, [r3, #12]
 800b520:	b29c      	uxth	r4, r3
 800b522:	2001      	movs	r0, #1
 800b524:	f7fb fc3c 	bl	8006da0 <lwip_htons>
 800b528:	4603      	mov	r3, r0
 800b52a:	461a      	mov	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	4322      	orrs	r2, r4
 800b532:	b292      	uxth	r2, r2
 800b534:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f7fe fa52 	bl	80099ea <tcp_seg_free>
    while (next &&
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00e      	beq.n	800b56a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	891b      	ldrh	r3, [r3, #8]
 800b550:	461a      	mov	r2, r3
 800b552:	4b1d      	ldr	r3, [pc, #116]	; (800b5c8 <tcp_oos_insert_segment+0x10c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	441a      	add	r2, r3
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	8909      	ldrh	r1, [r1, #8]
 800b562:	440b      	add	r3, r1
 800b564:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b566:	2b00      	cmp	r3, #0
 800b568:	daca      	bge.n	800b500 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01e      	beq.n	800b5ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	891b      	ldrh	r3, [r3, #8]
 800b574:	461a      	mov	r2, r3
 800b576:	4b14      	ldr	r3, [pc, #80]	; (800b5c8 <tcp_oos_insert_segment+0x10c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	441a      	add	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b584:	2b00      	cmp	r3, #0
 800b586:	dd12      	ble.n	800b5ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	b29a      	uxth	r2, r3
 800b590:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <tcp_oos_insert_segment+0x10c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	b29b      	uxth	r3, r3
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	891b      	ldrh	r3, [r3, #8]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f7fc fe09 	bl	80081c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	601a      	str	r2, [r3, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd90      	pop	{r4, r7, pc}
 800b5bc:	08015254 	.word	0x08015254
 800b5c0:	08015514 	.word	0x08015514
 800b5c4:	080152a0 	.word	0x080152a0
 800b5c8:	200108e0 	.word	0x200108e0

0800b5cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b5cc:	b5b0      	push	{r4, r5, r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
 800b5d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b5da:	e03e      	b.n	800b65a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fc fffc 	bl	80085e8 <pbuf_clen>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5fa:	8a7a      	ldrh	r2, [r7, #18]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d906      	bls.n	800b60e <tcp_free_acked_segments+0x42>
 800b600:	4b2a      	ldr	r3, [pc, #168]	; (800b6ac <tcp_free_acked_segments+0xe0>)
 800b602:	f240 4257 	movw	r2, #1111	; 0x457
 800b606:	492a      	ldr	r1, [pc, #168]	; (800b6b0 <tcp_free_acked_segments+0xe4>)
 800b608:	482a      	ldr	r0, [pc, #168]	; (800b6b4 <tcp_free_acked_segments+0xe8>)
 800b60a:	f007 fcdd 	bl	8012fc8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b614:	8a7b      	ldrh	r3, [r7, #18]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	891a      	ldrh	r2, [r3, #8]
 800b624:	4b24      	ldr	r3, [pc, #144]	; (800b6b8 <tcp_free_acked_segments+0xec>)
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	4413      	add	r3, r2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	4b22      	ldr	r3, [pc, #136]	; (800b6b8 <tcp_free_acked_segments+0xec>)
 800b62e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b630:	6978      	ldr	r0, [r7, #20]
 800b632:	f7fe f9da 	bl	80099ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00c      	beq.n	800b65a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <tcp_free_acked_segments+0x8e>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d106      	bne.n	800b65a <tcp_free_acked_segments+0x8e>
 800b64c:	4b17      	ldr	r3, [pc, #92]	; (800b6ac <tcp_free_acked_segments+0xe0>)
 800b64e:	f240 4261 	movw	r2, #1121	; 0x461
 800b652:	491a      	ldr	r1, [pc, #104]	; (800b6bc <tcp_free_acked_segments+0xf0>)
 800b654:	4817      	ldr	r0, [pc, #92]	; (800b6b4 <tcp_free_acked_segments+0xe8>)
 800b656:	f007 fcb7 	bl	8012fc8 <iprintf>
  while (seg_list != NULL &&
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d020      	beq.n	800b6a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	4618      	mov	r0, r3
 800b668:	f7fb fbaf 	bl	8006dca <lwip_htonl>
 800b66c:	4604      	mov	r4, r0
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	891b      	ldrh	r3, [r3, #8]
 800b672:	461d      	mov	r5, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	899b      	ldrh	r3, [r3, #12]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fb fb8f 	bl	8006da0 <lwip_htons>
 800b682:	4603      	mov	r3, r0
 800b684:	b2db      	uxtb	r3, r3
 800b686:	f003 0303 	and.w	r3, r3, #3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <tcp_free_acked_segments+0xc6>
 800b68e:	2301      	movs	r3, #1
 800b690:	e000      	b.n	800b694 <tcp_free_acked_segments+0xc8>
 800b692:	2300      	movs	r3, #0
 800b694:	442b      	add	r3, r5
 800b696:	18e2      	adds	r2, r4, r3
 800b698:	4b09      	ldr	r3, [pc, #36]	; (800b6c0 <tcp_free_acked_segments+0xf4>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	dd9c      	ble.n	800b5dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ac:	08015254 	.word	0x08015254
 800b6b0:	0801553c 	.word	0x0801553c
 800b6b4:	080152a0 	.word	0x080152a0
 800b6b8:	200108e8 	.word	0x200108e8
 800b6bc:	08015564 	.word	0x08015564
 800b6c0:	200108e4 	.word	0x200108e4

0800b6c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b6c4:	b5b0      	push	{r4, r5, r7, lr}
 800b6c6:	b094      	sub	sp, #80	; 0x50
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d106      	bne.n	800b6e4 <tcp_receive+0x20>
 800b6d6:	4b91      	ldr	r3, [pc, #580]	; (800b91c <tcp_receive+0x258>)
 800b6d8:	f240 427b 	movw	r2, #1147	; 0x47b
 800b6dc:	4990      	ldr	r1, [pc, #576]	; (800b920 <tcp_receive+0x25c>)
 800b6de:	4891      	ldr	r0, [pc, #580]	; (800b924 <tcp_receive+0x260>)
 800b6e0:	f007 fc72 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	7d1b      	ldrb	r3, [r3, #20]
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d806      	bhi.n	800b6fa <tcp_receive+0x36>
 800b6ec:	4b8b      	ldr	r3, [pc, #556]	; (800b91c <tcp_receive+0x258>)
 800b6ee:	f240 427c 	movw	r2, #1148	; 0x47c
 800b6f2:	498d      	ldr	r1, [pc, #564]	; (800b928 <tcp_receive+0x264>)
 800b6f4:	488b      	ldr	r0, [pc, #556]	; (800b924 <tcp_receive+0x260>)
 800b6f6:	f007 fc67 	bl	8012fc8 <iprintf>

  if (flags & TCP_ACK) {
 800b6fa:	4b8c      	ldr	r3, [pc, #560]	; (800b92c <tcp_receive+0x268>)
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b00      	cmp	r3, #0
 800b704:	f000 8264 	beq.w	800bbd0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b70e:	461a      	mov	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b714:	4413      	add	r3, r2
 800b716:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b71c:	4b84      	ldr	r3, [pc, #528]	; (800b930 <tcp_receive+0x26c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	db1b      	blt.n	800b75e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b72a:	4b81      	ldr	r3, [pc, #516]	; (800b930 <tcp_receive+0x26c>)
 800b72c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b72e:	429a      	cmp	r2, r3
 800b730:	d106      	bne.n	800b740 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b736:	4b7f      	ldr	r3, [pc, #508]	; (800b934 <tcp_receive+0x270>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	db0e      	blt.n	800b75e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b744:	4b7b      	ldr	r3, [pc, #492]	; (800b934 <tcp_receive+0x270>)
 800b746:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b748:	429a      	cmp	r2, r3
 800b74a:	d125      	bne.n	800b798 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b74c:	4b7a      	ldr	r3, [pc, #488]	; (800b938 <tcp_receive+0x274>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	89db      	ldrh	r3, [r3, #14]
 800b752:	b29a      	uxth	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d91c      	bls.n	800b798 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b75e:	4b76      	ldr	r3, [pc, #472]	; (800b938 <tcp_receive+0x274>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	89db      	ldrh	r3, [r3, #14]
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b778:	429a      	cmp	r2, r3
 800b77a:	d205      	bcs.n	800b788 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b788:	4b69      	ldr	r3, [pc, #420]	; (800b930 <tcp_receive+0x26c>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b790:	4b68      	ldr	r3, [pc, #416]	; (800b934 <tcp_receive+0x270>)
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b798:	4b66      	ldr	r3, [pc, #408]	; (800b934 <tcp_receive+0x270>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	dc58      	bgt.n	800b858 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b7a6:	4b65      	ldr	r3, [pc, #404]	; (800b93c <tcp_receive+0x278>)
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d14b      	bne.n	800b846 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b7b8:	4413      	add	r3, r2
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d142      	bne.n	800b846 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	db3d      	blt.n	800b846 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7ce:	4b59      	ldr	r3, [pc, #356]	; (800b934 <tcp_receive+0x270>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d137      	bne.n	800b846 <tcp_receive+0x182>
              found_dupack = 1;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7e0:	2bff      	cmp	r3, #255	; 0xff
 800b7e2:	d007      	beq.n	800b7f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	b2da      	uxtb	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d91b      	bls.n	800b836 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b808:	4413      	add	r3, r2
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b812:	429a      	cmp	r2, r3
 800b814:	d30a      	bcc.n	800b82c <tcp_receive+0x168>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b820:	4413      	add	r3, r2
 800b822:	b29a      	uxth	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b82a:	e004      	b.n	800b836 <tcp_receive+0x172>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b832:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d902      	bls.n	800b846 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f001 feed 	bl	800d620 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f040 8161 	bne.w	800bb10 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b856:	e15b      	b.n	800bb10 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b858:	4b36      	ldr	r3, [pc, #216]	; (800b934 <tcp_receive+0x270>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	3b01      	subs	r3, #1
 800b864:	2b00      	cmp	r3, #0
 800b866:	f2c0 814e 	blt.w	800bb06 <tcp_receive+0x442>
 800b86a:	4b32      	ldr	r3, [pc, #200]	; (800b934 <tcp_receive+0x270>)
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	f300 8146 	bgt.w	800bb06 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	8b5b      	ldrh	r3, [r3, #26]
 800b87e:	f003 0304 	and.w	r3, r3, #4
 800b882:	2b00      	cmp	r3, #0
 800b884:	d010      	beq.n	800b8a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	8b5b      	ldrh	r3, [r3, #26]
 800b88a:	f023 0304 	bic.w	r3, r3, #4
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b8b6:	10db      	asrs	r3, r3, #3
 800b8b8:	b21b      	sxth	r3, r3
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	b21a      	sxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b8d0:	4b18      	ldr	r3, [pc, #96]	; (800b934 <tcp_receive+0x270>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b8e8:	4b12      	ldr	r3, [pc, #72]	; (800b934 <tcp_receive+0x270>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	7d1b      	ldrb	r3, [r3, #20]
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	f240 8097 	bls.w	800ba28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b906:	429a      	cmp	r2, r3
 800b908:	d245      	bcs.n	800b996 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	8b5b      	ldrh	r3, [r3, #26]
 800b90e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b912:	2b00      	cmp	r3, #0
 800b914:	d014      	beq.n	800b940 <tcp_receive+0x27c>
 800b916:	2301      	movs	r3, #1
 800b918:	e013      	b.n	800b942 <tcp_receive+0x27e>
 800b91a:	bf00      	nop
 800b91c:	08015254 	.word	0x08015254
 800b920:	08015584 	.word	0x08015584
 800b924:	080152a0 	.word	0x080152a0
 800b928:	080155a0 	.word	0x080155a0
 800b92c:	200108ec 	.word	0x200108ec
 800b930:	200108e0 	.word	0x200108e0
 800b934:	200108e4 	.word	0x200108e4
 800b938:	200108d0 	.word	0x200108d0
 800b93c:	200108ea 	.word	0x200108ea
 800b940:	2302      	movs	r3, #2
 800b942:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b946:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b950:	fb12 f303 	smulbb	r3, r2, r3
 800b954:	b29b      	uxth	r3, r3
 800b956:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b958:	4293      	cmp	r3, r2
 800b95a:	bf28      	it	cs
 800b95c:	4613      	movcs	r3, r2
 800b95e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b968:	4413      	add	r3, r2
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b972:	429a      	cmp	r2, r3
 800b974:	d309      	bcc.n	800b98a <tcp_receive+0x2c6>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b97c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b97e:	4413      	add	r3, r2
 800b980:	b29a      	uxth	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b988:	e04e      	b.n	800ba28 <tcp_receive+0x364>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b990:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b994:	e048      	b.n	800ba28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b99c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b99e:	4413      	add	r3, r2
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d309      	bcc.n	800b9c0 <tcp_receive+0x2fc>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b9b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9b4:	4413      	add	r3, r2
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b9be:	e004      	b.n	800b9ca <tcp_receive+0x306>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d326      	bcc.n	800ba28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b9fa:	4413      	add	r3, r2
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d30a      	bcc.n	800ba1e <tcp_receive+0x35a>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba12:	4413      	add	r3, r2
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ba1c:	e004      	b.n	800ba28 <tcp_receive+0x364>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba30:	4a98      	ldr	r2, [pc, #608]	; (800bc94 <tcp_receive+0x5d0>)
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff fdca 	bl	800b5cc <tcp_free_acked_segments>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba46:	4a94      	ldr	r2, [pc, #592]	; (800bc98 <tcp_receive+0x5d4>)
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fdbf 	bl	800b5cc <tcp_free_acked_segments>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d104      	bne.n	800ba66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba62:	861a      	strh	r2, [r3, #48]	; 0x30
 800ba64:	e002      	b.n	800ba6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d103      	bne.n	800ba82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ba88:	4b84      	ldr	r3, [pc, #528]	; (800bc9c <tcp_receive+0x5d8>)
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	8b5b      	ldrh	r3, [r3, #26]
 800ba9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d035      	beq.n	800bb0e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d118      	bne.n	800badc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00c      	beq.n	800bacc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fb f983 	bl	8006dca <lwip_htonl>
 800bac4:	4603      	mov	r3, r0
 800bac6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bac8:	2b00      	cmp	r3, #0
 800baca:	dc20      	bgt.n	800bb0e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	8b5b      	ldrh	r3, [r3, #26]
 800bad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bada:	e018      	b.n	800bb0e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fb f96e 	bl	8006dca <lwip_htonl>
 800baee:	4603      	mov	r3, r0
 800baf0:	1ae3      	subs	r3, r4, r3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dc0b      	bgt.n	800bb0e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	8b5b      	ldrh	r3, [r3, #26]
 800bafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb04:	e003      	b.n	800bb0e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 ff76 	bl	800d9f8 <tcp_send_empty_ack>
 800bb0c:	e000      	b.n	800bb10 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bb0e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d05b      	beq.n	800bbd0 <tcp_receive+0x50c>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb1c:	4b60      	ldr	r3, [pc, #384]	; (800bca0 <tcp_receive+0x5dc>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da54      	bge.n	800bbd0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bb26:	4b5f      	ldr	r3, [pc, #380]	; (800bca4 <tcp_receive+0x5e0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bb3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb44:	10db      	asrs	r3, r3, #3
 800bb46:	b21b      	sxth	r3, r3
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb5e:	4413      	add	r3, r2
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	b21a      	sxth	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800bb68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da05      	bge.n	800bb7c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bb70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb74:	425b      	negs	r3, r3
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bb7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb86:	109b      	asrs	r3, r3, #2
 800bb88:	b21b      	sxth	r3, r3
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bba0:	4413      	add	r3, r2
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	b21a      	sxth	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bbb0:	10db      	asrs	r3, r3, #3
 800bbb2:	b21b      	sxth	r3, r3
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	4413      	add	r3, r2
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	b21a      	sxth	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bbd0:	4b35      	ldr	r3, [pc, #212]	; (800bca8 <tcp_receive+0x5e4>)
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 84e2 	beq.w	800c59e <tcp_receive+0xeda>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	7d1b      	ldrb	r3, [r3, #20]
 800bbde:	2b06      	cmp	r3, #6
 800bbe0:	f200 84dd 	bhi.w	800c59e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbe8:	4b30      	ldr	r3, [pc, #192]	; (800bcac <tcp_receive+0x5e8>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	f2c0 808f 	blt.w	800bd14 <tcp_receive+0x650>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bbfa:	4b2b      	ldr	r3, [pc, #172]	; (800bca8 <tcp_receive+0x5e4>)
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	4b2a      	ldr	r3, [pc, #168]	; (800bcac <tcp_receive+0x5e8>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	440b      	add	r3, r1
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	3301      	adds	r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f300 8082 	bgt.w	800bd14 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bc10:	4b27      	ldr	r3, [pc, #156]	; (800bcb0 <tcp_receive+0x5ec>)
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc1a:	4b24      	ldr	r3, [pc, #144]	; (800bcac <tcp_receive+0x5e8>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bc22:	4b23      	ldr	r3, [pc, #140]	; (800bcb0 <tcp_receive+0x5ec>)
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <tcp_receive+0x574>
 800bc2a:	4b22      	ldr	r3, [pc, #136]	; (800bcb4 <tcp_receive+0x5f0>)
 800bc2c:	f240 5294 	movw	r2, #1428	; 0x594
 800bc30:	4921      	ldr	r1, [pc, #132]	; (800bcb8 <tcp_receive+0x5f4>)
 800bc32:	4822      	ldr	r0, [pc, #136]	; (800bcbc <tcp_receive+0x5f8>)
 800bc34:	f007 f9c8 	bl	8012fc8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d906      	bls.n	800bc50 <tcp_receive+0x58c>
 800bc42:	4b1c      	ldr	r3, [pc, #112]	; (800bcb4 <tcp_receive+0x5f0>)
 800bc44:	f240 5295 	movw	r2, #1429	; 0x595
 800bc48:	491d      	ldr	r1, [pc, #116]	; (800bcc0 <tcp_receive+0x5fc>)
 800bc4a:	481c      	ldr	r0, [pc, #112]	; (800bcbc <tcp_receive+0x5f8>)
 800bc4c:	f007 f9bc 	bl	8012fc8 <iprintf>
      off = (u16_t)off32;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bc56:	4b16      	ldr	r3, [pc, #88]	; (800bcb0 <tcp_receive+0x5ec>)
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	891b      	ldrh	r3, [r3, #8]
 800bc5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d906      	bls.n	800bc72 <tcp_receive+0x5ae>
 800bc64:	4b13      	ldr	r3, [pc, #76]	; (800bcb4 <tcp_receive+0x5f0>)
 800bc66:	f240 5297 	movw	r2, #1431	; 0x597
 800bc6a:	4916      	ldr	r1, [pc, #88]	; (800bcc4 <tcp_receive+0x600>)
 800bc6c:	4813      	ldr	r0, [pc, #76]	; (800bcbc <tcp_receive+0x5f8>)
 800bc6e:	f007 f9ab 	bl	8012fc8 <iprintf>
      inseg.len -= off;
 800bc72:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <tcp_receive+0x5ec>)
 800bc74:	891a      	ldrh	r2, [r3, #8]
 800bc76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <tcp_receive+0x5ec>)
 800bc80:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bc82:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <tcp_receive+0x5ec>)
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	891a      	ldrh	r2, [r3, #8]
 800bc88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800bc90:	e02a      	b.n	800bce8 <tcp_receive+0x624>
 800bc92:	bf00      	nop
 800bc94:	080155bc 	.word	0x080155bc
 800bc98:	080155c4 	.word	0x080155c4
 800bc9c:	200108e8 	.word	0x200108e8
 800bca0:	200108e4 	.word	0x200108e4
 800bca4:	200108a8 	.word	0x200108a8
 800bca8:	200108ea 	.word	0x200108ea
 800bcac:	200108e0 	.word	0x200108e0
 800bcb0:	200108c0 	.word	0x200108c0
 800bcb4:	08015254 	.word	0x08015254
 800bcb8:	080155cc 	.word	0x080155cc
 800bcbc:	080152a0 	.word	0x080152a0
 800bcc0:	080155dc 	.word	0x080155dc
 800bcc4:	080155ec 	.word	0x080155ec
        off -= p->len;
 800bcc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcca:	895b      	ldrh	r3, [r3, #10]
 800bccc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bcd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bcda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bcdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcde:	2200      	movs	r2, #0
 800bce0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800bce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcea:	895b      	ldrh	r3, [r3, #10]
 800bcec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d8e9      	bhi.n	800bcc8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bcf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bcfc:	f7fc fb60 	bl	80083c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	4a91      	ldr	r2, [pc, #580]	; (800bf4c <tcp_receive+0x888>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	4b91      	ldr	r3, [pc, #580]	; (800bf50 <tcp_receive+0x88c>)
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	4a8f      	ldr	r2, [pc, #572]	; (800bf4c <tcp_receive+0x888>)
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bd12:	e00d      	b.n	800bd30 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bd14:	4b8d      	ldr	r3, [pc, #564]	; (800bf4c <tcp_receive+0x888>)
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	da06      	bge.n	800bd30 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	8b5b      	ldrh	r3, [r3, #26]
 800bd26:	f043 0302 	orr.w	r3, r3, #2
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd30:	4b86      	ldr	r3, [pc, #536]	; (800bf4c <tcp_receive+0x888>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f2c0 842a 	blt.w	800c594 <tcp_receive+0xed0>
 800bd40:	4b82      	ldr	r3, [pc, #520]	; (800bf4c <tcp_receive+0x888>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd4c:	440b      	add	r3, r1
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	3301      	adds	r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f300 841e 	bgt.w	800c594 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd5c:	4b7b      	ldr	r3, [pc, #492]	; (800bf4c <tcp_receive+0x888>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	f040 829a 	bne.w	800c29a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800bd66:	4b7a      	ldr	r3, [pc, #488]	; (800bf50 <tcp_receive+0x88c>)
 800bd68:	891c      	ldrh	r4, [r3, #8]
 800bd6a:	4b79      	ldr	r3, [pc, #484]	; (800bf50 <tcp_receive+0x88c>)
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	899b      	ldrh	r3, [r3, #12]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fb f814 	bl	8006da0 <lwip_htons>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 0303 	and.w	r3, r3, #3
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <tcp_receive+0x6c4>
 800bd84:	2301      	movs	r3, #1
 800bd86:	e000      	b.n	800bd8a <tcp_receive+0x6c6>
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4423      	add	r3, r4
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	4b71      	ldr	r3, [pc, #452]	; (800bf54 <tcp_receive+0x890>)
 800bd90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd96:	4b6f      	ldr	r3, [pc, #444]	; (800bf54 <tcp_receive+0x890>)
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d275      	bcs.n	800be8a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bd9e:	4b6c      	ldr	r3, [pc, #432]	; (800bf50 <tcp_receive+0x88c>)
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	899b      	ldrh	r3, [r3, #12]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fa fffa 	bl	8006da0 <lwip_htons>
 800bdac:	4603      	mov	r3, r0
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d01f      	beq.n	800bdf8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bdb8:	4b65      	ldr	r3, [pc, #404]	; (800bf50 <tcp_receive+0x88c>)
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	b21b      	sxth	r3, r3
 800bdc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bdc6:	b21c      	sxth	r4, r3
 800bdc8:	4b61      	ldr	r3, [pc, #388]	; (800bf50 <tcp_receive+0x88c>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	899b      	ldrh	r3, [r3, #12]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fa ffe5 	bl	8006da0 <lwip_htons>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fa ffdc 	bl	8006da0 <lwip_htons>
 800bde8:	4603      	mov	r3, r0
 800bdea:	b21b      	sxth	r3, r3
 800bdec:	4323      	orrs	r3, r4
 800bdee:	b21a      	sxth	r2, r3
 800bdf0:	4b57      	ldr	r3, [pc, #348]	; (800bf50 <tcp_receive+0x88c>)
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	b292      	uxth	r2, r2
 800bdf6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bdfc:	4b54      	ldr	r3, [pc, #336]	; (800bf50 <tcp_receive+0x88c>)
 800bdfe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800be00:	4b53      	ldr	r3, [pc, #332]	; (800bf50 <tcp_receive+0x88c>)
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	899b      	ldrh	r3, [r3, #12]
 800be06:	b29b      	uxth	r3, r3
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fa ffc9 	bl	8006da0 <lwip_htons>
 800be0e:	4603      	mov	r3, r0
 800be10:	b2db      	uxtb	r3, r3
 800be12:	f003 0302 	and.w	r3, r3, #2
 800be16:	2b00      	cmp	r3, #0
 800be18:	d005      	beq.n	800be26 <tcp_receive+0x762>
            inseg.len -= 1;
 800be1a:	4b4d      	ldr	r3, [pc, #308]	; (800bf50 <tcp_receive+0x88c>)
 800be1c:	891b      	ldrh	r3, [r3, #8]
 800be1e:	3b01      	subs	r3, #1
 800be20:	b29a      	uxth	r2, r3
 800be22:	4b4b      	ldr	r3, [pc, #300]	; (800bf50 <tcp_receive+0x88c>)
 800be24:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800be26:	4b4a      	ldr	r3, [pc, #296]	; (800bf50 <tcp_receive+0x88c>)
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	4a49      	ldr	r2, [pc, #292]	; (800bf50 <tcp_receive+0x88c>)
 800be2c:	8912      	ldrh	r2, [r2, #8]
 800be2e:	4611      	mov	r1, r2
 800be30:	4618      	mov	r0, r3
 800be32:	f7fc f9c5 	bl	80081c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800be36:	4b46      	ldr	r3, [pc, #280]	; (800bf50 <tcp_receive+0x88c>)
 800be38:	891c      	ldrh	r4, [r3, #8]
 800be3a:	4b45      	ldr	r3, [pc, #276]	; (800bf50 <tcp_receive+0x88c>)
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	899b      	ldrh	r3, [r3, #12]
 800be40:	b29b      	uxth	r3, r3
 800be42:	4618      	mov	r0, r3
 800be44:	f7fa ffac 	bl	8006da0 <lwip_htons>
 800be48:	4603      	mov	r3, r0
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f003 0303 	and.w	r3, r3, #3
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <tcp_receive+0x794>
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <tcp_receive+0x796>
 800be58:	2300      	movs	r3, #0
 800be5a:	4423      	add	r3, r4
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	4b3d      	ldr	r3, [pc, #244]	; (800bf54 <tcp_receive+0x890>)
 800be60:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800be62:	4b3c      	ldr	r3, [pc, #240]	; (800bf54 <tcp_receive+0x890>)
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	4b38      	ldr	r3, [pc, #224]	; (800bf4c <tcp_receive+0x888>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	441a      	add	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be76:	440b      	add	r3, r1
 800be78:	429a      	cmp	r2, r3
 800be7a:	d006      	beq.n	800be8a <tcp_receive+0x7c6>
 800be7c:	4b36      	ldr	r3, [pc, #216]	; (800bf58 <tcp_receive+0x894>)
 800be7e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800be82:	4936      	ldr	r1, [pc, #216]	; (800bf5c <tcp_receive+0x898>)
 800be84:	4836      	ldr	r0, [pc, #216]	; (800bf60 <tcp_receive+0x89c>)
 800be86:	f007 f89f 	bl	8012fc8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80e7 	beq.w	800c062 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be94:	4b2e      	ldr	r3, [pc, #184]	; (800bf50 <tcp_receive+0x88c>)
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	899b      	ldrh	r3, [r3, #12]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fa ff7f 	bl	8006da0 <lwip_htons>
 800bea2:	4603      	mov	r3, r0
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d010      	beq.n	800bed0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800beae:	e00a      	b.n	800bec6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beb4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7fd fd92 	bl	80099ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1f0      	bne.n	800beb0 <tcp_receive+0x7ec>
 800bece:	e0c8      	b.n	800c062 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bed6:	e052      	b.n	800bf7e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	899b      	ldrh	r3, [r3, #12]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fa ff5d 	bl	8006da0 <lwip_htons>
 800bee6:	4603      	mov	r3, r0
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	f003 0301 	and.w	r3, r3, #1
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d03d      	beq.n	800bf6e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bef2:	4b17      	ldr	r3, [pc, #92]	; (800bf50 <tcp_receive+0x88c>)
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	899b      	ldrh	r3, [r3, #12]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	4618      	mov	r0, r3
 800befc:	f7fa ff50 	bl	8006da0 <lwip_htons>
 800bf00:	4603      	mov	r3, r0
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d130      	bne.n	800bf6e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bf0c:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <tcp_receive+0x88c>)
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	899b      	ldrh	r3, [r3, #12]
 800bf12:	b29c      	uxth	r4, r3
 800bf14:	2001      	movs	r0, #1
 800bf16:	f7fa ff43 	bl	8006da0 <lwip_htons>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	4b0c      	ldr	r3, [pc, #48]	; (800bf50 <tcp_receive+0x88c>)
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	4322      	orrs	r2, r4
 800bf24:	b292      	uxth	r2, r2
 800bf26:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bf28:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <tcp_receive+0x88c>)
 800bf2a:	891c      	ldrh	r4, [r3, #8]
 800bf2c:	4b08      	ldr	r3, [pc, #32]	; (800bf50 <tcp_receive+0x88c>)
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	899b      	ldrh	r3, [r3, #12]
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fa ff33 	bl	8006da0 <lwip_htons>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00e      	beq.n	800bf64 <tcp_receive+0x8a0>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e00d      	b.n	800bf66 <tcp_receive+0x8a2>
 800bf4a:	bf00      	nop
 800bf4c:	200108e0 	.word	0x200108e0
 800bf50:	200108c0 	.word	0x200108c0
 800bf54:	200108ea 	.word	0x200108ea
 800bf58:	08015254 	.word	0x08015254
 800bf5c:	080155fc 	.word	0x080155fc
 800bf60:	080152a0 	.word	0x080152a0
 800bf64:	2300      	movs	r3, #0
 800bf66:	4423      	add	r3, r4
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	4b98      	ldr	r3, [pc, #608]	; (800c1cc <tcp_receive+0xb08>)
 800bf6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bf6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf70:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bf78:	6938      	ldr	r0, [r7, #16]
 800bf7a:	f7fd fd36 	bl	80099ea <tcp_seg_free>
            while (next &&
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00e      	beq.n	800bfa2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bf84:	4b91      	ldr	r3, [pc, #580]	; (800c1cc <tcp_receive+0xb08>)
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	4b91      	ldr	r3, [pc, #580]	; (800c1d0 <tcp_receive+0xb0c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	441a      	add	r2, r3
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf98:	8909      	ldrh	r1, [r1, #8]
 800bf9a:	440b      	add	r3, r1
 800bf9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	da9a      	bge.n	800bed8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d059      	beq.n	800c05c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bfa8:	4b88      	ldr	r3, [pc, #544]	; (800c1cc <tcp_receive+0xb08>)
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	461a      	mov	r2, r3
 800bfae:	4b88      	ldr	r3, [pc, #544]	; (800c1d0 <tcp_receive+0xb0c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	441a      	add	r2, r3
 800bfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd4d      	ble.n	800c05c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	4b81      	ldr	r3, [pc, #516]	; (800c1d0 <tcp_receive+0xb0c>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	4b80      	ldr	r3, [pc, #512]	; (800c1d4 <tcp_receive+0xb10>)
 800bfd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bfd6:	4b7f      	ldr	r3, [pc, #508]	; (800c1d4 <tcp_receive+0xb10>)
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	899b      	ldrh	r3, [r3, #12]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fa fede 	bl	8006da0 <lwip_htons>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d005      	beq.n	800bffc <tcp_receive+0x938>
                inseg.len -= 1;
 800bff0:	4b78      	ldr	r3, [pc, #480]	; (800c1d4 <tcp_receive+0xb10>)
 800bff2:	891b      	ldrh	r3, [r3, #8]
 800bff4:	3b01      	subs	r3, #1
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	4b76      	ldr	r3, [pc, #472]	; (800c1d4 <tcp_receive+0xb10>)
 800bffa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bffc:	4b75      	ldr	r3, [pc, #468]	; (800c1d4 <tcp_receive+0xb10>)
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4a74      	ldr	r2, [pc, #464]	; (800c1d4 <tcp_receive+0xb10>)
 800c002:	8912      	ldrh	r2, [r2, #8]
 800c004:	4611      	mov	r1, r2
 800c006:	4618      	mov	r0, r3
 800c008:	f7fc f8da 	bl	80081c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c00c:	4b71      	ldr	r3, [pc, #452]	; (800c1d4 <tcp_receive+0xb10>)
 800c00e:	891c      	ldrh	r4, [r3, #8]
 800c010:	4b70      	ldr	r3, [pc, #448]	; (800c1d4 <tcp_receive+0xb10>)
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	899b      	ldrh	r3, [r3, #12]
 800c016:	b29b      	uxth	r3, r3
 800c018:	4618      	mov	r0, r3
 800c01a:	f7fa fec1 	bl	8006da0 <lwip_htons>
 800c01e:	4603      	mov	r3, r0
 800c020:	b2db      	uxtb	r3, r3
 800c022:	f003 0303 	and.w	r3, r3, #3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <tcp_receive+0x96a>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <tcp_receive+0x96c>
 800c02e:	2300      	movs	r3, #0
 800c030:	4423      	add	r3, r4
 800c032:	b29a      	uxth	r2, r3
 800c034:	4b65      	ldr	r3, [pc, #404]	; (800c1cc <tcp_receive+0xb08>)
 800c036:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c038:	4b64      	ldr	r3, [pc, #400]	; (800c1cc <tcp_receive+0xb08>)
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	461a      	mov	r2, r3
 800c03e:	4b64      	ldr	r3, [pc, #400]	; (800c1d0 <tcp_receive+0xb0c>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	441a      	add	r2, r3
 800c044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d006      	beq.n	800c05c <tcp_receive+0x998>
 800c04e:	4b62      	ldr	r3, [pc, #392]	; (800c1d8 <tcp_receive+0xb14>)
 800c050:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c054:	4961      	ldr	r1, [pc, #388]	; (800c1dc <tcp_receive+0xb18>)
 800c056:	4862      	ldr	r0, [pc, #392]	; (800c1e0 <tcp_receive+0xb1c>)
 800c058:	f006 ffb6 	bl	8012fc8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c060:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c062:	4b5a      	ldr	r3, [pc, #360]	; (800c1cc <tcp_receive+0xb08>)
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	4b59      	ldr	r3, [pc, #356]	; (800c1d0 <tcp_receive+0xb0c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	441a      	add	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c076:	4b55      	ldr	r3, [pc, #340]	; (800c1cc <tcp_receive+0xb08>)
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d206      	bcs.n	800c08c <tcp_receive+0x9c8>
 800c07e:	4b56      	ldr	r3, [pc, #344]	; (800c1d8 <tcp_receive+0xb14>)
 800c080:	f240 6207 	movw	r2, #1543	; 0x607
 800c084:	4957      	ldr	r1, [pc, #348]	; (800c1e4 <tcp_receive+0xb20>)
 800c086:	4856      	ldr	r0, [pc, #344]	; (800c1e0 <tcp_receive+0xb1c>)
 800c088:	f006 ff9e 	bl	8012fc8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c090:	4b4e      	ldr	r3, [pc, #312]	; (800c1cc <tcp_receive+0xb08>)
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7fc ffc5 	bl	800902c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c0a2:	4b4c      	ldr	r3, [pc, #304]	; (800c1d4 <tcp_receive+0xb10>)
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	891b      	ldrh	r3, [r3, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d006      	beq.n	800c0ba <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800c0ac:	4b49      	ldr	r3, [pc, #292]	; (800c1d4 <tcp_receive+0xb10>)
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	4a4d      	ldr	r2, [pc, #308]	; (800c1e8 <tcp_receive+0xb24>)
 800c0b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c0b4:	4b47      	ldr	r3, [pc, #284]	; (800c1d4 <tcp_receive+0xb10>)
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c0ba:	4b46      	ldr	r3, [pc, #280]	; (800c1d4 <tcp_receive+0xb10>)
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	899b      	ldrh	r3, [r3, #12]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fa fe6c 	bl	8006da0 <lwip_htons>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	f003 0301 	and.w	r3, r3, #1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 80b8 	beq.w	800c246 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c0d6:	4b45      	ldr	r3, [pc, #276]	; (800c1ec <tcp_receive+0xb28>)
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	f043 0320 	orr.w	r3, r3, #32
 800c0de:	b2da      	uxtb	r2, r3
 800c0e0:	4b42      	ldr	r3, [pc, #264]	; (800c1ec <tcp_receive+0xb28>)
 800c0e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c0e4:	e0af      	b.n	800c246 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	4a36      	ldr	r2, [pc, #216]	; (800c1d0 <tcp_receive+0xb0c>)
 800c0f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	891b      	ldrh	r3, [r3, #8]
 800c0fc:	461c      	mov	r4, r3
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	899b      	ldrh	r3, [r3, #12]
 800c104:	b29b      	uxth	r3, r3
 800c106:	4618      	mov	r0, r3
 800c108:	f7fa fe4a 	bl	8006da0 <lwip_htons>
 800c10c:	4603      	mov	r3, r0
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	f003 0303 	and.w	r3, r3, #3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <tcp_receive+0xa58>
 800c118:	2301      	movs	r3, #1
 800c11a:	e000      	b.n	800c11e <tcp_receive+0xa5a>
 800c11c:	2300      	movs	r3, #0
 800c11e:	191a      	adds	r2, r3, r4
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c12e:	461c      	mov	r4, r3
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	891b      	ldrh	r3, [r3, #8]
 800c134:	461d      	mov	r5, r3
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	899b      	ldrh	r3, [r3, #12]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fa fe2e 	bl	8006da0 <lwip_htons>
 800c144:	4603      	mov	r3, r0
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <tcp_receive+0xa90>
 800c150:	2301      	movs	r3, #1
 800c152:	e000      	b.n	800c156 <tcp_receive+0xa92>
 800c154:	2300      	movs	r3, #0
 800c156:	442b      	add	r3, r5
 800c158:	429c      	cmp	r4, r3
 800c15a:	d206      	bcs.n	800c16a <tcp_receive+0xaa6>
 800c15c:	4b1e      	ldr	r3, [pc, #120]	; (800c1d8 <tcp_receive+0xb14>)
 800c15e:	f240 622b 	movw	r2, #1579	; 0x62b
 800c162:	4923      	ldr	r1, [pc, #140]	; (800c1f0 <tcp_receive+0xb2c>)
 800c164:	481e      	ldr	r0, [pc, #120]	; (800c1e0 <tcp_receive+0xb1c>)
 800c166:	f006 ff2f 	bl	8012fc8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	891b      	ldrh	r3, [r3, #8]
 800c16e:	461c      	mov	r4, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	899b      	ldrh	r3, [r3, #12]
 800c176:	b29b      	uxth	r3, r3
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fa fe11 	bl	8006da0 <lwip_htons>
 800c17e:	4603      	mov	r3, r0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	f003 0303 	and.w	r3, r3, #3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <tcp_receive+0xaca>
 800c18a:	2301      	movs	r3, #1
 800c18c:	e000      	b.n	800c190 <tcp_receive+0xacc>
 800c18e:	2300      	movs	r3, #0
 800c190:	1919      	adds	r1, r3, r4
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c196:	b28b      	uxth	r3, r1
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7fc ff43 	bl	800902c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	891b      	ldrh	r3, [r3, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d028      	beq.n	800c202 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c1b0:	4b0d      	ldr	r3, [pc, #52]	; (800c1e8 <tcp_receive+0xb24>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d01d      	beq.n	800c1f4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800c1b8:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <tcp_receive+0xb24>)
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	f7fc fa50 	bl	8008668 <pbuf_cat>
 800c1c8:	e018      	b.n	800c1fc <tcp_receive+0xb38>
 800c1ca:	bf00      	nop
 800c1cc:	200108ea 	.word	0x200108ea
 800c1d0:	200108e0 	.word	0x200108e0
 800c1d4:	200108c0 	.word	0x200108c0
 800c1d8:	08015254 	.word	0x08015254
 800c1dc:	08015634 	.word	0x08015634
 800c1e0:	080152a0 	.word	0x080152a0
 800c1e4:	08015670 	.word	0x08015670
 800c1e8:	200108f0 	.word	0x200108f0
 800c1ec:	200108ed 	.word	0x200108ed
 800c1f0:	08015690 	.word	0x08015690
            } else {
              recv_data = cseg->p;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	4a70      	ldr	r2, [pc, #448]	; (800c3bc <tcp_receive+0xcf8>)
 800c1fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2200      	movs	r2, #0
 800c200:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	899b      	ldrh	r3, [r3, #12]
 800c208:	b29b      	uxth	r3, r3
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fa fdc8 	bl	8006da0 <lwip_htons>
 800c210:	4603      	mov	r3, r0
 800c212:	b2db      	uxtb	r3, r3
 800c214:	f003 0301 	and.w	r3, r3, #1
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00d      	beq.n	800c238 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c21c:	4b68      	ldr	r3, [pc, #416]	; (800c3c0 <tcp_receive+0xcfc>)
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	f043 0320 	orr.w	r3, r3, #32
 800c224:	b2da      	uxtb	r2, r3
 800c226:	4b66      	ldr	r3, [pc, #408]	; (800c3c0 <tcp_receive+0xcfc>)
 800c228:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7d1b      	ldrb	r3, [r3, #20]
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d102      	bne.n	800c238 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2207      	movs	r2, #7
 800c236:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800c240:	68b8      	ldr	r0, [r7, #8]
 800c242:	f7fd fbd2 	bl	80099ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d008      	beq.n	800c260 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800c25a:	429a      	cmp	r2, r3
 800c25c:	f43f af43 	beq.w	800c0e6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	8b5b      	ldrh	r3, [r3, #26]
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00e      	beq.n	800c28a <tcp_receive+0xbc6>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	8b5b      	ldrh	r3, [r3, #26]
 800c270:	f023 0301 	bic.w	r3, r3, #1
 800c274:	b29a      	uxth	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	835a      	strh	r2, [r3, #26]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	8b5b      	ldrh	r3, [r3, #26]
 800c27e:	f043 0302 	orr.w	r3, r3, #2
 800c282:	b29a      	uxth	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c288:	e188      	b.n	800c59c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8b5b      	ldrh	r3, [r3, #26]
 800c28e:	f043 0301 	orr.w	r3, r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c298:	e180      	b.n	800c59c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c2a2:	4848      	ldr	r0, [pc, #288]	; (800c3c4 <tcp_receive+0xd00>)
 800c2a4:	f7fd fbba 	bl	8009a1c <tcp_seg_copy>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	675a      	str	r2, [r3, #116]	; 0x74
 800c2ae:	e16d      	b.n	800c58c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2ba:	e157      	b.n	800c56c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	4b41      	ldr	r3, [pc, #260]	; (800c3c8 <tcp_receive+0xd04>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d11d      	bne.n	800c306 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c2ca:	4b3e      	ldr	r3, [pc, #248]	; (800c3c4 <tcp_receive+0xd00>)
 800c2cc:	891a      	ldrh	r2, [r3, #8]
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	891b      	ldrh	r3, [r3, #8]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	f240 814f 	bls.w	800c576 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c2d8:	483a      	ldr	r0, [pc, #232]	; (800c3c4 <tcp_receive+0xd00>)
 800c2da:	f7fd fb9f 	bl	8009a1c <tcp_seg_copy>
 800c2de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 8149 	beq.w	800c57a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800c2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800c2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	e002      	b.n	800c2fc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c2fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c2fe:	6978      	ldr	r0, [r7, #20]
 800c300:	f7ff f8dc 	bl	800b4bc <tcp_oos_insert_segment>
                }
                break;
 800c304:	e139      	b.n	800c57a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d117      	bne.n	800c33c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c30c:	4b2e      	ldr	r3, [pc, #184]	; (800c3c8 <tcp_receive+0xd04>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da57      	bge.n	800c3cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c31c:	4829      	ldr	r0, [pc, #164]	; (800c3c4 <tcp_receive+0xd00>)
 800c31e:	f7fd fb7d 	bl	8009a1c <tcp_seg_copy>
 800c322:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2b00      	cmp	r3, #0
 800c328:	f000 8129 	beq.w	800c57e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	69ba      	ldr	r2, [r7, #24]
 800c330:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c334:	69b8      	ldr	r0, [r7, #24]
 800c336:	f7ff f8c1 	bl	800b4bc <tcp_oos_insert_segment>
                  }
                  break;
 800c33a:	e120      	b.n	800c57e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c33c:	4b22      	ldr	r3, [pc, #136]	; (800c3c8 <tcp_receive+0xd04>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	3b01      	subs	r3, #1
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	db3e      	blt.n	800c3cc <tcp_receive+0xd08>
 800c34e:	4b1e      	ldr	r3, [pc, #120]	; (800c3c8 <tcp_receive+0xd04>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	3301      	adds	r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	dc35      	bgt.n	800c3cc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c360:	4818      	ldr	r0, [pc, #96]	; (800c3c4 <tcp_receive+0xd00>)
 800c362:	f7fd fb5b 	bl	8009a1c <tcp_seg_copy>
 800c366:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c368:	69fb      	ldr	r3, [r7, #28]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 8109 	beq.w	800c582 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c378:	8912      	ldrh	r2, [r2, #8]
 800c37a:	441a      	add	r2, r3
 800c37c:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <tcp_receive+0xd04>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	dd12      	ble.n	800c3ac <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <tcp_receive+0xd04>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	b29b      	uxth	r3, r3
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	b29a      	uxth	r2, r3
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a2:	891b      	ldrh	r3, [r3, #8]
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	f7fb ff0a 	bl	80081c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ae:	69fa      	ldr	r2, [r7, #28]
 800c3b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c3b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3b4:	69f8      	ldr	r0, [r7, #28]
 800c3b6:	f7ff f881 	bl	800b4bc <tcp_oos_insert_segment>
                  }
                  break;
 800c3ba:	e0e2      	b.n	800c582 <tcp_receive+0xebe>
 800c3bc:	200108f0 	.word	0x200108f0
 800c3c0:	200108ed 	.word	0x200108ed
 800c3c4:	200108c0 	.word	0x200108c0
 800c3c8:	200108e0 	.word	0x200108e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f040 80c6 	bne.w	800c566 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c3da:	4b80      	ldr	r3, [pc, #512]	; (800c5dc <tcp_receive+0xf18>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f340 80bd 	ble.w	800c566 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	899b      	ldrh	r3, [r3, #12]
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fa fcd3 	bl	8006da0 <lwip_htons>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	2b00      	cmp	r3, #0
 800c404:	f040 80bf 	bne.w	800c586 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c408:	4875      	ldr	r0, [pc, #468]	; (800c5e0 <tcp_receive+0xf1c>)
 800c40a:	f7fd fb07 	bl	8009a1c <tcp_seg_copy>
 800c40e:	4602      	mov	r2, r0
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 80b6 	beq.w	800c58a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c426:	8912      	ldrh	r2, [r2, #8]
 800c428:	441a      	add	r2, r3
 800c42a:	4b6c      	ldr	r3, [pc, #432]	; (800c5dc <tcp_receive+0xf18>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b00      	cmp	r3, #0
 800c432:	dd12      	ble.n	800c45a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c434:	4b69      	ldr	r3, [pc, #420]	; (800c5dc <tcp_receive+0xf18>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	b29a      	uxth	r2, r3
 800c43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	b29b      	uxth	r3, r3
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	b29a      	uxth	r2, r3
 800c446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c448:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	891b      	ldrh	r3, [r3, #8]
 800c452:	4619      	mov	r1, r3
 800c454:	4610      	mov	r0, r2
 800c456:	f7fb feb3 	bl	80081c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c45a:	4b62      	ldr	r3, [pc, #392]	; (800c5e4 <tcp_receive+0xf20>)
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	4b5e      	ldr	r3, [pc, #376]	; (800c5dc <tcp_receive+0xf18>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	441a      	add	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c46e:	440b      	add	r3, r1
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	f340 8089 	ble.w	800c58a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	899b      	ldrh	r3, [r3, #12]
 800c480:	b29b      	uxth	r3, r3
 800c482:	4618      	mov	r0, r3
 800c484:	f7fa fc8c 	bl	8006da0 <lwip_htons>
 800c488:	4603      	mov	r3, r0
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	f003 0301 	and.w	r3, r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	d022      	beq.n	800c4da <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	899b      	ldrh	r3, [r3, #12]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	b21b      	sxth	r3, r3
 800c4a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c4a4:	b21c      	sxth	r4, r3
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	899b      	ldrh	r3, [r3, #12]
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fa fc75 	bl	8006da0 <lwip_htons>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fa fc6c 	bl	8006da0 <lwip_htons>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	b21b      	sxth	r3, r3
 800c4cc:	4323      	orrs	r3, r4
 800c4ce:	b21a      	sxth	r2, r3
 800c4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	b292      	uxth	r2, r2
 800c4d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e4:	4413      	add	r3, r2
 800c4e6:	b299      	uxth	r1, r3
 800c4e8:	4b3c      	ldr	r3, [pc, #240]	; (800c5dc <tcp_receive+0xf18>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	1a8a      	subs	r2, r1, r2
 800c4f4:	b292      	uxth	r2, r2
 800c4f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685a      	ldr	r2, [r3, #4]
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	891b      	ldrh	r3, [r3, #8]
 800c504:	4619      	mov	r1, r3
 800c506:	4610      	mov	r0, r2
 800c508:	f7fb fe5a 	bl	80081c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	891c      	ldrh	r4, [r3, #8]
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	899b      	ldrh	r3, [r3, #12]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fa fc3f 	bl	8006da0 <lwip_htons>
 800c522:	4603      	mov	r3, r0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	f003 0303 	and.w	r3, r3, #3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <tcp_receive+0xe6e>
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <tcp_receive+0xe70>
 800c532:	2300      	movs	r3, #0
 800c534:	4423      	add	r3, r4
 800c536:	b29a      	uxth	r2, r3
 800c538:	4b2a      	ldr	r3, [pc, #168]	; (800c5e4 <tcp_receive+0xf20>)
 800c53a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c53c:	4b29      	ldr	r3, [pc, #164]	; (800c5e4 <tcp_receive+0xf20>)
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	461a      	mov	r2, r3
 800c542:	4b26      	ldr	r3, [pc, #152]	; (800c5dc <tcp_receive+0xf18>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	441a      	add	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	6879      	ldr	r1, [r7, #4]
 800c54e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c550:	440b      	add	r3, r1
 800c552:	429a      	cmp	r2, r3
 800c554:	d019      	beq.n	800c58a <tcp_receive+0xec6>
 800c556:	4b24      	ldr	r3, [pc, #144]	; (800c5e8 <tcp_receive+0xf24>)
 800c558:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c55c:	4923      	ldr	r1, [pc, #140]	; (800c5ec <tcp_receive+0xf28>)
 800c55e:	4824      	ldr	r0, [pc, #144]	; (800c5f0 <tcp_receive+0xf2c>)
 800c560:	f006 fd32 	bl	8012fc8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c564:	e011      	b.n	800c58a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f47f aea4 	bne.w	800c2bc <tcp_receive+0xbf8>
 800c574:	e00a      	b.n	800c58c <tcp_receive+0xec8>
                break;
 800c576:	bf00      	nop
 800c578:	e008      	b.n	800c58c <tcp_receive+0xec8>
                break;
 800c57a:	bf00      	nop
 800c57c:	e006      	b.n	800c58c <tcp_receive+0xec8>
                  break;
 800c57e:	bf00      	nop
 800c580:	e004      	b.n	800c58c <tcp_receive+0xec8>
                  break;
 800c582:	bf00      	nop
 800c584:	e002      	b.n	800c58c <tcp_receive+0xec8>
                  break;
 800c586:	bf00      	nop
 800c588:	e000      	b.n	800c58c <tcp_receive+0xec8>
                break;
 800c58a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f001 fa33 	bl	800d9f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c592:	e003      	b.n	800c59c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f001 fa2f 	bl	800d9f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c59a:	e01a      	b.n	800c5d2 <tcp_receive+0xf0e>
 800c59c:	e019      	b.n	800c5d2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <tcp_receive+0xf18>)
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	db0a      	blt.n	800c5c2 <tcp_receive+0xefe>
 800c5ac:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <tcp_receive+0xf18>)
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c5b8:	440b      	add	r3, r1
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	3301      	adds	r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	dd07      	ble.n	800c5d2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	8b5b      	ldrh	r3, [r3, #26]
 800c5c6:	f043 0302 	orr.w	r3, r3, #2
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c5d0:	e7ff      	b.n	800c5d2 <tcp_receive+0xf0e>
 800c5d2:	bf00      	nop
 800c5d4:	3750      	adds	r7, #80	; 0x50
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	200108e0 	.word	0x200108e0
 800c5e0:	200108c0 	.word	0x200108c0
 800c5e4:	200108ea 	.word	0x200108ea
 800c5e8:	08015254 	.word	0x08015254
 800c5ec:	080155fc 	.word	0x080155fc
 800c5f0:	080152a0 	.word	0x080152a0

0800c5f4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c5fa:	4b15      	ldr	r3, [pc, #84]	; (800c650 <tcp_get_next_optbyte+0x5c>)
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	b291      	uxth	r1, r2
 800c602:	4a13      	ldr	r2, [pc, #76]	; (800c650 <tcp_get_next_optbyte+0x5c>)
 800c604:	8011      	strh	r1, [r2, #0]
 800c606:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c608:	4b12      	ldr	r3, [pc, #72]	; (800c654 <tcp_get_next_optbyte+0x60>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <tcp_get_next_optbyte+0x26>
 800c610:	4b11      	ldr	r3, [pc, #68]	; (800c658 <tcp_get_next_optbyte+0x64>)
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	88fa      	ldrh	r2, [r7, #6]
 800c616:	429a      	cmp	r2, r3
 800c618:	d208      	bcs.n	800c62c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c61a:	4b10      	ldr	r3, [pc, #64]	; (800c65c <tcp_get_next_optbyte+0x68>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3314      	adds	r3, #20
 800c620:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c622:	88fb      	ldrh	r3, [r7, #6]
 800c624:	683a      	ldr	r2, [r7, #0]
 800c626:	4413      	add	r3, r2
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	e00b      	b.n	800c644 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c62c:	88fb      	ldrh	r3, [r7, #6]
 800c62e:	b2da      	uxtb	r2, r3
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <tcp_get_next_optbyte+0x64>)
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	b2db      	uxtb	r3, r3
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c63a:	4b06      	ldr	r3, [pc, #24]	; (800c654 <tcp_get_next_optbyte+0x60>)
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	797b      	ldrb	r3, [r7, #5]
 800c640:	4413      	add	r3, r2
 800c642:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	200108dc 	.word	0x200108dc
 800c654:	200108d8 	.word	0x200108d8
 800c658:	200108d6 	.word	0x200108d6
 800c65c:	200108d0 	.word	0x200108d0

0800c660 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d106      	bne.n	800c67c <tcp_parseopt+0x1c>
 800c66e:	4b32      	ldr	r3, [pc, #200]	; (800c738 <tcp_parseopt+0xd8>)
 800c670:	f240 727d 	movw	r2, #1917	; 0x77d
 800c674:	4931      	ldr	r1, [pc, #196]	; (800c73c <tcp_parseopt+0xdc>)
 800c676:	4832      	ldr	r0, [pc, #200]	; (800c740 <tcp_parseopt+0xe0>)
 800c678:	f006 fca6 	bl	8012fc8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c67c:	4b31      	ldr	r3, [pc, #196]	; (800c744 <tcp_parseopt+0xe4>)
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d055      	beq.n	800c730 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c684:	4b30      	ldr	r3, [pc, #192]	; (800c748 <tcp_parseopt+0xe8>)
 800c686:	2200      	movs	r2, #0
 800c688:	801a      	strh	r2, [r3, #0]
 800c68a:	e045      	b.n	800c718 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c68c:	f7ff ffb2 	bl	800c5f4 <tcp_get_next_optbyte>
 800c690:	4603      	mov	r3, r0
 800c692:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	2b02      	cmp	r3, #2
 800c698:	d006      	beq.n	800c6a8 <tcp_parseopt+0x48>
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	dc2b      	bgt.n	800c6f6 <tcp_parseopt+0x96>
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d041      	beq.n	800c726 <tcp_parseopt+0xc6>
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d127      	bne.n	800c6f6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c6a6:	e037      	b.n	800c718 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c6a8:	f7ff ffa4 	bl	800c5f4 <tcp_get_next_optbyte>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b04      	cmp	r3, #4
 800c6b0:	d13b      	bne.n	800c72a <tcp_parseopt+0xca>
 800c6b2:	4b25      	ldr	r3, [pc, #148]	; (800c748 <tcp_parseopt+0xe8>)
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	4a22      	ldr	r2, [pc, #136]	; (800c744 <tcp_parseopt+0xe4>)
 800c6ba:	8812      	ldrh	r2, [r2, #0]
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	da34      	bge.n	800c72a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c6c0:	f7ff ff98 	bl	800c5f4 <tcp_get_next_optbyte>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	021b      	lsls	r3, r3, #8
 800c6ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c6cc:	f7ff ff92 	bl	800c5f4 <tcp_get_next_optbyte>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	89bb      	ldrh	r3, [r7, #12]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c6da:	89bb      	ldrh	r3, [r7, #12]
 800c6dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c6e0:	d804      	bhi.n	800c6ec <tcp_parseopt+0x8c>
 800c6e2:	89bb      	ldrh	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d001      	beq.n	800c6ec <tcp_parseopt+0x8c>
 800c6e8:	89ba      	ldrh	r2, [r7, #12]
 800c6ea:	e001      	b.n	800c6f0 <tcp_parseopt+0x90>
 800c6ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c6f4:	e010      	b.n	800c718 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c6f6:	f7ff ff7d 	bl	800c5f4 <tcp_get_next_optbyte>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c6fe:	7afb      	ldrb	r3, [r7, #11]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d914      	bls.n	800c72e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	b29a      	uxth	r2, r3
 800c708:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <tcp_parseopt+0xe8>)
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	4413      	add	r3, r2
 800c70e:	b29b      	uxth	r3, r3
 800c710:	3b02      	subs	r3, #2
 800c712:	b29a      	uxth	r2, r3
 800c714:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <tcp_parseopt+0xe8>)
 800c716:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c718:	4b0b      	ldr	r3, [pc, #44]	; (800c748 <tcp_parseopt+0xe8>)
 800c71a:	881a      	ldrh	r2, [r3, #0]
 800c71c:	4b09      	ldr	r3, [pc, #36]	; (800c744 <tcp_parseopt+0xe4>)
 800c71e:	881b      	ldrh	r3, [r3, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d3b3      	bcc.n	800c68c <tcp_parseopt+0x2c>
 800c724:	e004      	b.n	800c730 <tcp_parseopt+0xd0>
          return;
 800c726:	bf00      	nop
 800c728:	e002      	b.n	800c730 <tcp_parseopt+0xd0>
            return;
 800c72a:	bf00      	nop
 800c72c:	e000      	b.n	800c730 <tcp_parseopt+0xd0>
            return;
 800c72e:	bf00      	nop
      }
    }
  }
}
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	08015254 	.word	0x08015254
 800c73c:	080156b8 	.word	0x080156b8
 800c740:	080152a0 	.word	0x080152a0
 800c744:	200108d4 	.word	0x200108d4
 800c748:	200108dc 	.word	0x200108dc

0800c74c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c74c:	b480      	push	{r7}
 800c74e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <tcp_trigger_input_pcb_close+0x1c>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	f043 0310 	orr.w	r3, r3, #16
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	4b03      	ldr	r3, [pc, #12]	; (800c768 <tcp_trigger_input_pcb_close+0x1c>)
 800c75c:	701a      	strb	r2, [r3, #0]
}
 800c75e:	bf00      	nop
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	200108ed 	.word	0x200108ed

0800c76c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00a      	beq.n	800c794 <tcp_route+0x28>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	7a1b      	ldrb	r3, [r3, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d006      	beq.n	800c794 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	7a1b      	ldrb	r3, [r3, #8]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fb fb10 	bl	8007db0 <netif_get_by_index>
 800c790:	4603      	mov	r3, r0
 800c792:	e003      	b.n	800c79c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f005 f809 	bl	80117ac <ip4_route>
 800c79a:	4603      	mov	r3, r0
  }
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c7a4:	b590      	push	{r4, r7, lr}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d105      	bne.n	800c7c6 <tcp_create_segment+0x22>
 800c7ba:	4b44      	ldr	r3, [pc, #272]	; (800c8cc <tcp_create_segment+0x128>)
 800c7bc:	22a3      	movs	r2, #163	; 0xa3
 800c7be:	4944      	ldr	r1, [pc, #272]	; (800c8d0 <tcp_create_segment+0x12c>)
 800c7c0:	4844      	ldr	r0, [pc, #272]	; (800c8d4 <tcp_create_segment+0x130>)
 800c7c2:	f006 fc01 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d105      	bne.n	800c7d8 <tcp_create_segment+0x34>
 800c7cc:	4b3f      	ldr	r3, [pc, #252]	; (800c8cc <tcp_create_segment+0x128>)
 800c7ce:	22a4      	movs	r2, #164	; 0xa4
 800c7d0:	4941      	ldr	r1, [pc, #260]	; (800c8d8 <tcp_create_segment+0x134>)
 800c7d2:	4840      	ldr	r0, [pc, #256]	; (800c8d4 <tcp_create_segment+0x130>)
 800c7d4:	f006 fbf8 	bl	8012fc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c7d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c7e6:	2003      	movs	r0, #3
 800c7e8:	f7fa ffb2 	bl	8007750 <memp_malloc>
 800c7ec:	6138      	str	r0, [r7, #16]
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d104      	bne.n	800c7fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c7f4:	68b8      	ldr	r0, [r7, #8]
 800c7f6:	f7fb fe69 	bl	80084cc <pbuf_free>
    return NULL;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e061      	b.n	800c8c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c804:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2200      	movs	r2, #0
 800c80a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	891a      	ldrh	r2, [r3, #8]
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d205      	bcs.n	800c82a <tcp_create_segment+0x86>
 800c81e:	4b2b      	ldr	r3, [pc, #172]	; (800c8cc <tcp_create_segment+0x128>)
 800c820:	22b0      	movs	r2, #176	; 0xb0
 800c822:	492e      	ldr	r1, [pc, #184]	; (800c8dc <tcp_create_segment+0x138>)
 800c824:	482b      	ldr	r0, [pc, #172]	; (800c8d4 <tcp_create_segment+0x130>)
 800c826:	f006 fbcf 	bl	8012fc8 <iprintf>
  seg->len = p->tot_len - optlen;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	891a      	ldrh	r2, [r3, #8]
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	b29b      	uxth	r3, r3
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	b29a      	uxth	r2, r3
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c83a:	2114      	movs	r1, #20
 800c83c:	68b8      	ldr	r0, [r7, #8]
 800c83e:	f7fb fdaf 	bl	80083a0 <pbuf_add_header>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d004      	beq.n	800c852 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c848:	6938      	ldr	r0, [r7, #16]
 800c84a:	f7fd f8ce 	bl	80099ea <tcp_seg_free>
    return NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	e037      	b.n	800c8c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	8ada      	ldrh	r2, [r3, #22]
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	68dc      	ldr	r4, [r3, #12]
 800c864:	4610      	mov	r0, r2
 800c866:	f7fa fa9b 	bl	8006da0 <lwip_htons>
 800c86a:	4603      	mov	r3, r0
 800c86c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	8b1a      	ldrh	r2, [r3, #24]
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	68dc      	ldr	r4, [r3, #12]
 800c876:	4610      	mov	r0, r2
 800c878:	f7fa fa92 	bl	8006da0 <lwip_htons>
 800c87c:	4603      	mov	r3, r0
 800c87e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	68dc      	ldr	r4, [r3, #12]
 800c884:	6838      	ldr	r0, [r7, #0]
 800c886:	f7fa faa0 	bl	8006dca <lwip_htonl>
 800c88a:	4603      	mov	r3, r0
 800c88c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c88e:	7dfb      	ldrb	r3, [r7, #23]
 800c890:	089b      	lsrs	r3, r3, #2
 800c892:	b2db      	uxtb	r3, r3
 800c894:	b29b      	uxth	r3, r3
 800c896:	3305      	adds	r3, #5
 800c898:	b29b      	uxth	r3, r3
 800c89a:	031b      	lsls	r3, r3, #12
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	68dc      	ldr	r4, [r3, #12]
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	f7fa fa78 	bl	8006da0 <lwip_htons>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	749a      	strb	r2, [r3, #18]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	74da      	strb	r2, [r3, #19]
  return seg;
 800c8c0:	693b      	ldr	r3, [r7, #16]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd90      	pop	{r4, r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	080156d4 	.word	0x080156d4
 800c8d0:	08015708 	.word	0x08015708
 800c8d4:	08015728 	.word	0x08015728
 800c8d8:	08015750 	.word	0x08015750
 800c8dc:	08015774 	.word	0x08015774

0800c8e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c8e0:	b590      	push	{r4, r7, lr}
 800c8e2:	b08b      	sub	sp, #44	; 0x2c
 800c8e4:	af02      	add	r7, sp, #8
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	61fb      	str	r3, [r7, #28]
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d106      	bne.n	800c90c <tcp_split_unsent_seg+0x2c>
 800c8fe:	4b95      	ldr	r3, [pc, #596]	; (800cb54 <tcp_split_unsent_seg+0x274>)
 800c900:	f240 324b 	movw	r2, #843	; 0x34b
 800c904:	4994      	ldr	r1, [pc, #592]	; (800cb58 <tcp_split_unsent_seg+0x278>)
 800c906:	4895      	ldr	r0, [pc, #596]	; (800cb5c <tcp_split_unsent_seg+0x27c>)
 800c908:	f006 fb5e 	bl	8012fc8 <iprintf>

  useg = pcb->unsent;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c910:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d102      	bne.n	800c91e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c918:	f04f 33ff 	mov.w	r3, #4294967295
 800c91c:	e116      	b.n	800cb4c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c91e:	887b      	ldrh	r3, [r7, #2]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d109      	bne.n	800c938 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c924:	4b8b      	ldr	r3, [pc, #556]	; (800cb54 <tcp_split_unsent_seg+0x274>)
 800c926:	f240 3253 	movw	r2, #851	; 0x353
 800c92a:	498d      	ldr	r1, [pc, #564]	; (800cb60 <tcp_split_unsent_seg+0x280>)
 800c92c:	488b      	ldr	r0, [pc, #556]	; (800cb5c <tcp_split_unsent_seg+0x27c>)
 800c92e:	f006 fb4b 	bl	8012fc8 <iprintf>
    return ERR_VAL;
 800c932:	f06f 0305 	mvn.w	r3, #5
 800c936:	e109      	b.n	800cb4c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	891b      	ldrh	r3, [r3, #8]
 800c93c:	887a      	ldrh	r2, [r7, #2]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d301      	bcc.n	800c946 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c942:	2300      	movs	r3, #0
 800c944:	e102      	b.n	800cb4c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94a:	887a      	ldrh	r2, [r7, #2]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d906      	bls.n	800c95e <tcp_split_unsent_seg+0x7e>
 800c950:	4b80      	ldr	r3, [pc, #512]	; (800cb54 <tcp_split_unsent_seg+0x274>)
 800c952:	f240 325b 	movw	r2, #859	; 0x35b
 800c956:	4983      	ldr	r1, [pc, #524]	; (800cb64 <tcp_split_unsent_seg+0x284>)
 800c958:	4880      	ldr	r0, [pc, #512]	; (800cb5c <tcp_split_unsent_seg+0x27c>)
 800c95a:	f006 fb35 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	891b      	ldrh	r3, [r3, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d106      	bne.n	800c974 <tcp_split_unsent_seg+0x94>
 800c966:	4b7b      	ldr	r3, [pc, #492]	; (800cb54 <tcp_split_unsent_seg+0x274>)
 800c968:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c96c:	497e      	ldr	r1, [pc, #504]	; (800cb68 <tcp_split_unsent_seg+0x288>)
 800c96e:	487b      	ldr	r0, [pc, #492]	; (800cb5c <tcp_split_unsent_seg+0x27c>)
 800c970:	f006 fb2a 	bl	8012fc8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	7a9b      	ldrb	r3, [r3, #10]
 800c978:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f003 0304 	and.w	r3, r3, #4
 800c984:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	891a      	ldrh	r2, [r3, #8]
 800c98a:	887b      	ldrh	r3, [r7, #2]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	b29a      	uxth	r2, r3
 800c994:	89bb      	ldrh	r3, [r7, #12]
 800c996:	4413      	add	r3, r2
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c99e:	4619      	mov	r1, r3
 800c9a0:	2036      	movs	r0, #54	; 0x36
 800c9a2:	f7fb faaf 	bl	8007f04 <pbuf_alloc>
 800c9a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f000 80b7 	beq.w	800cb1e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	891a      	ldrh	r2, [r3, #8]
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	891b      	ldrh	r3, [r3, #8]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	887b      	ldrh	r3, [r7, #2]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	6858      	ldr	r0, [r3, #4]
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	18d1      	adds	r1, r2, r3
 800c9d0:	897b      	ldrh	r3, [r7, #10]
 800c9d2:	89ba      	ldrh	r2, [r7, #12]
 800c9d4:	f7fb ff80 	bl	80088d8 <pbuf_copy_partial>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	461a      	mov	r2, r3
 800c9dc:	89bb      	ldrh	r3, [r7, #12]
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	f040 809f 	bne.w	800cb22 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	899b      	ldrh	r3, [r3, #12]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fa f9d7 	bl	8006da0 <lwip_htons>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ca00:	7efb      	ldrb	r3, [r7, #27]
 800ca02:	f003 0308 	and.w	r3, r3, #8
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d007      	beq.n	800ca1a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ca0a:	7efb      	ldrb	r3, [r7, #27]
 800ca0c:	f023 0308 	bic.w	r3, r3, #8
 800ca10:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ca12:	7ebb      	ldrb	r3, [r7, #26]
 800ca14:	f043 0308 	orr.w	r3, r3, #8
 800ca18:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ca1a:	7efb      	ldrb	r3, [r7, #27]
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d007      	beq.n	800ca34 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ca24:	7efb      	ldrb	r3, [r7, #27]
 800ca26:	f023 0301 	bic.w	r3, r3, #1
 800ca2a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ca2c:	7ebb      	ldrb	r3, [r7, #26]
 800ca2e:	f043 0301 	orr.w	r3, r3, #1
 800ca32:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fa f9c5 	bl	8006dca <lwip_htonl>
 800ca40:	4602      	mov	r2, r0
 800ca42:	887b      	ldrh	r3, [r7, #2]
 800ca44:	18d1      	adds	r1, r2, r3
 800ca46:	7eba      	ldrb	r2, [r7, #26]
 800ca48:	7bfb      	ldrb	r3, [r7, #15]
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	6939      	ldr	r1, [r7, #16]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff fea7 	bl	800c7a4 <tcp_create_segment>
 800ca56:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d063      	beq.n	800cb26 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fb fdc0 	bl	80085e8 <pbuf_clen>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	6858      	ldr	r0, [r3, #4]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	891a      	ldrh	r2, [r3, #8]
 800ca86:	89bb      	ldrh	r3, [r7, #12]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	f7fb fb97 	bl	80081c0 <pbuf_realloc>
  useg->len -= remainder;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	891a      	ldrh	r2, [r3, #8]
 800ca96:	89bb      	ldrh	r3, [r7, #12]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	899b      	ldrh	r3, [r3, #12]
 800caa6:	b29c      	uxth	r4, r3
 800caa8:	7efb      	ldrb	r3, [r7, #27]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	4618      	mov	r0, r3
 800caae:	f7fa f977 	bl	8006da0 <lwip_htons>
 800cab2:	4603      	mov	r3, r0
 800cab4:	461a      	mov	r2, r3
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	4322      	orrs	r2, r4
 800cabc:	b292      	uxth	r2, r2
 800cabe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fb fd8f 	bl	80085e8 <pbuf_clen>
 800caca:	4603      	mov	r3, r0
 800cacc:	461a      	mov	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cad4:	4413      	add	r3, r2
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fb fd80 	bl	80085e8 <pbuf_clen>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800caf2:	4413      	add	r3, r2
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	69fb      	ldr	r3, [r7, #28]
 800cb02:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	69fa      	ldr	r2, [r7, #28]
 800cb08:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d103      	bne.n	800cb1a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e016      	b.n	800cb4c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cb1e:	bf00      	nop
 800cb20:	e002      	b.n	800cb28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb22:	bf00      	nop
 800cb24:	e000      	b.n	800cb28 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cb26:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d006      	beq.n	800cb3c <tcp_split_unsent_seg+0x25c>
 800cb2e:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <tcp_split_unsent_seg+0x274>)
 800cb30:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cb34:	490d      	ldr	r1, [pc, #52]	; (800cb6c <tcp_split_unsent_seg+0x28c>)
 800cb36:	4809      	ldr	r0, [pc, #36]	; (800cb5c <tcp_split_unsent_seg+0x27c>)
 800cb38:	f006 fa46 	bl	8012fc8 <iprintf>
  if (p != NULL) {
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cb42:	6938      	ldr	r0, [r7, #16]
 800cb44:	f7fb fcc2 	bl	80084cc <pbuf_free>
  }

  return ERR_MEM;
 800cb48:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3724      	adds	r7, #36	; 0x24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd90      	pop	{r4, r7, pc}
 800cb54:	080156d4 	.word	0x080156d4
 800cb58:	08015a68 	.word	0x08015a68
 800cb5c:	08015728 	.word	0x08015728
 800cb60:	08015a8c 	.word	0x08015a8c
 800cb64:	08015ab0 	.word	0x08015ab0
 800cb68:	08015ac0 	.word	0x08015ac0
 800cb6c:	08015ad0 	.word	0x08015ad0

0800cb70 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cb70:	b590      	push	{r4, r7, lr}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_send_fin+0x1c>
 800cb7e:	4b21      	ldr	r3, [pc, #132]	; (800cc04 <tcp_send_fin+0x94>)
 800cb80:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cb84:	4920      	ldr	r1, [pc, #128]	; (800cc08 <tcp_send_fin+0x98>)
 800cb86:	4821      	ldr	r0, [pc, #132]	; (800cc0c <tcp_send_fin+0x9c>)
 800cb88:	f006 fa1e 	bl	8012fc8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d02e      	beq.n	800cbf2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	e002      	b.n	800cba2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1f8      	bne.n	800cb9c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	899b      	ldrh	r3, [r3, #12]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fa f8f4 	bl	8006da0 <lwip_htons>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	f003 0307 	and.w	r3, r3, #7
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d116      	bne.n	800cbf2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	899b      	ldrh	r3, [r3, #12]
 800cbca:	b29c      	uxth	r4, r3
 800cbcc:	2001      	movs	r0, #1
 800cbce:	f7fa f8e7 	bl	8006da0 <lwip_htons>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	4322      	orrs	r2, r4
 800cbdc:	b292      	uxth	r2, r2
 800cbde:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	8b5b      	ldrh	r3, [r3, #26]
 800cbe4:	f043 0320 	orr.w	r3, r3, #32
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	e004      	b.n	800cbfc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f80b 	bl	800cc10 <tcp_enqueue_flags>
 800cbfa:	4603      	mov	r3, r0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd90      	pop	{r4, r7, pc}
 800cc04:	080156d4 	.word	0x080156d4
 800cc08:	08015adc 	.word	0x08015adc
 800cc0c:	08015728 	.word	0x08015728

0800cc10 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b08a      	sub	sp, #40	; 0x28
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cc24:	78fb      	ldrb	r3, [r7, #3]
 800cc26:	f003 0303 	and.w	r3, r3, #3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <tcp_enqueue_flags+0x2c>
 800cc2e:	4b67      	ldr	r3, [pc, #412]	; (800cdcc <tcp_enqueue_flags+0x1bc>)
 800cc30:	f240 4211 	movw	r2, #1041	; 0x411
 800cc34:	4966      	ldr	r1, [pc, #408]	; (800cdd0 <tcp_enqueue_flags+0x1c0>)
 800cc36:	4867      	ldr	r0, [pc, #412]	; (800cdd4 <tcp_enqueue_flags+0x1c4>)
 800cc38:	f006 f9c6 	bl	8012fc8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <tcp_enqueue_flags+0x40>
 800cc42:	4b62      	ldr	r3, [pc, #392]	; (800cdcc <tcp_enqueue_flags+0x1bc>)
 800cc44:	f240 4213 	movw	r2, #1043	; 0x413
 800cc48:	4963      	ldr	r1, [pc, #396]	; (800cdd8 <tcp_enqueue_flags+0x1c8>)
 800cc4a:	4862      	ldr	r0, [pc, #392]	; (800cdd4 <tcp_enqueue_flags+0x1c4>)
 800cc4c:	f006 f9bc 	bl	8012fc8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cc50:	78fb      	ldrb	r3, [r7, #3]
 800cc52:	f003 0302 	and.w	r3, r3, #2
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc5e:	7ffb      	ldrb	r3, [r7, #31]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc72:	4619      	mov	r1, r3
 800cc74:	2036      	movs	r0, #54	; 0x36
 800cc76:	f7fb f945 	bl	8007f04 <pbuf_alloc>
 800cc7a:	6138      	str	r0, [r7, #16]
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d109      	bne.n	800cc96 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	8b5b      	ldrh	r3, [r3, #26]
 800cc86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc90:	f04f 33ff 	mov.w	r3, #4294967295
 800cc94:	e095      	b.n	800cdc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	895a      	ldrh	r2, [r3, #10]
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d206      	bcs.n	800ccb0 <tcp_enqueue_flags+0xa0>
 800cca2:	4b4a      	ldr	r3, [pc, #296]	; (800cdcc <tcp_enqueue_flags+0x1bc>)
 800cca4:	f240 4239 	movw	r2, #1081	; 0x439
 800cca8:	494c      	ldr	r1, [pc, #304]	; (800cddc <tcp_enqueue_flags+0x1cc>)
 800ccaa:	484a      	ldr	r0, [pc, #296]	; (800cdd4 <tcp_enqueue_flags+0x1c4>)
 800ccac:	f006 f98c 	bl	8012fc8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	7ffb      	ldrb	r3, [r7, #31]
 800ccb8:	9300      	str	r3, [sp, #0]
 800ccba:	460b      	mov	r3, r1
 800ccbc:	6939      	ldr	r1, [r7, #16]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fd70 	bl	800c7a4 <tcp_create_segment>
 800ccc4:	60f8      	str	r0, [r7, #12]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d109      	bne.n	800cce0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	8b5b      	ldrh	r3, [r3, #26]
 800ccd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ccda:	f04f 33ff 	mov.w	r3, #4294967295
 800ccde:	e070      	b.n	800cdc2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f003 0303 	and.w	r3, r3, #3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d006      	beq.n	800ccfa <tcp_enqueue_flags+0xea>
 800ccec:	4b37      	ldr	r3, [pc, #220]	; (800cdcc <tcp_enqueue_flags+0x1bc>)
 800ccee:	f240 4242 	movw	r2, #1090	; 0x442
 800ccf2:	493b      	ldr	r1, [pc, #236]	; (800cde0 <tcp_enqueue_flags+0x1d0>)
 800ccf4:	4837      	ldr	r0, [pc, #220]	; (800cdd4 <tcp_enqueue_flags+0x1c4>)
 800ccf6:	f006 f967 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d006      	beq.n	800cd10 <tcp_enqueue_flags+0x100>
 800cd02:	4b32      	ldr	r3, [pc, #200]	; (800cdcc <tcp_enqueue_flags+0x1bc>)
 800cd04:	f240 4243 	movw	r2, #1091	; 0x443
 800cd08:	4936      	ldr	r1, [pc, #216]	; (800cde4 <tcp_enqueue_flags+0x1d4>)
 800cd0a:	4832      	ldr	r0, [pc, #200]	; (800cdd4 <tcp_enqueue_flags+0x1c4>)
 800cd0c:	f006 f95c 	bl	8012fc8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d103      	bne.n	800cd20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	66da      	str	r2, [r3, #108]	; 0x6c
 800cd1e:	e00d      	b.n	800cd3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd24:	61bb      	str	r3, [r7, #24]
 800cd26:	e002      	b.n	800cd2e <tcp_enqueue_flags+0x11e>
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	61bb      	str	r3, [r7, #24]
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1f8      	bne.n	800cd28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cd44:	78fb      	ldrb	r3, [r7, #3]
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d104      	bne.n	800cd58 <tcp_enqueue_flags+0x148>
 800cd4e:	78fb      	ldrb	r3, [r7, #3]
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d004      	beq.n	800cd62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cd62:	78fb      	ldrb	r3, [r7, #3]
 800cd64:	f003 0301 	and.w	r3, r3, #1
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	8b5b      	ldrh	r3, [r3, #26]
 800cd70:	f043 0320 	orr.w	r3, r3, #32
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fb fc32 	bl	80085e8 <pbuf_clen>
 800cd84:	4603      	mov	r3, r0
 800cd86:	461a      	mov	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd8e:	4413      	add	r3, r2
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00e      	beq.n	800cdc0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10a      	bne.n	800cdc0 <tcp_enqueue_flags+0x1b0>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <tcp_enqueue_flags+0x1b0>
 800cdb2:	4b06      	ldr	r3, [pc, #24]	; (800cdcc <tcp_enqueue_flags+0x1bc>)
 800cdb4:	f240 4265 	movw	r2, #1125	; 0x465
 800cdb8:	490b      	ldr	r1, [pc, #44]	; (800cde8 <tcp_enqueue_flags+0x1d8>)
 800cdba:	4806      	ldr	r0, [pc, #24]	; (800cdd4 <tcp_enqueue_flags+0x1c4>)
 800cdbc:	f006 f904 	bl	8012fc8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cdc0:	2300      	movs	r3, #0
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3720      	adds	r7, #32
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	080156d4 	.word	0x080156d4
 800cdd0:	08015af8 	.word	0x08015af8
 800cdd4:	08015728 	.word	0x08015728
 800cdd8:	08015b50 	.word	0x08015b50
 800cddc:	08015b70 	.word	0x08015b70
 800cde0:	08015bac 	.word	0x08015bac
 800cde4:	08015bc4 	.word	0x08015bc4
 800cde8:	08015bf0 	.word	0x08015bf0

0800cdec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cdec:	b5b0      	push	{r4, r5, r7, lr}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <tcp_output+0x1c>
 800cdfa:	4b8a      	ldr	r3, [pc, #552]	; (800d024 <tcp_output+0x238>)
 800cdfc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ce00:	4989      	ldr	r1, [pc, #548]	; (800d028 <tcp_output+0x23c>)
 800ce02:	488a      	ldr	r0, [pc, #552]	; (800d02c <tcp_output+0x240>)
 800ce04:	f006 f8e0 	bl	8012fc8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	7d1b      	ldrb	r3, [r3, #20]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d106      	bne.n	800ce1e <tcp_output+0x32>
 800ce10:	4b84      	ldr	r3, [pc, #528]	; (800d024 <tcp_output+0x238>)
 800ce12:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ce16:	4986      	ldr	r1, [pc, #536]	; (800d030 <tcp_output+0x244>)
 800ce18:	4884      	ldr	r0, [pc, #528]	; (800d02c <tcp_output+0x240>)
 800ce1a:	f006 f8d5 	bl	8012fc8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ce1e:	4b85      	ldr	r3, [pc, #532]	; (800d034 <tcp_output+0x248>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d101      	bne.n	800ce2c <tcp_output+0x40>
    return ERR_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	e1ce      	b.n	800d1ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	bf28      	it	cs
 800ce3c:	4613      	movcs	r3, r2
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce46:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10b      	bne.n	800ce66 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8b5b      	ldrh	r3, [r3, #26]
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f000 81aa 	beq.w	800d1b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fdcb 	bl	800d9f8 <tcp_send_empty_ack>
 800ce62:	4603      	mov	r3, r0
 800ce64:	e1b1      	b.n	800d1ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3304      	adds	r3, #4
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff fc7c 	bl	800c76c <tcp_route>
 800ce74:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d102      	bne.n	800ce82 <tcp_output+0x96>
    return ERR_RTE;
 800ce7c:	f06f 0303 	mvn.w	r3, #3
 800ce80:	e1a3      	b.n	800d1ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <tcp_output+0xa4>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d111      	bne.n	800ceb4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <tcp_output+0xb0>
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	e000      	b.n	800ce9e <tcp_output+0xb2>
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <tcp_output+0xc0>
      return ERR_RTE;
 800cea6:	f06f 0303 	mvn.w	r3, #3
 800ceaa:	e18e      	b.n	800d1ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f9 ff85 	bl	8006dca <lwip_htonl>
 800cec0:	4602      	mov	r2, r0
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceca:	8912      	ldrh	r2, [r2, #8]
 800cecc:	4413      	add	r3, r2
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d227      	bcs.n	800cf24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ceda:	461a      	mov	r2, r3
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	4293      	cmp	r3, r2
 800cee0:	d114      	bne.n	800cf0c <tcp_output+0x120>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d110      	bne.n	800cf0c <tcp_output+0x120>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10b      	bne.n	800cf0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	8b5b      	ldrh	r3, [r3, #26]
 800cf10:	f003 0302 	and.w	r3, r3, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f000 814d 	beq.w	800d1b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fd6c 	bl	800d9f8 <tcp_send_empty_ack>
 800cf20:	4603      	mov	r3, r0
 800cf22:	e152      	b.n	800d1ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f000 811c 	beq.w	800d172 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800cf3a:	e002      	b.n	800cf42 <tcp_output+0x156>
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	623b      	str	r3, [r7, #32]
 800cf42:	6a3b      	ldr	r3, [r7, #32]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1f8      	bne.n	800cf3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cf4a:	e112      	b.n	800d172 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4e:	68db      	ldr	r3, [r3, #12]
 800cf50:	899b      	ldrh	r3, [r3, #12]
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7f9 ff23 	bl	8006da0 <lwip_htons>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0304 	and.w	r3, r3, #4
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d006      	beq.n	800cf74 <tcp_output+0x188>
 800cf66:	4b2f      	ldr	r3, [pc, #188]	; (800d024 <tcp_output+0x238>)
 800cf68:	f240 5236 	movw	r2, #1334	; 0x536
 800cf6c:	4932      	ldr	r1, [pc, #200]	; (800d038 <tcp_output+0x24c>)
 800cf6e:	482f      	ldr	r0, [pc, #188]	; (800d02c <tcp_output+0x240>)
 800cf70:	f006 f82a 	bl	8012fc8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d01f      	beq.n	800cfbc <tcp_output+0x1d0>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	8b5b      	ldrh	r3, [r3, #26]
 800cf80:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d119      	bne.n	800cfbc <tcp_output+0x1d0>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00b      	beq.n	800cfa8 <tcp_output+0x1bc>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d110      	bne.n	800cfbc <tcp_output+0x1d0>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf9e:	891a      	ldrh	r2, [r3, #8]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d209      	bcs.n	800cfbc <tcp_output+0x1d0>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d004      	beq.n	800cfbc <tcp_output+0x1d0>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfb8:	2b08      	cmp	r3, #8
 800cfba:	d901      	bls.n	800cfc0 <tcp_output+0x1d4>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e000      	b.n	800cfc2 <tcp_output+0x1d6>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d106      	bne.n	800cfd4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	8b5b      	ldrh	r3, [r3, #26]
 800cfca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f000 80e4 	beq.w	800d19c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7d1b      	ldrb	r3, [r3, #20]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d00d      	beq.n	800cff8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	899b      	ldrh	r3, [r3, #12]
 800cfe2:	b29c      	uxth	r4, r3
 800cfe4:	2010      	movs	r0, #16
 800cfe6:	f7f9 fedb 	bl	8006da0 <lwip_htons>
 800cfea:	4603      	mov	r3, r0
 800cfec:	461a      	mov	r2, r3
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	4322      	orrs	r2, r4
 800cff4:	b292      	uxth	r2, r2
 800cff6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cffe:	f000 f909 	bl	800d214 <tcp_output_segment>
 800d002:	4603      	mov	r3, r0
 800d004:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d016      	beq.n	800d03c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	8b5b      	ldrh	r3, [r3, #26]
 800d012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d016:	b29a      	uxth	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	835a      	strh	r2, [r3, #26]
      return err;
 800d01c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d020:	e0d3      	b.n	800d1ca <tcp_output+0x3de>
 800d022:	bf00      	nop
 800d024:	080156d4 	.word	0x080156d4
 800d028:	08015c18 	.word	0x08015c18
 800d02c:	08015728 	.word	0x08015728
 800d030:	08015c30 	.word	0x08015c30
 800d034:	200108f4 	.word	0x200108f4
 800d038:	08015c58 	.word	0x08015c58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	7d1b      	ldrb	r3, [r3, #20]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d006      	beq.n	800d05a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8b5b      	ldrh	r3, [r3, #26]
 800d050:	f023 0303 	bic.w	r3, r3, #3
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	4618      	mov	r0, r3
 800d062:	f7f9 feb2 	bl	8006dca <lwip_htonl>
 800d066:	4604      	mov	r4, r0
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	891b      	ldrh	r3, [r3, #8]
 800d06c:	461d      	mov	r5, r3
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	899b      	ldrh	r3, [r3, #12]
 800d074:	b29b      	uxth	r3, r3
 800d076:	4618      	mov	r0, r3
 800d078:	f7f9 fe92 	bl	8006da0 <lwip_htons>
 800d07c:	4603      	mov	r3, r0
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	f003 0303 	and.w	r3, r3, #3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <tcp_output+0x2a0>
 800d088:	2301      	movs	r3, #1
 800d08a:	e000      	b.n	800d08e <tcp_output+0x2a2>
 800d08c:	2300      	movs	r3, #0
 800d08e:	442b      	add	r3, r5
 800d090:	4423      	add	r3, r4
 800d092:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	da02      	bge.n	800d0a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	891b      	ldrh	r3, [r3, #8]
 800d0aa:	461c      	mov	r4, r3
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	899b      	ldrh	r3, [r3, #12]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f9 fe73 	bl	8006da0 <lwip_htons>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	f003 0303 	and.w	r3, r3, #3
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <tcp_output+0x2de>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e000      	b.n	800d0cc <tcp_output+0x2e0>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4423      	add	r3, r4
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d049      	beq.n	800d166 <tcp_output+0x37a>
      seg->next = NULL;
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d105      	bne.n	800d0ec <tcp_output+0x300>
        pcb->unacked = seg;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	623b      	str	r3, [r7, #32]
 800d0ea:	e03f      	b.n	800d16c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7f9 fe69 	bl	8006dca <lwip_htonl>
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	f7f9 fe62 	bl	8006dca <lwip_htonl>
 800d106:	4603      	mov	r3, r0
 800d108:	1ae3      	subs	r3, r4, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	da24      	bge.n	800d158 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	3370      	adds	r3, #112	; 0x70
 800d112:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d114:	e002      	b.n	800d11c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d011      	beq.n	800d148 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7f9 fe4c 	bl	8006dca <lwip_htonl>
 800d132:	4604      	mov	r4, r0
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7f9 fe45 	bl	8006dca <lwip_htonl>
 800d140:	4603      	mov	r3, r0
 800d142:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d144:	2b00      	cmp	r3, #0
 800d146:	dbe6      	blt.n	800d116 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	e009      	b.n	800d16c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d15c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	623b      	str	r3, [r7, #32]
 800d164:	e002      	b.n	800d16c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d168:	f7fc fc3f 	bl	80099ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d170:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	d012      	beq.n	800d19e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	4618      	mov	r0, r3
 800d180:	f7f9 fe23 	bl	8006dca <lwip_htonl>
 800d184:	4602      	mov	r2, r0
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d18e:	8912      	ldrh	r2, [r2, #8]
 800d190:	4413      	add	r3, r2
  while (seg != NULL &&
 800d192:	69ba      	ldr	r2, [r7, #24]
 800d194:	429a      	cmp	r2, r3
 800d196:	f4bf aed9 	bcs.w	800cf4c <tcp_output+0x160>
 800d19a:	e000      	b.n	800d19e <tcp_output+0x3b2>
      break;
 800d19c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d108      	bne.n	800d1b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d1ae:	e004      	b.n	800d1ba <tcp_output+0x3ce>
    goto output_done;
 800d1b0:	bf00      	nop
 800d1b2:	e002      	b.n	800d1ba <tcp_output+0x3ce>
    goto output_done;
 800d1b4:	bf00      	nop
 800d1b6:	e000      	b.n	800d1ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d1b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	8b5b      	ldrh	r3, [r3, #26]
 800d1be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3728      	adds	r7, #40	; 0x28
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bdb0      	pop	{r4, r5, r7, pc}
 800d1d2:	bf00      	nop

0800d1d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <tcp_output_segment_busy+0x1c>
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <tcp_output_segment_busy+0x34>)
 800d1e4:	f240 529a 	movw	r2, #1434	; 0x59a
 800d1e8:	4908      	ldr	r1, [pc, #32]	; (800d20c <tcp_output_segment_busy+0x38>)
 800d1ea:	4809      	ldr	r0, [pc, #36]	; (800d210 <tcp_output_segment_busy+0x3c>)
 800d1ec:	f005 feec 	bl	8012fc8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	7b9b      	ldrb	r3, [r3, #14]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d001      	beq.n	800d1fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	080156d4 	.word	0x080156d4
 800d20c:	08015c70 	.word	0x08015c70
 800d210:	08015728 	.word	0x08015728

0800d214 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d214:	b5b0      	push	{r4, r5, r7, lr}
 800d216:	b08c      	sub	sp, #48	; 0x30
 800d218:	af04      	add	r7, sp, #16
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <tcp_output_segment+0x20>
 800d226:	4b64      	ldr	r3, [pc, #400]	; (800d3b8 <tcp_output_segment+0x1a4>)
 800d228:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d22c:	4963      	ldr	r1, [pc, #396]	; (800d3bc <tcp_output_segment+0x1a8>)
 800d22e:	4864      	ldr	r0, [pc, #400]	; (800d3c0 <tcp_output_segment+0x1ac>)
 800d230:	f005 feca 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <tcp_output_segment+0x34>
 800d23a:	4b5f      	ldr	r3, [pc, #380]	; (800d3b8 <tcp_output_segment+0x1a4>)
 800d23c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d240:	4960      	ldr	r1, [pc, #384]	; (800d3c4 <tcp_output_segment+0x1b0>)
 800d242:	485f      	ldr	r0, [pc, #380]	; (800d3c0 <tcp_output_segment+0x1ac>)
 800d244:	f005 fec0 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d106      	bne.n	800d25c <tcp_output_segment+0x48>
 800d24e:	4b5a      	ldr	r3, [pc, #360]	; (800d3b8 <tcp_output_segment+0x1a4>)
 800d250:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d254:	495c      	ldr	r1, [pc, #368]	; (800d3c8 <tcp_output_segment+0x1b4>)
 800d256:	485a      	ldr	r0, [pc, #360]	; (800d3c0 <tcp_output_segment+0x1ac>)
 800d258:	f005 feb6 	bl	8012fc8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f7ff ffb9 	bl	800d1d4 <tcp_output_segment_busy>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	e0a1      	b.n	800d3b0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	68dc      	ldr	r4, [r3, #12]
 800d274:	4610      	mov	r0, r2
 800d276:	f7f9 fda8 	bl	8006dca <lwip_htonl>
 800d27a:	4603      	mov	r3, r0
 800d27c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	68dc      	ldr	r4, [r3, #12]
 800d286:	4610      	mov	r0, r2
 800d288:	f7f9 fd8a 	bl	8006da0 <lwip_htons>
 800d28c:	4603      	mov	r3, r0
 800d28e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d298:	441a      	add	r2, r3
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	3314      	adds	r3, #20
 800d2a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	7a9b      	ldrb	r3, [r3, #10]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d015      	beq.n	800d2de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6879      	ldr	r1, [r7, #4]
 800d2ba:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d2be:	f7fc fe8b 	bl	8009fd8 <tcp_eff_send_mss_netif>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d2c6:	8b7b      	ldrh	r3, [r7, #26]
 800d2c8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7f9 fd7c 	bl	8006dca <lwip_htonl>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da02      	bge.n	800d2ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10c      	bne.n	800d310 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d2f6:	4b35      	ldr	r3, [pc, #212]	; (800d3cc <tcp_output_segment+0x1b8>)
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	4618      	mov	r0, r3
 800d306:	f7f9 fd60 	bl	8006dca <lwip_htonl>
 800d30a:	4602      	mov	r2, r0
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	68da      	ldr	r2, [r3, #12]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	8959      	ldrh	r1, [r3, #10]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	8b3a      	ldrh	r2, [r7, #24]
 800d32a:	1a8a      	subs	r2, r1, r2
 800d32c:	b292      	uxth	r2, r2
 800d32e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	8919      	ldrh	r1, [r3, #8]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	8b3a      	ldrh	r2, [r7, #24]
 800d33c:	1a8a      	subs	r2, r1, r2
 800d33e:	b292      	uxth	r2, r2
 800d340:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	68fa      	ldr	r2, [r7, #12]
 800d348:	68d2      	ldr	r2, [r2, #12]
 800d34a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	741a      	strb	r2, [r3, #16]
 800d354:	2200      	movs	r2, #0
 800d356:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	68da      	ldr	r2, [r3, #12]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	7a9b      	ldrb	r3, [r3, #10]
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	2b00      	cmp	r3, #0
 800d366:	d001      	beq.n	800d36c <tcp_output_segment+0x158>
 800d368:	2318      	movs	r3, #24
 800d36a:	e000      	b.n	800d36e <tcp_output_segment+0x15a>
 800d36c:	2314      	movs	r3, #20
 800d36e:	4413      	add	r3, r2
 800d370:	69fa      	ldr	r2, [r7, #28]
 800d372:	429a      	cmp	r2, r3
 800d374:	d006      	beq.n	800d384 <tcp_output_segment+0x170>
 800d376:	4b10      	ldr	r3, [pc, #64]	; (800d3b8 <tcp_output_segment+0x1a4>)
 800d378:	f240 621c 	movw	r2, #1564	; 0x61c
 800d37c:	4914      	ldr	r1, [pc, #80]	; (800d3d0 <tcp_output_segment+0x1bc>)
 800d37e:	4810      	ldr	r0, [pc, #64]	; (800d3c0 <tcp_output_segment+0x1ac>)
 800d380:	f005 fe22 	bl	8012fc8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6858      	ldr	r0, [r3, #4]
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	1d1c      	adds	r4, r3, #4
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	7add      	ldrb	r5, [r3, #11]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	7a9b      	ldrb	r3, [r3, #10]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	9202      	str	r2, [sp, #8]
 800d39a:	2206      	movs	r2, #6
 800d39c:	9201      	str	r2, [sp, #4]
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	462b      	mov	r3, r5
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	f004 fbde 	bl	8011b64 <ip4_output_if>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d3b8:	080156d4 	.word	0x080156d4
 800d3bc:	08015c98 	.word	0x08015c98
 800d3c0:	08015728 	.word	0x08015728
 800d3c4:	08015cb8 	.word	0x08015cb8
 800d3c8:	08015cd8 	.word	0x08015cd8
 800d3cc:	200108a8 	.word	0x200108a8
 800d3d0:	08015cfc 	.word	0x08015cfc

0800d3d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d3d4:	b5b0      	push	{r4, r5, r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <tcp_rexmit_rto_prepare+0x1c>
 800d3e2:	4b31      	ldr	r3, [pc, #196]	; (800d4a8 <tcp_rexmit_rto_prepare+0xd4>)
 800d3e4:	f240 6263 	movw	r2, #1635	; 0x663
 800d3e8:	4930      	ldr	r1, [pc, #192]	; (800d4ac <tcp_rexmit_rto_prepare+0xd8>)
 800d3ea:	4831      	ldr	r0, [pc, #196]	; (800d4b0 <tcp_rexmit_rto_prepare+0xdc>)
 800d3ec:	f005 fdec 	bl	8012fc8 <iprintf>

  if (pcb->unacked == NULL) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d3f8:	f06f 0305 	mvn.w	r3, #5
 800d3fc:	e050      	b.n	800d4a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	e00b      	b.n	800d41e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7ff fee4 	bl	800d1d4 <tcp_output_segment_busy>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d002      	beq.n	800d418 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d412:	f06f 0305 	mvn.w	r3, #5
 800d416:	e043      	b.n	800d4a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	60fb      	str	r3, [r7, #12]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1ef      	bne.n	800d406 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff fed4 	bl	800d1d4 <tcp_output_segment_busy>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d002      	beq.n	800d438 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d432:	f06f 0305 	mvn.w	r3, #5
 800d436:	e033      	b.n	800d4a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8b5b      	ldrh	r3, [r3, #26]
 800d452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d456:	b29a      	uxth	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	4618      	mov	r0, r3
 800d464:	f7f9 fcb1 	bl	8006dca <lwip_htonl>
 800d468:	4604      	mov	r4, r0
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	891b      	ldrh	r3, [r3, #8]
 800d46e:	461d      	mov	r5, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	899b      	ldrh	r3, [r3, #12]
 800d476:	b29b      	uxth	r3, r3
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f9 fc91 	bl	8006da0 <lwip_htons>
 800d47e:	4603      	mov	r3, r0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	f003 0303 	and.w	r3, r3, #3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <tcp_rexmit_rto_prepare+0xba>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e000      	b.n	800d490 <tcp_rexmit_rto_prepare+0xbc>
 800d48e:	2300      	movs	r3, #0
 800d490:	442b      	add	r3, r5
 800d492:	18e2      	adds	r2, r4, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d4a8:	080156d4 	.word	0x080156d4
 800d4ac:	08015d10 	.word	0x08015d10
 800d4b0:	08015728 	.word	0x08015728

0800d4b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <tcp_rexmit_rto_commit+0x1c>
 800d4c2:	4b0d      	ldr	r3, [pc, #52]	; (800d4f8 <tcp_rexmit_rto_commit+0x44>)
 800d4c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d4c8:	490c      	ldr	r1, [pc, #48]	; (800d4fc <tcp_rexmit_rto_commit+0x48>)
 800d4ca:	480d      	ldr	r0, [pc, #52]	; (800d500 <tcp_rexmit_rto_commit+0x4c>)
 800d4cc:	f005 fd7c 	bl	8012fc8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4d6:	2bff      	cmp	r3, #255	; 0xff
 800d4d8:	d007      	beq.n	800d4ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff fc7e 	bl	800cdec <tcp_output>
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	080156d4 	.word	0x080156d4
 800d4fc:	08015d34 	.word	0x08015d34
 800d500:	08015728 	.word	0x08015728

0800d504 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <tcp_rexmit_rto+0x1c>
 800d512:	4b0a      	ldr	r3, [pc, #40]	; (800d53c <tcp_rexmit_rto+0x38>)
 800d514:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d518:	4909      	ldr	r1, [pc, #36]	; (800d540 <tcp_rexmit_rto+0x3c>)
 800d51a:	480a      	ldr	r0, [pc, #40]	; (800d544 <tcp_rexmit_rto+0x40>)
 800d51c:	f005 fd54 	bl	8012fc8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff ff57 	bl	800d3d4 <tcp_rexmit_rto_prepare>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d102      	bne.n	800d532 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff ffc1 	bl	800d4b4 <tcp_rexmit_rto_commit>
  }
}
 800d532:	bf00      	nop
 800d534:	3708      	adds	r7, #8
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	080156d4 	.word	0x080156d4
 800d540:	08015d58 	.word	0x08015d58
 800d544:	08015728 	.word	0x08015728

0800d548 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d548:	b590      	push	{r4, r7, lr}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d106      	bne.n	800d564 <tcp_rexmit+0x1c>
 800d556:	4b2f      	ldr	r3, [pc, #188]	; (800d614 <tcp_rexmit+0xcc>)
 800d558:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d55c:	492e      	ldr	r1, [pc, #184]	; (800d618 <tcp_rexmit+0xd0>)
 800d55e:	482f      	ldr	r0, [pc, #188]	; (800d61c <tcp_rexmit+0xd4>)
 800d560:	f005 fd32 	bl	8012fc8 <iprintf>

  if (pcb->unacked == NULL) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d102      	bne.n	800d572 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d56c:	f06f 0305 	mvn.w	r3, #5
 800d570:	e04c      	b.n	800d60c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d576:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d578:	68b8      	ldr	r0, [r7, #8]
 800d57a:	f7ff fe2b 	bl	800d1d4 <tcp_output_segment_busy>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d002      	beq.n	800d58a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d584:	f06f 0305 	mvn.w	r3, #5
 800d588:	e040      	b.n	800d60c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	336c      	adds	r3, #108	; 0x6c
 800d596:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d598:	e002      	b.n	800d5a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d011      	beq.n	800d5cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f9 fc0a 	bl	8006dca <lwip_htonl>
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7f9 fc03 	bl	8006dca <lwip_htonl>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dbe6      	blt.n	800d59a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d103      	bne.n	800d5ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5f0:	2bff      	cmp	r3, #255	; 0xff
 800d5f2:	d007      	beq.n	800d604 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	bd90      	pop	{r4, r7, pc}
 800d614:	080156d4 	.word	0x080156d4
 800d618:	08015d74 	.word	0x08015d74
 800d61c:	08015728 	.word	0x08015728

0800d620 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d106      	bne.n	800d63c <tcp_rexmit_fast+0x1c>
 800d62e:	4b2a      	ldr	r3, [pc, #168]	; (800d6d8 <tcp_rexmit_fast+0xb8>)
 800d630:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d634:	4929      	ldr	r1, [pc, #164]	; (800d6dc <tcp_rexmit_fast+0xbc>)
 800d636:	482a      	ldr	r0, [pc, #168]	; (800d6e0 <tcp_rexmit_fast+0xc0>)
 800d638:	f005 fcc6 	bl	8012fc8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d640:	2b00      	cmp	r3, #0
 800d642:	d044      	beq.n	800d6ce <tcp_rexmit_fast+0xae>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8b5b      	ldrh	r3, [r3, #26]
 800d648:	f003 0304 	and.w	r3, r3, #4
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d13e      	bne.n	800d6ce <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff ff79 	bl	800d548 <tcp_rexmit>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d138      	bne.n	800d6ce <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d668:	4293      	cmp	r3, r2
 800d66a:	bf28      	it	cs
 800d66c:	4613      	movcs	r3, r2
 800d66e:	b29b      	uxth	r3, r3
 800d670:	0fda      	lsrs	r2, r3, #31
 800d672:	4413      	add	r3, r2
 800d674:	105b      	asrs	r3, r3, #1
 800d676:	b29a      	uxth	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d684:	461a      	mov	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d206      	bcs.n	800d69e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	b29a      	uxth	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	0049      	lsls	r1, r1, #1
 800d6ac:	440b      	add	r3, r1
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	4413      	add	r3, r2
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	8b5b      	ldrh	r3, [r3, #26]
 800d6be:	f043 0304 	orr.w	r3, r3, #4
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d6ce:	bf00      	nop
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	080156d4 	.word	0x080156d4
 800d6dc:	08015d8c 	.word	0x08015d8c
 800d6e0:	08015728 	.word	0x08015728

0800d6e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	607b      	str	r3, [r7, #4]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	817b      	strh	r3, [r7, #10]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d6f6:	897a      	ldrh	r2, [r7, #10]
 800d6f8:	893b      	ldrh	r3, [r7, #8]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	b29b      	uxth	r3, r3
 800d6fe:	3314      	adds	r3, #20
 800d700:	b29b      	uxth	r3, r3
 800d702:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d706:	4619      	mov	r1, r3
 800d708:	2022      	movs	r0, #34	; 0x22
 800d70a:	f7fa fbfb 	bl	8007f04 <pbuf_alloc>
 800d70e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d04d      	beq.n	800d7b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d716:	897b      	ldrh	r3, [r7, #10]
 800d718:	3313      	adds	r3, #19
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	8952      	ldrh	r2, [r2, #10]
 800d71e:	4293      	cmp	r3, r2
 800d720:	db06      	blt.n	800d730 <tcp_output_alloc_header_common+0x4c>
 800d722:	4b26      	ldr	r3, [pc, #152]	; (800d7bc <tcp_output_alloc_header_common+0xd8>)
 800d724:	f240 7223 	movw	r2, #1827	; 0x723
 800d728:	4925      	ldr	r1, [pc, #148]	; (800d7c0 <tcp_output_alloc_header_common+0xdc>)
 800d72a:	4826      	ldr	r0, [pc, #152]	; (800d7c4 <tcp_output_alloc_header_common+0xe0>)
 800d72c:	f005 fc4c 	bl	8012fc8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d736:	8c3b      	ldrh	r3, [r7, #32]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f9 fb31 	bl	8006da0 <lwip_htons>
 800d73e:	4603      	mov	r3, r0
 800d740:	461a      	mov	r2, r3
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d748:	4618      	mov	r0, r3
 800d74a:	f7f9 fb29 	bl	8006da0 <lwip_htons>
 800d74e:	4603      	mov	r3, r0
 800d750:	461a      	mov	r2, r3
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7f9 fb34 	bl	8006dca <lwip_htonl>
 800d762:	4602      	mov	r2, r0
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d768:	897b      	ldrh	r3, [r7, #10]
 800d76a:	089b      	lsrs	r3, r3, #2
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	3305      	adds	r3, #5
 800d770:	b29b      	uxth	r3, r3
 800d772:	031b      	lsls	r3, r3, #12
 800d774:	b29a      	uxth	r2, r3
 800d776:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	4313      	orrs	r3, r2
 800d77e:	b29b      	uxth	r3, r3
 800d780:	4618      	mov	r0, r3
 800d782:	f7f9 fb0d 	bl	8006da0 <lwip_htons>
 800d786:	4603      	mov	r3, r0
 800d788:	461a      	mov	r2, r3
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d78e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d790:	4618      	mov	r0, r3
 800d792:	f7f9 fb05 	bl	8006da0 <lwip_htons>
 800d796:	4603      	mov	r3, r0
 800d798:	461a      	mov	r2, r3
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	741a      	strb	r2, [r3, #16]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	749a      	strb	r2, [r3, #18]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d7b2:	697b      	ldr	r3, [r7, #20]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	080156d4 	.word	0x080156d4
 800d7c0:	08015dac 	.word	0x08015dac
 800d7c4:	08015728 	.word	0x08015728

0800d7c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d7c8:	b5b0      	push	{r4, r5, r7, lr}
 800d7ca:	b08a      	sub	sp, #40	; 0x28
 800d7cc:	af04      	add	r7, sp, #16
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	607b      	str	r3, [r7, #4]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	817b      	strh	r3, [r7, #10]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <tcp_output_alloc_header+0x26>
 800d7e0:	4b15      	ldr	r3, [pc, #84]	; (800d838 <tcp_output_alloc_header+0x70>)
 800d7e2:	f240 7242 	movw	r2, #1858	; 0x742
 800d7e6:	4915      	ldr	r1, [pc, #84]	; (800d83c <tcp_output_alloc_header+0x74>)
 800d7e8:	4815      	ldr	r0, [pc, #84]	; (800d840 <tcp_output_alloc_header+0x78>)
 800d7ea:	f005 fbed 	bl	8012fc8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	8adb      	ldrh	r3, [r3, #22]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	8b12      	ldrh	r2, [r2, #24]
 800d7fa:	68f9      	ldr	r1, [r7, #12]
 800d7fc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d7fe:	893d      	ldrh	r5, [r7, #8]
 800d800:	897c      	ldrh	r4, [r7, #10]
 800d802:	9103      	str	r1, [sp, #12]
 800d804:	2110      	movs	r1, #16
 800d806:	9102      	str	r1, [sp, #8]
 800d808:	9201      	str	r2, [sp, #4]
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	462a      	mov	r2, r5
 800d810:	4621      	mov	r1, r4
 800d812:	f7ff ff67 	bl	800d6e4 <tcp_output_alloc_header_common>
 800d816:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d006      	beq.n	800d82c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d826:	441a      	add	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d82c:	697b      	ldr	r3, [r7, #20]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bdb0      	pop	{r4, r5, r7, pc}
 800d836:	bf00      	nop
 800d838:	080156d4 	.word	0x080156d4
 800d83c:	08015ddc 	.word	0x08015ddc
 800d840:	08015728 	.word	0x08015728

0800d844 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	4611      	mov	r1, r2
 800d850:	461a      	mov	r2, r3
 800d852:	460b      	mov	r3, r1
 800d854:	71fb      	strb	r3, [r7, #7]
 800d856:	4613      	mov	r3, r2
 800d858:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <tcp_output_fill_options+0x2e>
 800d864:	4b12      	ldr	r3, [pc, #72]	; (800d8b0 <tcp_output_fill_options+0x6c>)
 800d866:	f240 7256 	movw	r2, #1878	; 0x756
 800d86a:	4912      	ldr	r1, [pc, #72]	; (800d8b4 <tcp_output_fill_options+0x70>)
 800d86c:	4812      	ldr	r0, [pc, #72]	; (800d8b8 <tcp_output_fill_options+0x74>)
 800d86e:	f005 fbab 	bl	8012fc8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	3314      	adds	r3, #20
 800d87c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d87e:	8bfb      	ldrh	r3, [r7, #30]
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	461a      	mov	r2, r3
 800d884:	79fb      	ldrb	r3, [r7, #7]
 800d886:	009b      	lsls	r3, r3, #2
 800d888:	f003 0304 	and.w	r3, r3, #4
 800d88c:	4413      	add	r3, r2
 800d88e:	3314      	adds	r3, #20
 800d890:	69ba      	ldr	r2, [r7, #24]
 800d892:	4413      	add	r3, r2
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	429a      	cmp	r2, r3
 800d898:	d006      	beq.n	800d8a8 <tcp_output_fill_options+0x64>
 800d89a:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <tcp_output_fill_options+0x6c>)
 800d89c:	f240 7275 	movw	r2, #1909	; 0x775
 800d8a0:	4906      	ldr	r1, [pc, #24]	; (800d8bc <tcp_output_fill_options+0x78>)
 800d8a2:	4805      	ldr	r0, [pc, #20]	; (800d8b8 <tcp_output_fill_options+0x74>)
 800d8a4:	f005 fb90 	bl	8012fc8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d8a8:	bf00      	nop
 800d8aa:	3720      	adds	r7, #32
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	080156d4 	.word	0x080156d4
 800d8b4:	08015e04 	.word	0x08015e04
 800d8b8:	08015728 	.word	0x08015728
 800d8bc:	08015cfc 	.word	0x08015cfc

0800d8c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b08a      	sub	sp, #40	; 0x28
 800d8c4:	af04      	add	r7, sp, #16
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d106      	bne.n	800d8e2 <tcp_output_control_segment+0x22>
 800d8d4:	4b1c      	ldr	r3, [pc, #112]	; (800d948 <tcp_output_control_segment+0x88>)
 800d8d6:	f240 7287 	movw	r2, #1927	; 0x787
 800d8da:	491c      	ldr	r1, [pc, #112]	; (800d94c <tcp_output_control_segment+0x8c>)
 800d8dc:	481c      	ldr	r0, [pc, #112]	; (800d950 <tcp_output_control_segment+0x90>)
 800d8de:	f005 fb73 	bl	8012fc8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f7fe ff40 	bl	800c76c <tcp_route>
 800d8ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d102      	bne.n	800d8fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d8f4:	23fc      	movs	r3, #252	; 0xfc
 800d8f6:	75fb      	strb	r3, [r7, #23]
 800d8f8:	e01c      	b.n	800d934 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d006      	beq.n	800d90e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	7adb      	ldrb	r3, [r3, #11]
 800d904:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	7a9b      	ldrb	r3, [r3, #10]
 800d90a:	757b      	strb	r3, [r7, #21]
 800d90c:	e003      	b.n	800d916 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d90e:	23ff      	movs	r3, #255	; 0xff
 800d910:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d912:	2300      	movs	r3, #0
 800d914:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d916:	7dba      	ldrb	r2, [r7, #22]
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	2306      	movs	r3, #6
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	7d7b      	ldrb	r3, [r7, #21]
 800d922:	9300      	str	r3, [sp, #0]
 800d924:	4613      	mov	r3, r2
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	6879      	ldr	r1, [r7, #4]
 800d92a:	68b8      	ldr	r0, [r7, #8]
 800d92c:	f004 f91a 	bl	8011b64 <ip4_output_if>
 800d930:	4603      	mov	r3, r0
 800d932:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d934:	68b8      	ldr	r0, [r7, #8]
 800d936:	f7fa fdc9 	bl	80084cc <pbuf_free>
  return err;
 800d93a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	080156d4 	.word	0x080156d4
 800d94c:	08015e2c 	.word	0x08015e2c
 800d950:	08015728 	.word	0x08015728

0800d954 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d954:	b590      	push	{r4, r7, lr}
 800d956:	b08b      	sub	sp, #44	; 0x2c
 800d958:	af04      	add	r7, sp, #16
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
 800d960:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d106      	bne.n	800d976 <tcp_rst+0x22>
 800d968:	4b1f      	ldr	r3, [pc, #124]	; (800d9e8 <tcp_rst+0x94>)
 800d96a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d96e:	491f      	ldr	r1, [pc, #124]	; (800d9ec <tcp_rst+0x98>)
 800d970:	481f      	ldr	r0, [pc, #124]	; (800d9f0 <tcp_rst+0x9c>)
 800d972:	f005 fb29 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <tcp_rst+0x36>
 800d97c:	4b1a      	ldr	r3, [pc, #104]	; (800d9e8 <tcp_rst+0x94>)
 800d97e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d982:	491c      	ldr	r1, [pc, #112]	; (800d9f4 <tcp_rst+0xa0>)
 800d984:	481a      	ldr	r0, [pc, #104]	; (800d9f0 <tcp_rst+0x9c>)
 800d986:	f005 fb1f 	bl	8012fc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d98a:	2300      	movs	r3, #0
 800d98c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d98e:	f246 0308 	movw	r3, #24584	; 0x6008
 800d992:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d994:	7dfb      	ldrb	r3, [r7, #23]
 800d996:	b29c      	uxth	r4, r3
 800d998:	68b8      	ldr	r0, [r7, #8]
 800d99a:	f7f9 fa16 	bl	8006dca <lwip_htonl>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	8abb      	ldrh	r3, [r7, #20]
 800d9a2:	9303      	str	r3, [sp, #12]
 800d9a4:	2314      	movs	r3, #20
 800d9a6:	9302      	str	r3, [sp, #8]
 800d9a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d9ae:	9300      	str	r3, [sp, #0]
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff fe94 	bl	800d6e4 <tcp_output_alloc_header_common>
 800d9bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00c      	beq.n	800d9de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	6939      	ldr	r1, [r7, #16]
 800d9ca:	68f8      	ldr	r0, [r7, #12]
 800d9cc:	f7ff ff3a 	bl	800d844 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	6939      	ldr	r1, [r7, #16]
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f7ff ff72 	bl	800d8c0 <tcp_output_control_segment>
 800d9dc:	e000      	b.n	800d9e0 <tcp_rst+0x8c>
    return;
 800d9de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd90      	pop	{r4, r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	080156d4 	.word	0x080156d4
 800d9ec:	08015e58 	.word	0x08015e58
 800d9f0:	08015728 	.word	0x08015728
 800d9f4:	08015e74 	.word	0x08015e74

0800d9f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d9f8:	b590      	push	{r4, r7, lr}
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <tcp_send_empty_ack+0x24>
 800da0e:	4b28      	ldr	r3, [pc, #160]	; (800dab0 <tcp_send_empty_ack+0xb8>)
 800da10:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800da14:	4927      	ldr	r1, [pc, #156]	; (800dab4 <tcp_send_empty_ack+0xbc>)
 800da16:	4828      	ldr	r0, [pc, #160]	; (800dab8 <tcp_send_empty_ack+0xc0>)
 800da18:	f005 fad6 	bl	8012fc8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f003 0304 	and.w	r3, r3, #4
 800da26:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800da28:	7d7b      	ldrb	r3, [r7, #21]
 800da2a:	b29c      	uxth	r4, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da30:	4618      	mov	r0, r3
 800da32:	f7f9 f9ca 	bl	8006dca <lwip_htonl>
 800da36:	4603      	mov	r3, r0
 800da38:	2200      	movs	r2, #0
 800da3a:	4621      	mov	r1, r4
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7ff fec3 	bl	800d7c8 <tcp_output_alloc_header>
 800da42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d109      	bne.n	800da5e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	8b5b      	ldrh	r3, [r3, #26]
 800da4e:	f043 0303 	orr.w	r3, r3, #3
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800da58:	f06f 0301 	mvn.w	r3, #1
 800da5c:	e023      	b.n	800daa6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800da5e:	7dbb      	ldrb	r3, [r7, #22]
 800da60:	7dfa      	ldrb	r2, [r7, #23]
 800da62:	6939      	ldr	r1, [r7, #16]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff feed 	bl	800d844 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3304      	adds	r3, #4
 800da70:	6939      	ldr	r1, [r7, #16]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff ff24 	bl	800d8c0 <tcp_output_control_segment>
 800da78:	4603      	mov	r3, r0
 800da7a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800da7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d007      	beq.n	800da94 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	8b5b      	ldrh	r3, [r3, #26]
 800da88:	f043 0303 	orr.w	r3, r3, #3
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	835a      	strh	r2, [r3, #26]
 800da92:	e006      	b.n	800daa2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	8b5b      	ldrh	r3, [r3, #26]
 800da98:	f023 0303 	bic.w	r3, r3, #3
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800daa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	371c      	adds	r7, #28
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd90      	pop	{r4, r7, pc}
 800daae:	bf00      	nop
 800dab0:	080156d4 	.word	0x080156d4
 800dab4:	08015e90 	.word	0x08015e90
 800dab8:	08015728 	.word	0x08015728

0800dabc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dabc:	b590      	push	{r4, r7, lr}
 800dabe:	b087      	sub	sp, #28
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dac4:	2300      	movs	r3, #0
 800dac6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <tcp_keepalive+0x20>
 800dace:	4b18      	ldr	r3, [pc, #96]	; (800db30 <tcp_keepalive+0x74>)
 800dad0:	f640 0224 	movw	r2, #2084	; 0x824
 800dad4:	4917      	ldr	r1, [pc, #92]	; (800db34 <tcp_keepalive+0x78>)
 800dad6:	4818      	ldr	r0, [pc, #96]	; (800db38 <tcp_keepalive+0x7c>)
 800dad8:	f005 fa76 	bl	8012fc8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	b29c      	uxth	r4, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dae4:	3b01      	subs	r3, #1
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f9 f96f 	bl	8006dca <lwip_htonl>
 800daec:	4603      	mov	r3, r0
 800daee:	2200      	movs	r2, #0
 800daf0:	4621      	mov	r1, r4
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff fe68 	bl	800d7c8 <tcp_output_alloc_header>
 800daf8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d102      	bne.n	800db06 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800db00:	f04f 33ff 	mov.w	r3, #4294967295
 800db04:	e010      	b.n	800db28 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800db06:	7dfb      	ldrb	r3, [r7, #23]
 800db08:	2200      	movs	r2, #0
 800db0a:	6939      	ldr	r1, [r7, #16]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f7ff fe99 	bl	800d844 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3304      	adds	r3, #4
 800db18:	6939      	ldr	r1, [r7, #16]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fed0 	bl	800d8c0 <tcp_output_control_segment>
 800db20:	4603      	mov	r3, r0
 800db22:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800db24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	371c      	adds	r7, #28
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd90      	pop	{r4, r7, pc}
 800db30:	080156d4 	.word	0x080156d4
 800db34:	08015eb0 	.word	0x08015eb0
 800db38:	08015728 	.word	0x08015728

0800db3c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800db3c:	b590      	push	{r4, r7, lr}
 800db3e:	b08b      	sub	sp, #44	; 0x2c
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800db44:	2300      	movs	r3, #0
 800db46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d106      	bne.n	800db5e <tcp_zero_window_probe+0x22>
 800db50:	4b4c      	ldr	r3, [pc, #304]	; (800dc84 <tcp_zero_window_probe+0x148>)
 800db52:	f640 024f 	movw	r2, #2127	; 0x84f
 800db56:	494c      	ldr	r1, [pc, #304]	; (800dc88 <tcp_zero_window_probe+0x14c>)
 800db58:	484c      	ldr	r0, [pc, #304]	; (800dc8c <tcp_zero_window_probe+0x150>)
 800db5a:	f005 fa35 	bl	8012fc8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db62:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e086      	b.n	800dc7c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800db74:	2bff      	cmp	r3, #255	; 0xff
 800db76:	d007      	beq.n	800db88 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800db7e:	3301      	adds	r3, #1
 800db80:	b2da      	uxtb	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	899b      	ldrh	r3, [r3, #12]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	4618      	mov	r0, r3
 800db92:	f7f9 f905 	bl	8006da0 <lwip_htons>
 800db96:	4603      	mov	r3, r0
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0301 	and.w	r3, r3, #1
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d005      	beq.n	800dbae <tcp_zero_window_probe+0x72>
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	891b      	ldrh	r3, [r3, #8]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <tcp_zero_window_probe+0x72>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e000      	b.n	800dbb0 <tcp_zero_window_probe+0x74>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800dbb2:	7ffb      	ldrb	r3, [r7, #31]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	bf0c      	ite	eq
 800dbb8:	2301      	moveq	r3, #1
 800dbba:	2300      	movne	r3, #0
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dbc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc4:	b299      	uxth	r1, r3
 800dbc6:	6a3b      	ldr	r3, [r7, #32]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	8bba      	ldrh	r2, [r7, #28]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff fdfa 	bl	800d7c8 <tcp_output_alloc_header>
 800dbd4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbe0:	e04c      	b.n	800dc7c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dbe8:	7ffb      	ldrb	r3, [r7, #31]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d011      	beq.n	800dc12 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	899b      	ldrh	r3, [r3, #12]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	b21b      	sxth	r3, r3
 800dbf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dbfa:	b21c      	sxth	r4, r3
 800dbfc:	2011      	movs	r0, #17
 800dbfe:	f7f9 f8cf 	bl	8006da0 <lwip_htons>
 800dc02:	4603      	mov	r3, r0
 800dc04:	b21b      	sxth	r3, r3
 800dc06:	4323      	orrs	r3, r4
 800dc08:	b21b      	sxth	r3, r3
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	819a      	strh	r2, [r3, #12]
 800dc10:	e010      	b.n	800dc34 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	3314      	adds	r3, #20
 800dc18:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	6858      	ldr	r0, [r3, #4]
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	891a      	ldrh	r2, [r3, #8]
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	891b      	ldrh	r3, [r3, #8]
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	6939      	ldr	r1, [r7, #16]
 800dc30:	f7fa fe52 	bl	80088d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7f9 f8c5 	bl	8006dca <lwip_htonl>
 800dc40:	4603      	mov	r3, r0
 800dc42:	3301      	adds	r3, #1
 800dc44:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da02      	bge.n	800dc58 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	69b9      	ldr	r1, [r7, #24]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7ff fdef 	bl	800d844 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	69b9      	ldr	r1, [r7, #24]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff fe26 	bl	800d8c0 <tcp_output_control_segment>
 800dc74:	4603      	mov	r3, r0
 800dc76:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dc78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	372c      	adds	r7, #44	; 0x2c
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd90      	pop	{r4, r7, pc}
 800dc84:	080156d4 	.word	0x080156d4
 800dc88:	08015ecc 	.word	0x08015ecc
 800dc8c:	08015728 	.word	0x08015728

0800dc90 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800dc98:	f7fa ff0c 	bl	8008ab4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dc9c:	4b0a      	ldr	r3, [pc, #40]	; (800dcc8 <tcpip_tcp_timer+0x38>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d103      	bne.n	800dcac <tcpip_tcp_timer+0x1c>
 800dca4:	4b09      	ldr	r3, [pc, #36]	; (800dccc <tcpip_tcp_timer+0x3c>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d005      	beq.n	800dcb8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcac:	2200      	movs	r2, #0
 800dcae:	4908      	ldr	r1, [pc, #32]	; (800dcd0 <tcpip_tcp_timer+0x40>)
 800dcb0:	20fa      	movs	r0, #250	; 0xfa
 800dcb2:	f000 f8f3 	bl	800de9c <sys_timeout>
 800dcb6:	e003      	b.n	800dcc0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dcb8:	4b06      	ldr	r3, [pc, #24]	; (800dcd4 <tcpip_tcp_timer+0x44>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	601a      	str	r2, [r3, #0]
  }
}
 800dcbe:	bf00      	nop
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	200108b4 	.word	0x200108b4
 800dccc:	200108b8 	.word	0x200108b8
 800dcd0:	0800dc91 	.word	0x0800dc91
 800dcd4:	20010900 	.word	0x20010900

0800dcd8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dcdc:	4b0a      	ldr	r3, [pc, #40]	; (800dd08 <tcp_timer_needed+0x30>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10f      	bne.n	800dd04 <tcp_timer_needed+0x2c>
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <tcp_timer_needed+0x34>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d103      	bne.n	800dcf4 <tcp_timer_needed+0x1c>
 800dcec:	4b08      	ldr	r3, [pc, #32]	; (800dd10 <tcp_timer_needed+0x38>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d007      	beq.n	800dd04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dcf4:	4b04      	ldr	r3, [pc, #16]	; (800dd08 <tcp_timer_needed+0x30>)
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	4905      	ldr	r1, [pc, #20]	; (800dd14 <tcp_timer_needed+0x3c>)
 800dcfe:	20fa      	movs	r0, #250	; 0xfa
 800dd00:	f000 f8cc 	bl	800de9c <sys_timeout>
  }
}
 800dd04:	bf00      	nop
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	20010900 	.word	0x20010900
 800dd0c:	200108b4 	.word	0x200108b4
 800dd10:	200108b8 	.word	0x200108b8
 800dd14:	0800dc91 	.word	0x0800dc91

0800dd18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dd24:	200a      	movs	r0, #10
 800dd26:	f7f9 fd13 	bl	8007750 <memp_malloc>
 800dd2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d109      	bne.n	800dd46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d151      	bne.n	800dddc <sys_timeout_abs+0xc4>
 800dd38:	4b2a      	ldr	r3, [pc, #168]	; (800dde4 <sys_timeout_abs+0xcc>)
 800dd3a:	22be      	movs	r2, #190	; 0xbe
 800dd3c:	492a      	ldr	r1, [pc, #168]	; (800dde8 <sys_timeout_abs+0xd0>)
 800dd3e:	482b      	ldr	r0, [pc, #172]	; (800ddec <sys_timeout_abs+0xd4>)
 800dd40:	f005 f942 	bl	8012fc8 <iprintf>
    return;
 800dd44:	e04a      	b.n	800dddc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800dd5e:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <sys_timeout_abs+0xd8>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d103      	bne.n	800dd6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dd66:	4a22      	ldr	r2, [pc, #136]	; (800ddf0 <sys_timeout_abs+0xd8>)
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	6013      	str	r3, [r2, #0]
    return;
 800dd6c:	e037      	b.n	800ddde <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	4b1f      	ldr	r3, [pc, #124]	; (800ddf0 <sys_timeout_abs+0xd8>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	0fdb      	lsrs	r3, r3, #31
 800dd7c:	f003 0301 	and.w	r3, r3, #1
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d007      	beq.n	800dd96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800dd86:	4b1a      	ldr	r3, [pc, #104]	; (800ddf0 <sys_timeout_abs+0xd8>)
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800dd8e:	4a18      	ldr	r2, [pc, #96]	; (800ddf0 <sys_timeout_abs+0xd8>)
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	6013      	str	r3, [r2, #0]
 800dd94:	e023      	b.n	800ddde <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800dd96:	4b16      	ldr	r3, [pc, #88]	; (800ddf0 <sys_timeout_abs+0xd8>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	617b      	str	r3, [r7, #20]
 800dd9c:	e01a      	b.n	800ddd4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00b      	beq.n	800ddbe <sys_timeout_abs+0xa6>
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	0fdb      	lsrs	r3, r3, #31
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	693a      	ldr	r2, [r7, #16]
 800ddca:	601a      	str	r2, [r3, #0]
        break;
 800ddcc:	e007      	b.n	800ddde <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	617b      	str	r3, [r7, #20]
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1e1      	bne.n	800dd9e <sys_timeout_abs+0x86>
 800ddda:	e000      	b.n	800ddde <sys_timeout_abs+0xc6>
    return;
 800dddc:	bf00      	nop
      }
    }
  }
}
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	08015ef0 	.word	0x08015ef0
 800dde8:	08015f24 	.word	0x08015f24
 800ddec:	08015f64 	.word	0x08015f64
 800ddf0:	200108f8 	.word	0x200108f8

0800ddf4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b086      	sub	sp, #24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	4798      	blx	r3

  now = sys_now();
 800de06:	f7f5 fe9f 	bl	8003b48 <sys_now>
 800de0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	681a      	ldr	r2, [r3, #0]
 800de10:	4b0f      	ldr	r3, [pc, #60]	; (800de50 <lwip_cyclic_timer+0x5c>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4413      	add	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	0fdb      	lsrs	r3, r3, #31
 800de20:	f003 0301 	and.w	r3, r3, #1
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d009      	beq.n	800de3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	4413      	add	r3, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	4907      	ldr	r1, [pc, #28]	; (800de54 <lwip_cyclic_timer+0x60>)
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff ff6e 	bl	800dd18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800de3c:	e004      	b.n	800de48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	4904      	ldr	r1, [pc, #16]	; (800de54 <lwip_cyclic_timer+0x60>)
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7ff ff68 	bl	800dd18 <sys_timeout_abs>
}
 800de48:	bf00      	nop
 800de4a:	3718      	adds	r7, #24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	200108fc 	.word	0x200108fc
 800de54:	0800ddf5 	.word	0x0800ddf5

0800de58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de5e:	2301      	movs	r3, #1
 800de60:	607b      	str	r3, [r7, #4]
 800de62:	e00e      	b.n	800de82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800de64:	4a0b      	ldr	r2, [pc, #44]	; (800de94 <sys_timeouts_init+0x3c>)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	00db      	lsls	r3, r3, #3
 800de70:	4a08      	ldr	r2, [pc, #32]	; (800de94 <sys_timeouts_init+0x3c>)
 800de72:	4413      	add	r3, r2
 800de74:	461a      	mov	r2, r3
 800de76:	4908      	ldr	r1, [pc, #32]	; (800de98 <sys_timeouts_init+0x40>)
 800de78:	f000 f810 	bl	800de9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	3301      	adds	r3, #1
 800de80:	607b      	str	r3, [r7, #4]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2b04      	cmp	r3, #4
 800de86:	d9ed      	bls.n	800de64 <sys_timeouts_init+0xc>
  }
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	08016ebc 	.word	0x08016ebc
 800de98:	0800ddf5 	.word	0x0800ddf5

0800de9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800deae:	d306      	bcc.n	800debe <sys_timeout+0x22>
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <sys_timeout+0x40>)
 800deb2:	f240 1229 	movw	r2, #297	; 0x129
 800deb6:	490a      	ldr	r1, [pc, #40]	; (800dee0 <sys_timeout+0x44>)
 800deb8:	480a      	ldr	r0, [pc, #40]	; (800dee4 <sys_timeout+0x48>)
 800deba:	f005 f885 	bl	8012fc8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800debe:	f7f5 fe43 	bl	8003b48 <sys_now>
 800dec2:	4602      	mov	r2, r0
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	4413      	add	r3, r2
 800dec8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	6978      	ldr	r0, [r7, #20]
 800ded0:	f7ff ff22 	bl	800dd18 <sys_timeout_abs>
#endif
}
 800ded4:	bf00      	nop
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	08015ef0 	.word	0x08015ef0
 800dee0:	08015f8c 	.word	0x08015f8c
 800dee4:	08015f64 	.word	0x08015f64

0800dee8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800deee:	f7f5 fe2b 	bl	8003b48 <sys_now>
 800def2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800def4:	4b17      	ldr	r3, [pc, #92]	; (800df54 <sys_check_timeouts+0x6c>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d022      	beq.n	800df46 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	0fdb      	lsrs	r3, r3, #31
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b00      	cmp	r3, #0
 800df12:	d11a      	bne.n	800df4a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a0e      	ldr	r2, [pc, #56]	; (800df54 <sys_check_timeouts+0x6c>)
 800df1a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	4a0a      	ldr	r2, [pc, #40]	; (800df58 <sys_check_timeouts+0x70>)
 800df2e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800df30:	68b9      	ldr	r1, [r7, #8]
 800df32:	200a      	movs	r0, #10
 800df34:	f7f9 fc82 	bl	800783c <memp_free>
    if (handler != NULL) {
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d0da      	beq.n	800def4 <sys_check_timeouts+0xc>
      handler(arg);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6838      	ldr	r0, [r7, #0]
 800df42:	4798      	blx	r3
  do {
 800df44:	e7d6      	b.n	800def4 <sys_check_timeouts+0xc>
      return;
 800df46:	bf00      	nop
 800df48:	e000      	b.n	800df4c <sys_check_timeouts+0x64>
      return;
 800df4a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	200108f8 	.word	0x200108f8
 800df58:	200108fc 	.word	0x200108fc

0800df5c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800df62:	4b16      	ldr	r3, [pc, #88]	; (800dfbc <sys_timeouts_sleeptime+0x60>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800df6a:	f04f 33ff 	mov.w	r3, #4294967295
 800df6e:	e020      	b.n	800dfb2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800df70:	f7f5 fdea 	bl	8003b48 <sys_now>
 800df74:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800df76:	4b11      	ldr	r3, [pc, #68]	; (800dfbc <sys_timeouts_sleeptime+0x60>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	0fdb      	lsrs	r3, r3, #31
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	b2db      	uxtb	r3, r3
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <sys_timeouts_sleeptime+0x34>
    return 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	e010      	b.n	800dfb2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <sys_timeouts_sleeptime+0x60>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	685a      	ldr	r2, [r3, #4]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	1ad3      	subs	r3, r2, r3
 800df9a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	da06      	bge.n	800dfb0 <sys_timeouts_sleeptime+0x54>
 800dfa2:	4b07      	ldr	r3, [pc, #28]	; (800dfc0 <sys_timeouts_sleeptime+0x64>)
 800dfa4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800dfa8:	4906      	ldr	r1, [pc, #24]	; (800dfc4 <sys_timeouts_sleeptime+0x68>)
 800dfaa:	4807      	ldr	r0, [pc, #28]	; (800dfc8 <sys_timeouts_sleeptime+0x6c>)
 800dfac:	f005 f80c 	bl	8012fc8 <iprintf>
    return ret;
 800dfb0:	683b      	ldr	r3, [r7, #0]
  }
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	200108f8 	.word	0x200108f8
 800dfc0:	08015ef0 	.word	0x08015ef0
 800dfc4:	08015fc4 	.word	0x08015fc4
 800dfc8:	08015f64 	.word	0x08015f64

0800dfcc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dfd0:	f004 ff0c 	bl	8012dec <rand>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	4b01      	ldr	r3, [pc, #4]	; (800dfec <udp_init+0x20>)
 800dfe6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dfe8:	bf00      	nop
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	20000018 	.word	0x20000018

0800dff0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800dffa:	4b17      	ldr	r3, [pc, #92]	; (800e058 <udp_new_port+0x68>)
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	1c5a      	adds	r2, r3, #1
 800e000:	b291      	uxth	r1, r2
 800e002:	4a15      	ldr	r2, [pc, #84]	; (800e058 <udp_new_port+0x68>)
 800e004:	8011      	strh	r1, [r2, #0]
 800e006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d103      	bne.n	800e016 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e00e:	4b12      	ldr	r3, [pc, #72]	; (800e058 <udp_new_port+0x68>)
 800e010:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e014:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e016:	4b11      	ldr	r3, [pc, #68]	; (800e05c <udp_new_port+0x6c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	603b      	str	r3, [r7, #0]
 800e01c:	e011      	b.n	800e042 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	8a5a      	ldrh	r2, [r3, #18]
 800e022:	4b0d      	ldr	r3, [pc, #52]	; (800e058 <udp_new_port+0x68>)
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	429a      	cmp	r2, r3
 800e028:	d108      	bne.n	800e03c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e02a:	88fb      	ldrh	r3, [r7, #6]
 800e02c:	3301      	adds	r3, #1
 800e02e:	80fb      	strh	r3, [r7, #6]
 800e030:	88fb      	ldrh	r3, [r7, #6]
 800e032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e036:	d3e0      	bcc.n	800dffa <udp_new_port+0xa>
        return 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	e007      	b.n	800e04c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	603b      	str	r3, [r7, #0]
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1ea      	bne.n	800e01e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e048:	4b03      	ldr	r3, [pc, #12]	; (800e058 <udp_new_port+0x68>)
 800e04a:	881b      	ldrh	r3, [r3, #0]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr
 800e058:	20000018 	.word	0x20000018
 800e05c:	20010904 	.word	0x20010904

0800e060 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	4613      	mov	r3, r2
 800e06c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d105      	bne.n	800e080 <udp_input_local_match+0x20>
 800e074:	4b27      	ldr	r3, [pc, #156]	; (800e114 <udp_input_local_match+0xb4>)
 800e076:	2287      	movs	r2, #135	; 0x87
 800e078:	4927      	ldr	r1, [pc, #156]	; (800e118 <udp_input_local_match+0xb8>)
 800e07a:	4828      	ldr	r0, [pc, #160]	; (800e11c <udp_input_local_match+0xbc>)
 800e07c:	f004 ffa4 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d105      	bne.n	800e092 <udp_input_local_match+0x32>
 800e086:	4b23      	ldr	r3, [pc, #140]	; (800e114 <udp_input_local_match+0xb4>)
 800e088:	2288      	movs	r2, #136	; 0x88
 800e08a:	4925      	ldr	r1, [pc, #148]	; (800e120 <udp_input_local_match+0xc0>)
 800e08c:	4823      	ldr	r0, [pc, #140]	; (800e11c <udp_input_local_match+0xbc>)
 800e08e:	f004 ff9b 	bl	8012fc8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	7a1b      	ldrb	r3, [r3, #8]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00b      	beq.n	800e0b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	7a1a      	ldrb	r2, [r3, #8]
 800e09e:	4b21      	ldr	r3, [pc, #132]	; (800e124 <udp_input_local_match+0xc4>)
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d001      	beq.n	800e0b2 <udp_input_local_match+0x52>
    return 0;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e02b      	b.n	800e10a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d018      	beq.n	800e0ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d013      	beq.n	800e0e6 <udp_input_local_match+0x86>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00f      	beq.n	800e0e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0c6:	4b17      	ldr	r3, [pc, #92]	; (800e124 <udp_input_local_match+0xc4>)
 800e0c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ce:	d00a      	beq.n	800e0e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681a      	ldr	r2, [r3, #0]
 800e0d4:	4b13      	ldr	r3, [pc, #76]	; (800e124 <udp_input_local_match+0xc4>)
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	405a      	eors	r2, r3
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	3308      	adds	r3, #8
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d110      	bne.n	800e108 <udp_input_local_match+0xa8>
          return 1;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	e00f      	b.n	800e10a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d009      	beq.n	800e104 <udp_input_local_match+0xa4>
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d005      	beq.n	800e104 <udp_input_local_match+0xa4>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	4b09      	ldr	r3, [pc, #36]	; (800e124 <udp_input_local_match+0xc4>)
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	429a      	cmp	r2, r3
 800e102:	d101      	bne.n	800e108 <udp_input_local_match+0xa8>
        return 1;
 800e104:	2301      	movs	r3, #1
 800e106:	e000      	b.n	800e10a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	08015fd8 	.word	0x08015fd8
 800e118:	08016008 	.word	0x08016008
 800e11c:	0801602c 	.word	0x0801602c
 800e120:	08016054 	.word	0x08016054
 800e124:	2000d134 	.word	0x2000d134

0800e128 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e128:	b590      	push	{r4, r7, lr}
 800e12a:	b08d      	sub	sp, #52	; 0x34
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d105      	bne.n	800e148 <udp_input+0x20>
 800e13c:	4b7c      	ldr	r3, [pc, #496]	; (800e330 <udp_input+0x208>)
 800e13e:	22cf      	movs	r2, #207	; 0xcf
 800e140:	497c      	ldr	r1, [pc, #496]	; (800e334 <udp_input+0x20c>)
 800e142:	487d      	ldr	r0, [pc, #500]	; (800e338 <udp_input+0x210>)
 800e144:	f004 ff40 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d105      	bne.n	800e15a <udp_input+0x32>
 800e14e:	4b78      	ldr	r3, [pc, #480]	; (800e330 <udp_input+0x208>)
 800e150:	22d0      	movs	r2, #208	; 0xd0
 800e152:	497a      	ldr	r1, [pc, #488]	; (800e33c <udp_input+0x214>)
 800e154:	4878      	ldr	r0, [pc, #480]	; (800e338 <udp_input+0x210>)
 800e156:	f004 ff37 	bl	8012fc8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	895b      	ldrh	r3, [r3, #10]
 800e15e:	2b07      	cmp	r3, #7
 800e160:	d803      	bhi.n	800e16a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7fa f9b2 	bl	80084cc <pbuf_free>
    goto end;
 800e168:	e0de      	b.n	800e328 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e170:	4b73      	ldr	r3, [pc, #460]	; (800e340 <udp_input+0x218>)
 800e172:	695b      	ldr	r3, [r3, #20]
 800e174:	4a72      	ldr	r2, [pc, #456]	; (800e340 <udp_input+0x218>)
 800e176:	6812      	ldr	r2, [r2, #0]
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f003 fdca 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 800e180:	4603      	mov	r3, r0
 800e182:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7f8 fe08 	bl	8006da0 <lwip_htons>
 800e190:	4603      	mov	r3, r0
 800e192:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	885b      	ldrh	r3, [r3, #2]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7f8 fe00 	bl	8006da0 <lwip_htons>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1b0:	4b64      	ldr	r3, [pc, #400]	; (800e344 <udp_input+0x21c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e1b6:	e054      	b.n	800e262 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ba:	8a5b      	ldrh	r3, [r3, #18]
 800e1bc:	89fa      	ldrh	r2, [r7, #14]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d14a      	bne.n	800e258 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e1c2:	7cfb      	ldrb	r3, [r7, #19]
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ca:	f7ff ff49 	bl	800e060 <udp_input_local_match>
 800e1ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d041      	beq.n	800e258 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d6:	7c1b      	ldrb	r3, [r3, #16]
 800e1d8:	f003 0304 	and.w	r3, r3, #4
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d11d      	bne.n	800e21c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d102      	bne.n	800e1ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e8:	61fb      	str	r3, [r7, #28]
 800e1ea:	e017      	b.n	800e21c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e1ec:	7cfb      	ldrb	r3, [r7, #19]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d014      	beq.n	800e21c <udp_input+0xf4>
 800e1f2:	4b53      	ldr	r3, [pc, #332]	; (800e340 <udp_input+0x218>)
 800e1f4:	695b      	ldr	r3, [r3, #20]
 800e1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fa:	d10f      	bne.n	800e21c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	3304      	adds	r3, #4
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	429a      	cmp	r2, r3
 800e208:	d008      	beq.n	800e21c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	3304      	adds	r3, #4
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d101      	bne.n	800e21c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21e:	8a9b      	ldrh	r3, [r3, #20]
 800e220:	8a3a      	ldrh	r2, [r7, #16]
 800e222:	429a      	cmp	r2, r3
 800e224:	d118      	bne.n	800e258 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e228:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d005      	beq.n	800e23a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	4b43      	ldr	r3, [pc, #268]	; (800e340 <udp_input+0x218>)
 800e234:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e236:	429a      	cmp	r2, r3
 800e238:	d10e      	bne.n	800e258 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d014      	beq.n	800e26a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e242:	68da      	ldr	r2, [r3, #12]
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e248:	4b3e      	ldr	r3, [pc, #248]	; (800e344 <udp_input+0x21c>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e250:	4a3c      	ldr	r2, [pc, #240]	; (800e344 <udp_input+0x21c>)
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e256:	e008      	b.n	800e26a <udp_input+0x142>
      }
    }

    prev = pcb;
 800e258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	627b      	str	r3, [r7, #36]	; 0x24
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1a7      	bne.n	800e1b8 <udp_input+0x90>
 800e268:	e000      	b.n	800e26c <udp_input+0x144>
        break;
 800e26a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d101      	bne.n	800e276 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <udp_input+0x15a>
    for_us = 1;
 800e27c:	2301      	movs	r3, #1
 800e27e:	76fb      	strb	r3, [r7, #27]
 800e280:	e00a      	b.n	800e298 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	3304      	adds	r3, #4
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	4b2d      	ldr	r3, [pc, #180]	; (800e340 <udp_input+0x218>)
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	bf0c      	ite	eq
 800e290:	2301      	moveq	r3, #1
 800e292:	2300      	movne	r3, #0
 800e294:	b2db      	uxtb	r3, r3
 800e296:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e298:	7efb      	ldrb	r3, [r7, #27]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d041      	beq.n	800e322 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e29e:	2108      	movs	r1, #8
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7fa f88d 	bl	80083c0 <pbuf_remove_header>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e2ac:	4b20      	ldr	r3, [pc, #128]	; (800e330 <udp_input+0x208>)
 800e2ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e2b2:	4925      	ldr	r1, [pc, #148]	; (800e348 <udp_input+0x220>)
 800e2b4:	4820      	ldr	r0, [pc, #128]	; (800e338 <udp_input+0x210>)
 800e2b6:	f004 fe87 	bl	8012fc8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7fa f906 	bl	80084cc <pbuf_free>
      goto end;
 800e2c0:	e032      	b.n	800e328 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d012      	beq.n	800e2ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00a      	beq.n	800e2e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	699c      	ldr	r4, [r3, #24]
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	69d8      	ldr	r0, [r3, #28]
 800e2d8:	8a3b      	ldrh	r3, [r7, #16]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	4b1b      	ldr	r3, [pc, #108]	; (800e34c <udp_input+0x224>)
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e2e4:	e021      	b.n	800e32a <udp_input+0x202>
        pbuf_free(p);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f7fa f8f0 	bl	80084cc <pbuf_free>
        goto end;
 800e2ec:	e01c      	b.n	800e328 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2ee:	7cfb      	ldrb	r3, [r7, #19]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d112      	bne.n	800e31a <udp_input+0x1f2>
 800e2f4:	4b12      	ldr	r3, [pc, #72]	; (800e340 <udp_input+0x218>)
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2fc:	2be0      	cmp	r3, #224	; 0xe0
 800e2fe:	d00c      	beq.n	800e31a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e300:	4b0f      	ldr	r3, [pc, #60]	; (800e340 <udp_input+0x218>)
 800e302:	899b      	ldrh	r3, [r3, #12]
 800e304:	3308      	adds	r3, #8
 800e306:	b29b      	uxth	r3, r3
 800e308:	b21b      	sxth	r3, r3
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7fa f8ca 	bl	80084a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e312:	2103      	movs	r1, #3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f003 f9bf 	bl	8011698 <icmp_dest_unreach>
      pbuf_free(p);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7fa f8d6 	bl	80084cc <pbuf_free>
  return;
 800e320:	e003      	b.n	800e32a <udp_input+0x202>
    pbuf_free(p);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7fa f8d2 	bl	80084cc <pbuf_free>
  return;
 800e328:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e32a:	372c      	adds	r7, #44	; 0x2c
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd90      	pop	{r4, r7, pc}
 800e330:	08015fd8 	.word	0x08015fd8
 800e334:	0801607c 	.word	0x0801607c
 800e338:	0801602c 	.word	0x0801602c
 800e33c:	08016094 	.word	0x08016094
 800e340:	2000d134 	.word	0x2000d134
 800e344:	20010904 	.word	0x20010904
 800e348:	080160b0 	.word	0x080160b0
 800e34c:	2000d144 	.word	0x2000d144

0800e350 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b088      	sub	sp, #32
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
 800e35c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d109      	bne.n	800e378 <udp_sendto_if+0x28>
 800e364:	4b2e      	ldr	r3, [pc, #184]	; (800e420 <udp_sendto_if+0xd0>)
 800e366:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e36a:	492e      	ldr	r1, [pc, #184]	; (800e424 <udp_sendto_if+0xd4>)
 800e36c:	482e      	ldr	r0, [pc, #184]	; (800e428 <udp_sendto_if+0xd8>)
 800e36e:	f004 fe2b 	bl	8012fc8 <iprintf>
 800e372:	f06f 030f 	mvn.w	r3, #15
 800e376:	e04f      	b.n	800e418 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d109      	bne.n	800e392 <udp_sendto_if+0x42>
 800e37e:	4b28      	ldr	r3, [pc, #160]	; (800e420 <udp_sendto_if+0xd0>)
 800e380:	f240 2281 	movw	r2, #641	; 0x281
 800e384:	4929      	ldr	r1, [pc, #164]	; (800e42c <udp_sendto_if+0xdc>)
 800e386:	4828      	ldr	r0, [pc, #160]	; (800e428 <udp_sendto_if+0xd8>)
 800e388:	f004 fe1e 	bl	8012fc8 <iprintf>
 800e38c:	f06f 030f 	mvn.w	r3, #15
 800e390:	e042      	b.n	800e418 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d109      	bne.n	800e3ac <udp_sendto_if+0x5c>
 800e398:	4b21      	ldr	r3, [pc, #132]	; (800e420 <udp_sendto_if+0xd0>)
 800e39a:	f240 2282 	movw	r2, #642	; 0x282
 800e39e:	4924      	ldr	r1, [pc, #144]	; (800e430 <udp_sendto_if+0xe0>)
 800e3a0:	4821      	ldr	r0, [pc, #132]	; (800e428 <udp_sendto_if+0xd8>)
 800e3a2:	f004 fe11 	bl	8012fc8 <iprintf>
 800e3a6:	f06f 030f 	mvn.w	r3, #15
 800e3aa:	e035      	b.n	800e418 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e3ac:	6a3b      	ldr	r3, [r7, #32]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d109      	bne.n	800e3c6 <udp_sendto_if+0x76>
 800e3b2:	4b1b      	ldr	r3, [pc, #108]	; (800e420 <udp_sendto_if+0xd0>)
 800e3b4:	f240 2283 	movw	r2, #643	; 0x283
 800e3b8:	491e      	ldr	r1, [pc, #120]	; (800e434 <udp_sendto_if+0xe4>)
 800e3ba:	481b      	ldr	r0, [pc, #108]	; (800e428 <udp_sendto_if+0xd8>)
 800e3bc:	f004 fe04 	bl	8012fc8 <iprintf>
 800e3c0:	f06f 030f 	mvn.w	r3, #15
 800e3c4:	e028      	b.n	800e418 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d009      	beq.n	800e3e0 <udp_sendto_if+0x90>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d005      	beq.n	800e3e0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e3dc:	2be0      	cmp	r3, #224	; 0xe0
 800e3de:	d103      	bne.n	800e3e8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	e00b      	b.n	800e400 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	6a3b      	ldr	r3, [r7, #32]
 800e3ee:	3304      	adds	r3, #4
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d002      	beq.n	800e3fc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e3f6:	f06f 0303 	mvn.w	r3, #3
 800e3fa:	e00d      	b.n	800e418 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e400:	887a      	ldrh	r2, [r7, #2]
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	4613      	mov	r3, r2
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	68b9      	ldr	r1, [r7, #8]
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f000 f811 	bl	800e438 <udp_sendto_if_src>
 800e416:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3718      	adds	r7, #24
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	08015fd8 	.word	0x08015fd8
 800e424:	0801614c 	.word	0x0801614c
 800e428:	0801602c 	.word	0x0801602c
 800e42c:	08016168 	.word	0x08016168
 800e430:	08016184 	.word	0x08016184
 800e434:	080161a4 	.word	0x080161a4

0800e438 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08c      	sub	sp, #48	; 0x30
 800e43c:	af04      	add	r7, sp, #16
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d109      	bne.n	800e460 <udp_sendto_if_src+0x28>
 800e44c:	4b65      	ldr	r3, [pc, #404]	; (800e5e4 <udp_sendto_if_src+0x1ac>)
 800e44e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e452:	4965      	ldr	r1, [pc, #404]	; (800e5e8 <udp_sendto_if_src+0x1b0>)
 800e454:	4865      	ldr	r0, [pc, #404]	; (800e5ec <udp_sendto_if_src+0x1b4>)
 800e456:	f004 fdb7 	bl	8012fc8 <iprintf>
 800e45a:	f06f 030f 	mvn.w	r3, #15
 800e45e:	e0bc      	b.n	800e5da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d109      	bne.n	800e47a <udp_sendto_if_src+0x42>
 800e466:	4b5f      	ldr	r3, [pc, #380]	; (800e5e4 <udp_sendto_if_src+0x1ac>)
 800e468:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e46c:	4960      	ldr	r1, [pc, #384]	; (800e5f0 <udp_sendto_if_src+0x1b8>)
 800e46e:	485f      	ldr	r0, [pc, #380]	; (800e5ec <udp_sendto_if_src+0x1b4>)
 800e470:	f004 fdaa 	bl	8012fc8 <iprintf>
 800e474:	f06f 030f 	mvn.w	r3, #15
 800e478:	e0af      	b.n	800e5da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d109      	bne.n	800e494 <udp_sendto_if_src+0x5c>
 800e480:	4b58      	ldr	r3, [pc, #352]	; (800e5e4 <udp_sendto_if_src+0x1ac>)
 800e482:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e486:	495b      	ldr	r1, [pc, #364]	; (800e5f4 <udp_sendto_if_src+0x1bc>)
 800e488:	4858      	ldr	r0, [pc, #352]	; (800e5ec <udp_sendto_if_src+0x1b4>)
 800e48a:	f004 fd9d 	bl	8012fc8 <iprintf>
 800e48e:	f06f 030f 	mvn.w	r3, #15
 800e492:	e0a2      	b.n	800e5da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	2b00      	cmp	r3, #0
 800e498:	d109      	bne.n	800e4ae <udp_sendto_if_src+0x76>
 800e49a:	4b52      	ldr	r3, [pc, #328]	; (800e5e4 <udp_sendto_if_src+0x1ac>)
 800e49c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e4a0:	4955      	ldr	r1, [pc, #340]	; (800e5f8 <udp_sendto_if_src+0x1c0>)
 800e4a2:	4852      	ldr	r0, [pc, #328]	; (800e5ec <udp_sendto_if_src+0x1b4>)
 800e4a4:	f004 fd90 	bl	8012fc8 <iprintf>
 800e4a8:	f06f 030f 	mvn.w	r3, #15
 800e4ac:	e095      	b.n	800e5da <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d109      	bne.n	800e4c8 <udp_sendto_if_src+0x90>
 800e4b4:	4b4b      	ldr	r3, [pc, #300]	; (800e5e4 <udp_sendto_if_src+0x1ac>)
 800e4b6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e4ba:	4950      	ldr	r1, [pc, #320]	; (800e5fc <udp_sendto_if_src+0x1c4>)
 800e4bc:	484b      	ldr	r0, [pc, #300]	; (800e5ec <udp_sendto_if_src+0x1b4>)
 800e4be:	f004 fd83 	bl	8012fc8 <iprintf>
 800e4c2:	f06f 030f 	mvn.w	r3, #15
 800e4c6:	e088      	b.n	800e5da <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	8a5b      	ldrh	r3, [r3, #18]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10f      	bne.n	800e4f0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e4d0:	68f9      	ldr	r1, [r7, #12]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	8a5b      	ldrh	r3, [r3, #18]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f000 f893 	bl	800e604 <udp_bind>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e4e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d002      	beq.n	800e4f0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e4ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e4ee:	e074      	b.n	800e5da <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	891b      	ldrh	r3, [r3, #8]
 800e4f4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d902      	bls.n	800e502 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e4fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e500:	e06b      	b.n	800e5da <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e502:	2108      	movs	r1, #8
 800e504:	68b8      	ldr	r0, [r7, #8]
 800e506:	f7f9 ff4b 	bl	80083a0 <pbuf_add_header>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d015      	beq.n	800e53c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e510:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e514:	2108      	movs	r1, #8
 800e516:	2022      	movs	r0, #34	; 0x22
 800e518:	f7f9 fcf4 	bl	8007f04 <pbuf_alloc>
 800e51c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d102      	bne.n	800e52a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e524:	f04f 33ff 	mov.w	r3, #4294967295
 800e528:	e057      	b.n	800e5da <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	891b      	ldrh	r3, [r3, #8]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d006      	beq.n	800e540 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e532:	68b9      	ldr	r1, [r7, #8]
 800e534:	69f8      	ldr	r0, [r7, #28]
 800e536:	f7fa f8ed 	bl	8008714 <pbuf_chain>
 800e53a:	e001      	b.n	800e540 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	895b      	ldrh	r3, [r3, #10]
 800e544:	2b07      	cmp	r3, #7
 800e546:	d806      	bhi.n	800e556 <udp_sendto_if_src+0x11e>
 800e548:	4b26      	ldr	r3, [pc, #152]	; (800e5e4 <udp_sendto_if_src+0x1ac>)
 800e54a:	f240 320d 	movw	r2, #781	; 0x30d
 800e54e:	492c      	ldr	r1, [pc, #176]	; (800e600 <udp_sendto_if_src+0x1c8>)
 800e550:	4826      	ldr	r0, [pc, #152]	; (800e5ec <udp_sendto_if_src+0x1b4>)
 800e552:	f004 fd39 	bl	8012fc8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	8a5b      	ldrh	r3, [r3, #18]
 800e560:	4618      	mov	r0, r3
 800e562:	f7f8 fc1d 	bl	8006da0 <lwip_htons>
 800e566:	4603      	mov	r3, r0
 800e568:	461a      	mov	r2, r3
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e56e:	887b      	ldrh	r3, [r7, #2]
 800e570:	4618      	mov	r0, r3
 800e572:	f7f8 fc15 	bl	8006da0 <lwip_htons>
 800e576:	4603      	mov	r3, r0
 800e578:	461a      	mov	r2, r3
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	2200      	movs	r2, #0
 800e582:	719a      	strb	r2, [r3, #6]
 800e584:	2200      	movs	r2, #0
 800e586:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	891b      	ldrh	r3, [r3, #8]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f8 fc07 	bl	8006da0 <lwip_htons>
 800e592:	4603      	mov	r3, r0
 800e594:	461a      	mov	r2, r3
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e59a:	2311      	movs	r3, #17
 800e59c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	7adb      	ldrb	r3, [r3, #11]
 800e5a2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	7a9b      	ldrb	r3, [r3, #10]
 800e5a8:	7cb9      	ldrb	r1, [r7, #18]
 800e5aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5ac:	9202      	str	r2, [sp, #8]
 800e5ae:	7cfa      	ldrb	r2, [r7, #19]
 800e5b0:	9201      	str	r2, [sp, #4]
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5ba:	69f8      	ldr	r0, [r7, #28]
 800e5bc:	f003 fafc 	bl	8011bb8 <ip4_output_if_src>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e5c4:	69fa      	ldr	r2, [r7, #28]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d004      	beq.n	800e5d6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e5cc:	69f8      	ldr	r0, [r7, #28]
 800e5ce:	f7f9 ff7d 	bl	80084cc <pbuf_free>
    q = NULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e5d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3720      	adds	r7, #32
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	08015fd8 	.word	0x08015fd8
 800e5e8:	080161c4 	.word	0x080161c4
 800e5ec:	0801602c 	.word	0x0801602c
 800e5f0:	080161e4 	.word	0x080161e4
 800e5f4:	08016204 	.word	0x08016204
 800e5f8:	08016228 	.word	0x08016228
 800e5fc:	0801624c 	.word	0x0801624c
 800e600:	08016270 	.word	0x08016270

0800e604 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	4613      	mov	r3, r2
 800e610:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e618:	4b39      	ldr	r3, [pc, #228]	; (800e700 <udp_bind+0xfc>)
 800e61a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d109      	bne.n	800e636 <udp_bind+0x32>
 800e622:	4b38      	ldr	r3, [pc, #224]	; (800e704 <udp_bind+0x100>)
 800e624:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e628:	4937      	ldr	r1, [pc, #220]	; (800e708 <udp_bind+0x104>)
 800e62a:	4838      	ldr	r0, [pc, #224]	; (800e70c <udp_bind+0x108>)
 800e62c:	f004 fccc 	bl	8012fc8 <iprintf>
 800e630:	f06f 030f 	mvn.w	r3, #15
 800e634:	e060      	b.n	800e6f8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e63a:	4b35      	ldr	r3, [pc, #212]	; (800e710 <udp_bind+0x10c>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	e009      	b.n	800e656 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	429a      	cmp	r2, r3
 800e648:	d102      	bne.n	800e650 <udp_bind+0x4c>
      rebind = 1;
 800e64a:	2301      	movs	r3, #1
 800e64c:	74fb      	strb	r3, [r7, #19]
      break;
 800e64e:	e005      	b.n	800e65c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	617b      	str	r3, [r7, #20]
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1f2      	bne.n	800e642 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e65c:	88fb      	ldrh	r3, [r7, #6]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d109      	bne.n	800e676 <udp_bind+0x72>
    port = udp_new_port();
 800e662:	f7ff fcc5 	bl	800dff0 <udp_new_port>
 800e666:	4603      	mov	r3, r0
 800e668:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e66a:	88fb      	ldrh	r3, [r7, #6]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d12c      	bne.n	800e6ca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e670:	f06f 0307 	mvn.w	r3, #7
 800e674:	e040      	b.n	800e6f8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e676:	4b26      	ldr	r3, [pc, #152]	; (800e710 <udp_bind+0x10c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	e022      	b.n	800e6c4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	429a      	cmp	r2, r3
 800e684:	d01b      	beq.n	800e6be <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	8a5b      	ldrh	r3, [r3, #18]
 800e68a:	88fa      	ldrh	r2, [r7, #6]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d116      	bne.n	800e6be <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e698:	429a      	cmp	r2, r3
 800e69a:	d00d      	beq.n	800e6b8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00a      	beq.n	800e6b8 <udp_bind+0xb4>
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d006      	beq.n	800e6b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e6aa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e6b8:	f06f 0307 	mvn.w	r3, #7
 800e6bc:	e01c      	b.n	800e6f8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	617b      	str	r3, [r7, #20]
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1d9      	bne.n	800e67e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <udp_bind+0xd2>
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	e000      	b.n	800e6d8 <udp_bind+0xd4>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	88fa      	ldrh	r2, [r7, #6]
 800e6e0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e6e2:	7cfb      	ldrb	r3, [r7, #19]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d106      	bne.n	800e6f6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e6e8:	4b09      	ldr	r3, [pc, #36]	; (800e710 <udp_bind+0x10c>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e6f0:	4a07      	ldr	r2, [pc, #28]	; (800e710 <udp_bind+0x10c>)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3718      	adds	r7, #24
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	08016ee4 	.word	0x08016ee4
 800e704:	08015fd8 	.word	0x08015fd8
 800e708:	080162a0 	.word	0x080162a0
 800e70c:	0801602c 	.word	0x0801602c
 800e710:	20010904 	.word	0x20010904

0800e714 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	4613      	mov	r3, r2
 800e720:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d109      	bne.n	800e73c <udp_connect+0x28>
 800e728:	4b2c      	ldr	r3, [pc, #176]	; (800e7dc <udp_connect+0xc8>)
 800e72a:	f240 4235 	movw	r2, #1077	; 0x435
 800e72e:	492c      	ldr	r1, [pc, #176]	; (800e7e0 <udp_connect+0xcc>)
 800e730:	482c      	ldr	r0, [pc, #176]	; (800e7e4 <udp_connect+0xd0>)
 800e732:	f004 fc49 	bl	8012fc8 <iprintf>
 800e736:	f06f 030f 	mvn.w	r3, #15
 800e73a:	e04b      	b.n	800e7d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d109      	bne.n	800e756 <udp_connect+0x42>
 800e742:	4b26      	ldr	r3, [pc, #152]	; (800e7dc <udp_connect+0xc8>)
 800e744:	f240 4236 	movw	r2, #1078	; 0x436
 800e748:	4927      	ldr	r1, [pc, #156]	; (800e7e8 <udp_connect+0xd4>)
 800e74a:	4826      	ldr	r0, [pc, #152]	; (800e7e4 <udp_connect+0xd0>)
 800e74c:	f004 fc3c 	bl	8012fc8 <iprintf>
 800e750:	f06f 030f 	mvn.w	r3, #15
 800e754:	e03e      	b.n	800e7d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	8a5b      	ldrh	r3, [r3, #18]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10f      	bne.n	800e77e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e75e:	68f9      	ldr	r1, [r7, #12]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	8a5b      	ldrh	r3, [r3, #18]
 800e764:	461a      	mov	r2, r3
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff ff4c 	bl	800e604 <udp_bind>
 800e76c:	4603      	mov	r3, r0
 800e76e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e770:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <udp_connect+0x6a>
      return err;
 800e778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e77c:	e02a      	b.n	800e7d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <udp_connect+0x76>
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	e000      	b.n	800e78c <udp_connect+0x78>
 800e78a:	2300      	movs	r3, #0
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	88fa      	ldrh	r2, [r7, #6]
 800e794:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	7c1b      	ldrb	r3, [r3, #16]
 800e79a:	f043 0304 	orr.w	r3, r3, #4
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7a4:	4b11      	ldr	r3, [pc, #68]	; (800e7ec <udp_connect+0xd8>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	617b      	str	r3, [r7, #20]
 800e7aa:	e008      	b.n	800e7be <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d101      	bne.n	800e7b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	e00d      	b.n	800e7d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	617b      	str	r3, [r7, #20]
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1f3      	bne.n	800e7ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e7c4:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <udp_connect+0xd8>)
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e7cc:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <udp_connect+0xd8>)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	08015fd8 	.word	0x08015fd8
 800e7e0:	080162b8 	.word	0x080162b8
 800e7e4:	0801602c 	.word	0x0801602c
 800e7e8:	080162d4 	.word	0x080162d4
 800e7ec:	20010904 	.word	0x20010904

0800e7f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d107      	bne.n	800e812 <udp_recv+0x22>
 800e802:	4b08      	ldr	r3, [pc, #32]	; (800e824 <udp_recv+0x34>)
 800e804:	f240 428a 	movw	r2, #1162	; 0x48a
 800e808:	4907      	ldr	r1, [pc, #28]	; (800e828 <udp_recv+0x38>)
 800e80a:	4808      	ldr	r0, [pc, #32]	; (800e82c <udp_recv+0x3c>)
 800e80c:	f004 fbdc 	bl	8012fc8 <iprintf>
 800e810:	e005      	b.n	800e81e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	61da      	str	r2, [r3, #28]
}
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	08015fd8 	.word	0x08015fd8
 800e828:	0801630c 	.word	0x0801630c
 800e82c:	0801602c 	.word	0x0801602c

0800e830 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d107      	bne.n	800e84e <udp_remove+0x1e>
 800e83e:	4b19      	ldr	r3, [pc, #100]	; (800e8a4 <udp_remove+0x74>)
 800e840:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e844:	4918      	ldr	r1, [pc, #96]	; (800e8a8 <udp_remove+0x78>)
 800e846:	4819      	ldr	r0, [pc, #100]	; (800e8ac <udp_remove+0x7c>)
 800e848:	f004 fbbe 	bl	8012fc8 <iprintf>
 800e84c:	e026      	b.n	800e89c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e84e:	4b18      	ldr	r3, [pc, #96]	; (800e8b0 <udp_remove+0x80>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	429a      	cmp	r2, r3
 800e856:	d105      	bne.n	800e864 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e858:	4b15      	ldr	r3, [pc, #84]	; (800e8b0 <udp_remove+0x80>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	4a14      	ldr	r2, [pc, #80]	; (800e8b0 <udp_remove+0x80>)
 800e860:	6013      	str	r3, [r2, #0]
 800e862:	e017      	b.n	800e894 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e864:	4b12      	ldr	r3, [pc, #72]	; (800e8b0 <udp_remove+0x80>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	60fb      	str	r3, [r7, #12]
 800e86a:	e010      	b.n	800e88e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d009      	beq.n	800e888 <udp_remove+0x58>
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d104      	bne.n	800e888 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	68da      	ldr	r2, [r3, #12]
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	60da      	str	r2, [r3, #12]
        break;
 800e886:	e005      	b.n	800e894 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	60fb      	str	r3, [r7, #12]
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1eb      	bne.n	800e86c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e894:	6879      	ldr	r1, [r7, #4]
 800e896:	2000      	movs	r0, #0
 800e898:	f7f8 ffd0 	bl	800783c <memp_free>
}
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	08015fd8 	.word	0x08015fd8
 800e8a8:	08016324 	.word	0x08016324
 800e8ac:	0801602c 	.word	0x0801602c
 800e8b0:	20010904 	.word	0x20010904

0800e8b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	f7f8 ff48 	bl	8007750 <memp_malloc>
 800e8c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d007      	beq.n	800e8d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e8c8:	2220      	movs	r2, #32
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f004 fbe0 	bl	8013092 <memset>
    pcb->ttl = UDP_TTL;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	22ff      	movs	r2, #255	; 0xff
 800e8d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e8d8:	687b      	ldr	r3, [r7, #4]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
	...

0800e8e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d01e      	beq.n	800e932 <udp_netif_ip_addr_changed+0x4e>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d01a      	beq.n	800e932 <udp_netif_ip_addr_changed+0x4e>
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d017      	beq.n	800e932 <udp_netif_ip_addr_changed+0x4e>
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d013      	beq.n	800e932 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e90a:	4b0d      	ldr	r3, [pc, #52]	; (800e940 <udp_netif_ip_addr_changed+0x5c>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e00c      	b.n	800e92c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d103      	bne.n	800e926 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d1ef      	bne.n	800e912 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e932:	bf00      	nop
 800e934:	3714      	adds	r7, #20
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	20010904 	.word	0x20010904

0800e944 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e948:	4b20      	ldr	r3, [pc, #128]	; (800e9cc <dhcp_inc_pcb_refcount+0x88>)
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d133      	bne.n	800e9b8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e950:	4b1f      	ldr	r3, [pc, #124]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d005      	beq.n	800e964 <dhcp_inc_pcb_refcount+0x20>
 800e958:	4b1e      	ldr	r3, [pc, #120]	; (800e9d4 <dhcp_inc_pcb_refcount+0x90>)
 800e95a:	22e5      	movs	r2, #229	; 0xe5
 800e95c:	491e      	ldr	r1, [pc, #120]	; (800e9d8 <dhcp_inc_pcb_refcount+0x94>)
 800e95e:	481f      	ldr	r0, [pc, #124]	; (800e9dc <dhcp_inc_pcb_refcount+0x98>)
 800e960:	f004 fb32 	bl	8012fc8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e964:	f7ff ffa6 	bl	800e8b4 <udp_new>
 800e968:	4603      	mov	r3, r0
 800e96a:	4a19      	ldr	r2, [pc, #100]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e96c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800e96e:	4b18      	ldr	r3, [pc, #96]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d102      	bne.n	800e97c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e976:	f04f 33ff 	mov.w	r3, #4294967295
 800e97a:	e024      	b.n	800e9c6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e97c:	4b14      	ldr	r3, [pc, #80]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	7a5a      	ldrb	r2, [r3, #9]
 800e982:	4b13      	ldr	r3, [pc, #76]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f042 0220 	orr.w	r2, r2, #32
 800e98a:	b2d2      	uxtb	r2, r2
 800e98c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e98e:	4b10      	ldr	r3, [pc, #64]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2244      	movs	r2, #68	; 0x44
 800e994:	4912      	ldr	r1, [pc, #72]	; (800e9e0 <dhcp_inc_pcb_refcount+0x9c>)
 800e996:	4618      	mov	r0, r3
 800e998:	f7ff fe34 	bl	800e604 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e99c:	4b0c      	ldr	r3, [pc, #48]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2243      	movs	r2, #67	; 0x43
 800e9a2:	490f      	ldr	r1, [pc, #60]	; (800e9e0 <dhcp_inc_pcb_refcount+0x9c>)
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7ff feb5 	bl	800e714 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e9aa:	4b09      	ldr	r3, [pc, #36]	; (800e9d0 <dhcp_inc_pcb_refcount+0x8c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	490c      	ldr	r1, [pc, #48]	; (800e9e4 <dhcp_inc_pcb_refcount+0xa0>)
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff ff1c 	bl	800e7f0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e9b8:	4b04      	ldr	r3, [pc, #16]	; (800e9cc <dhcp_inc_pcb_refcount+0x88>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	b2da      	uxtb	r2, r3
 800e9c0:	4b02      	ldr	r3, [pc, #8]	; (800e9cc <dhcp_inc_pcb_refcount+0x88>)
 800e9c2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	bd80      	pop	{r7, pc}
 800e9ca:	bf00      	nop
 800e9cc:	20010934 	.word	0x20010934
 800e9d0:	20010930 	.word	0x20010930
 800e9d4:	0801633c 	.word	0x0801633c
 800e9d8:	08016374 	.word	0x08016374
 800e9dc:	0801639c 	.word	0x0801639c
 800e9e0:	08016ee4 	.word	0x08016ee4
 800e9e4:	08010201 	.word	0x08010201

0800e9e8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ea28 <dhcp_dec_pcb_refcount+0x40>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d105      	bne.n	800ea00 <dhcp_dec_pcb_refcount+0x18>
 800e9f4:	4b0d      	ldr	r3, [pc, #52]	; (800ea2c <dhcp_dec_pcb_refcount+0x44>)
 800e9f6:	22ff      	movs	r2, #255	; 0xff
 800e9f8:	490d      	ldr	r1, [pc, #52]	; (800ea30 <dhcp_dec_pcb_refcount+0x48>)
 800e9fa:	480e      	ldr	r0, [pc, #56]	; (800ea34 <dhcp_dec_pcb_refcount+0x4c>)
 800e9fc:	f004 fae4 	bl	8012fc8 <iprintf>
  dhcp_pcb_refcount--;
 800ea00:	4b09      	ldr	r3, [pc, #36]	; (800ea28 <dhcp_dec_pcb_refcount+0x40>)
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <dhcp_dec_pcb_refcount+0x40>)
 800ea0a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ea0c:	4b06      	ldr	r3, [pc, #24]	; (800ea28 <dhcp_dec_pcb_refcount+0x40>)
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d107      	bne.n	800ea24 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ea14:	4b08      	ldr	r3, [pc, #32]	; (800ea38 <dhcp_dec_pcb_refcount+0x50>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff ff09 	bl	800e830 <udp_remove>
    dhcp_pcb = NULL;
 800ea1e:	4b06      	ldr	r3, [pc, #24]	; (800ea38 <dhcp_dec_pcb_refcount+0x50>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	601a      	str	r2, [r3, #0]
  }
}
 800ea24:	bf00      	nop
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20010934 	.word	0x20010934
 800ea2c:	0801633c 	.word	0x0801633c
 800ea30:	080163c4 	.word	0x080163c4
 800ea34:	0801639c 	.word	0x0801639c
 800ea38:	20010930 	.word	0x20010930

0800ea3c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ea4a:	210c      	movs	r1, #12
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f001 f819 	bl	800fa84 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ea52:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <dhcp_handle_nak+0x30>)
 800ea54:	4a05      	ldr	r2, [pc, #20]	; (800ea6c <dhcp_handle_nak+0x30>)
 800ea56:	4905      	ldr	r1, [pc, #20]	; (800ea6c <dhcp_handle_nak+0x30>)
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7f9 f891 	bl	8007b80 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fc0c 	bl	800f27c <dhcp_discover>
}
 800ea64:	bf00      	nop
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	08016ee4 	.word	0x08016ee4

0800ea70 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ea7e:	2108      	movs	r1, #8
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f000 ffff 	bl	800fa84 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	331c      	adds	r3, #28
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f002 fb00 	bl	8011094 <etharp_query>
 800ea94:	4603      	mov	r3, r0
 800ea96:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	799b      	ldrb	r3, [r3, #6]
 800ea9c:	2bff      	cmp	r3, #255	; 0xff
 800ea9e:	d005      	beq.n	800eaac <dhcp_check+0x3c>
    dhcp->tries++;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	799b      	ldrb	r3, [r3, #6]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	b2da      	uxtb	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800eaac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800eab0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eab2:	893b      	ldrh	r3, [r7, #8]
 800eab4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eab8:	4a06      	ldr	r2, [pc, #24]	; (800ead4 <dhcp_check+0x64>)
 800eaba:	fb82 1203 	smull	r1, r2, r2, r3
 800eabe:	1152      	asrs	r2, r2, #5
 800eac0:	17db      	asrs	r3, r3, #31
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800eaca:	bf00      	nop
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	10624dd3 	.word	0x10624dd3

0800ead8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800eae8:	4b0c      	ldr	r3, [pc, #48]	; (800eb1c <dhcp_handle_offer+0x44>)
 800eaea:	789b      	ldrb	r3, [r3, #2]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d011      	beq.n	800eb14 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <dhcp_handle_offer+0x48>)
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7f8 f965 	bl	8006dca <lwip_htonl>
 800eb00:	4602      	mov	r2, r0
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	691a      	ldr	r2, [r3, #16]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 f808 	bl	800eb24 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800eb14:	bf00      	nop
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	20010928 	.word	0x20010928
 800eb20:	20010908 	.word	0x20010908

0800eb24 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800eb24:	b5b0      	push	{r4, r5, r7, lr}
 800eb26:	b08a      	sub	sp, #40	; 0x28
 800eb28:	af02      	add	r7, sp, #8
 800eb2a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d109      	bne.n	800eb46 <dhcp_select+0x22>
 800eb32:	4b71      	ldr	r3, [pc, #452]	; (800ecf8 <dhcp_select+0x1d4>)
 800eb34:	f240 1277 	movw	r2, #375	; 0x177
 800eb38:	4970      	ldr	r1, [pc, #448]	; (800ecfc <dhcp_select+0x1d8>)
 800eb3a:	4871      	ldr	r0, [pc, #452]	; (800ed00 <dhcp_select+0x1dc>)
 800eb3c:	f004 fa44 	bl	8012fc8 <iprintf>
 800eb40:	f06f 030f 	mvn.w	r3, #15
 800eb44:	e0d3      	b.n	800ecee <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d109      	bne.n	800eb66 <dhcp_select+0x42>
 800eb52:	4b69      	ldr	r3, [pc, #420]	; (800ecf8 <dhcp_select+0x1d4>)
 800eb54:	f240 1279 	movw	r2, #377	; 0x179
 800eb58:	496a      	ldr	r1, [pc, #424]	; (800ed04 <dhcp_select+0x1e0>)
 800eb5a:	4869      	ldr	r0, [pc, #420]	; (800ed00 <dhcp_select+0x1dc>)
 800eb5c:	f004 fa34 	bl	8012fc8 <iprintf>
 800eb60:	f06f 0305 	mvn.w	r3, #5
 800eb64:	e0c3      	b.n	800ecee <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800eb66:	2101      	movs	r1, #1
 800eb68:	69b8      	ldr	r0, [r7, #24]
 800eb6a:	f000 ff8b 	bl	800fa84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	2203      	movs	r2, #3
 800eb74:	69b9      	ldr	r1, [r7, #24]
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f001 fc10 	bl	801039c <dhcp_create_msg>
 800eb7c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f000 8085 	beq.w	800ec90 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800eb8c:	89b8      	ldrh	r0, [r7, #12]
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eb94:	2302      	movs	r3, #2
 800eb96:	2239      	movs	r2, #57	; 0x39
 800eb98:	f000 ff8e 	bl	800fab8 <dhcp_option>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800eba0:	89b8      	ldrh	r0, [r7, #12]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebac:	461a      	mov	r2, r3
 800ebae:	f000 ffdd 	bl	800fb6c <dhcp_option_short>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ebb6:	89b8      	ldrh	r0, [r7, #12]
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ebbe:	2304      	movs	r3, #4
 800ebc0:	2232      	movs	r2, #50	; 0x32
 800ebc2:	f000 ff79 	bl	800fab8 <dhcp_option>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ebca:	89bc      	ldrh	r4, [r7, #12]
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f8 f8f7 	bl	8006dca <lwip_htonl>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	461a      	mov	r2, r3
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	f000 fff4 	bl	800fbd0 <dhcp_option_long>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ebec:	89b8      	ldrh	r0, [r7, #12]
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ebf4:	2304      	movs	r3, #4
 800ebf6:	2236      	movs	r2, #54	; 0x36
 800ebf8:	f000 ff5e 	bl	800fab8 <dhcp_option>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ec00:	89bc      	ldrh	r4, [r7, #12]
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7f8 f8dc 	bl	8006dca <lwip_htonl>
 800ec12:	4603      	mov	r3, r0
 800ec14:	461a      	mov	r2, r3
 800ec16:	4629      	mov	r1, r5
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 ffd9 	bl	800fbd0 <dhcp_option_long>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec22:	89b8      	ldrh	r0, [r7, #12]
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	2237      	movs	r2, #55	; 0x37
 800ec2e:	f000 ff43 	bl	800fab8 <dhcp_option>
 800ec32:	4603      	mov	r3, r0
 800ec34:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec36:	2300      	movs	r3, #0
 800ec38:	77bb      	strb	r3, [r7, #30]
 800ec3a:	e00e      	b.n	800ec5a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec3c:	89b8      	ldrh	r0, [r7, #12]
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec44:	7fbb      	ldrb	r3, [r7, #30]
 800ec46:	4a30      	ldr	r2, [pc, #192]	; (800ed08 <dhcp_select+0x1e4>)
 800ec48:	5cd3      	ldrb	r3, [r2, r3]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	f000 ff68 	bl	800fb20 <dhcp_option_byte>
 800ec50:	4603      	mov	r3, r0
 800ec52:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec54:	7fbb      	ldrb	r3, [r7, #30]
 800ec56:	3301      	adds	r3, #1
 800ec58:	77bb      	strb	r3, [r7, #30]
 800ec5a:	7fbb      	ldrb	r3, [r7, #30]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d9ed      	bls.n	800ec3c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec60:	89b8      	ldrh	r0, [r7, #12]
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	33f0      	adds	r3, #240	; 0xf0
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	f001 fc6d 	bl	8010548 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ec6e:	4b27      	ldr	r3, [pc, #156]	; (800ed0c <dhcp_select+0x1e8>)
 800ec70:	6818      	ldr	r0, [r3, #0]
 800ec72:	4b27      	ldr	r3, [pc, #156]	; (800ed10 <dhcp_select+0x1ec>)
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	2343      	movs	r3, #67	; 0x43
 800ec7c:	4a25      	ldr	r2, [pc, #148]	; (800ed14 <dhcp_select+0x1f0>)
 800ec7e:	6979      	ldr	r1, [r7, #20]
 800ec80:	f7ff fbda 	bl	800e438 <udp_sendto_if_src>
 800ec84:	4603      	mov	r3, r0
 800ec86:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ec88:	6978      	ldr	r0, [r7, #20]
 800ec8a:	f7f9 fc1f 	bl	80084cc <pbuf_free>
 800ec8e:	e001      	b.n	800ec94 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ec90:	23ff      	movs	r3, #255	; 0xff
 800ec92:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	799b      	ldrb	r3, [r3, #6]
 800ec98:	2bff      	cmp	r3, #255	; 0xff
 800ec9a:	d005      	beq.n	800eca8 <dhcp_select+0x184>
    dhcp->tries++;
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	799b      	ldrb	r3, [r3, #6]
 800eca0:	3301      	adds	r3, #1
 800eca2:	b2da      	uxtb	r2, r3
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	799b      	ldrb	r3, [r3, #6]
 800ecac:	2b05      	cmp	r3, #5
 800ecae:	d80d      	bhi.n	800eccc <dhcp_select+0x1a8>
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	799b      	ldrb	r3, [r3, #6]
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	4093      	lsls	r3, r2
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	0152      	lsls	r2, r2, #5
 800ecc0:	1ad2      	subs	r2, r2, r3
 800ecc2:	0092      	lsls	r2, r2, #2
 800ecc4:	4413      	add	r3, r2
 800ecc6:	00db      	lsls	r3, r3, #3
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	e001      	b.n	800ecd0 <dhcp_select+0x1ac>
 800eccc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ecd0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ecd2:	89fb      	ldrh	r3, [r7, #14]
 800ecd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ecd8:	4a0f      	ldr	r2, [pc, #60]	; (800ed18 <dhcp_select+0x1f4>)
 800ecda:	fb82 1203 	smull	r1, r2, r2, r3
 800ecde:	1152      	asrs	r2, r2, #5
 800ece0:	17db      	asrs	r3, r3, #31
 800ece2:	1ad3      	subs	r3, r2, r3
 800ece4:	b29a      	uxth	r2, r3
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ecea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3720      	adds	r7, #32
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bdb0      	pop	{r4, r5, r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	0801633c 	.word	0x0801633c
 800ecfc:	080163e8 	.word	0x080163e8
 800ed00:	0801639c 	.word	0x0801639c
 800ed04:	08016404 	.word	0x08016404
 800ed08:	2000001c 	.word	0x2000001c
 800ed0c:	20010930 	.word	0x20010930
 800ed10:	08016ee4 	.word	0x08016ee4
 800ed14:	08016ee8 	.word	0x08016ee8
 800ed18:	10624dd3 	.word	0x10624dd3

0800ed1c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800ed22:	4b27      	ldr	r3, [pc, #156]	; (800edc0 <dhcp_coarse_tmr+0xa4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	607b      	str	r3, [r7, #4]
 800ed28:	e042      	b.n	800edb0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d039      	beq.n	800edaa <dhcp_coarse_tmr+0x8e>
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	795b      	ldrb	r3, [r3, #5]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d035      	beq.n	800edaa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	8a9b      	ldrh	r3, [r3, #20]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d012      	beq.n	800ed6c <dhcp_coarse_tmr+0x50>
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	8a5b      	ldrh	r3, [r3, #18]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	825a      	strh	r2, [r3, #18]
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	8a5a      	ldrh	r2, [r3, #18]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	8a9b      	ldrh	r3, [r3, #20]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d106      	bne.n	800ed6c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fdf6 	bl	800f950 <dhcp_release_and_stop>
        dhcp_start(netif);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 f969 	bl	800f03c <dhcp_start>
 800ed6a:	e01e      	b.n	800edaa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	8a1b      	ldrh	r3, [r3, #16]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00b      	beq.n	800ed8c <dhcp_coarse_tmr+0x70>
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	8a1b      	ldrh	r3, [r3, #16]
 800ed78:	1e5a      	subs	r2, r3, #1
 800ed7a:	b291      	uxth	r1, r2
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	8211      	strh	r1, [r2, #16]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d103      	bne.n	800ed8c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 f8c6 	bl	800ef16 <dhcp_t2_timeout>
 800ed8a:	e00e      	b.n	800edaa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	89db      	ldrh	r3, [r3, #14]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00a      	beq.n	800edaa <dhcp_coarse_tmr+0x8e>
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	89db      	ldrh	r3, [r3, #14]
 800ed98:	1e5a      	subs	r2, r3, #1
 800ed9a:	b291      	uxth	r1, r2
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	81d1      	strh	r1, [r2, #14]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d102      	bne.n	800edaa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f000 f888 	bl	800eeba <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	607b      	str	r3, [r7, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d1b9      	bne.n	800ed2a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800edb6:	bf00      	nop
 800edb8:	bf00      	nop
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	2001089c 	.word	0x2001089c

0800edc4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800edca:	4b16      	ldr	r3, [pc, #88]	; (800ee24 <dhcp_fine_tmr+0x60>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	607b      	str	r3, [r7, #4]
 800edd0:	e020      	b.n	800ee14 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d017      	beq.n	800ee0e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	891b      	ldrh	r3, [r3, #8]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d906      	bls.n	800edf4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	891b      	ldrh	r3, [r3, #8]
 800edea:	3b01      	subs	r3, #1
 800edec:	b29a      	uxth	r2, r3
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	811a      	strh	r2, [r3, #8]
 800edf2:	e00c      	b.n	800ee0e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	891b      	ldrh	r3, [r3, #8]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d108      	bne.n	800ee0e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	891b      	ldrh	r3, [r3, #8]
 800ee00:	3b01      	subs	r3, #1
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 f80d 	bl	800ee28 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	607b      	str	r3, [r7, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1db      	bne.n	800edd2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ee1a:	bf00      	nop
 800ee1c:	bf00      	nop
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	2001089c 	.word	0x2001089c

0800ee28 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	795b      	ldrb	r3, [r3, #5]
 800ee3a:	2b0c      	cmp	r3, #12
 800ee3c:	d003      	beq.n	800ee46 <dhcp_timeout+0x1e>
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	795b      	ldrb	r3, [r3, #5]
 800ee42:	2b06      	cmp	r3, #6
 800ee44:	d103      	bne.n	800ee4e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 fa18 	bl	800f27c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ee4c:	e031      	b.n	800eeb2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	795b      	ldrb	r3, [r3, #5]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d10e      	bne.n	800ee74 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	799b      	ldrb	r3, [r3, #6]
 800ee5a:	2b05      	cmp	r3, #5
 800ee5c:	d803      	bhi.n	800ee66 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff fe60 	bl	800eb24 <dhcp_select>
}
 800ee64:	e025      	b.n	800eeb2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 fd72 	bl	800f950 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f000 f8e5 	bl	800f03c <dhcp_start>
}
 800ee72:	e01e      	b.n	800eeb2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	795b      	ldrb	r3, [r3, #5]
 800ee78:	2b08      	cmp	r3, #8
 800ee7a:	d10b      	bne.n	800ee94 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	799b      	ldrb	r3, [r3, #6]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d803      	bhi.n	800ee8c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff fdf3 	bl	800ea70 <dhcp_check>
}
 800ee8a:	e012      	b.n	800eeb2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f000 fa97 	bl	800f3c0 <dhcp_bind>
}
 800ee92:	e00e      	b.n	800eeb2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	795b      	ldrb	r3, [r3, #5]
 800ee98:	2b03      	cmp	r3, #3
 800ee9a:	d10a      	bne.n	800eeb2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	799b      	ldrb	r3, [r3, #6]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d803      	bhi.n	800eeac <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 fc9d 	bl	800f7e4 <dhcp_reboot>
}
 800eeaa:	e002      	b.n	800eeb2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f9e5 	bl	800f27c <dhcp_discover>
}
 800eeb2:	bf00      	nop
 800eeb4:	3710      	adds	r7, #16
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b084      	sub	sp, #16
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	795b      	ldrb	r3, [r3, #5]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d007      	beq.n	800eee0 <dhcp_t1_timeout+0x26>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	795b      	ldrb	r3, [r3, #5]
 800eed4:	2b0a      	cmp	r3, #10
 800eed6:	d003      	beq.n	800eee0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800eedc:	2b05      	cmp	r3, #5
 800eede:	d116      	bne.n	800ef0e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fb47 	bl	800f574 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	899b      	ldrh	r3, [r3, #12]
 800eeea:	461a      	mov	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	8a5b      	ldrh	r3, [r3, #18]
 800eef0:	1ad3      	subs	r3, r2, r3
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	dd0b      	ble.n	800ef0e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	899b      	ldrh	r3, [r3, #12]
 800eefa:	461a      	mov	r2, r3
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	8a5b      	ldrh	r3, [r3, #18]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	0fda      	lsrs	r2, r3, #31
 800ef04:	4413      	add	r3, r2
 800ef06:	105b      	asrs	r3, r3, #1
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ef0e:	bf00      	nop
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef22:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	795b      	ldrb	r3, [r3, #5]
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d00b      	beq.n	800ef44 <dhcp_t2_timeout+0x2e>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	795b      	ldrb	r3, [r3, #5]
 800ef30:	2b0a      	cmp	r3, #10
 800ef32:	d007      	beq.n	800ef44 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ef38:	2b05      	cmp	r3, #5
 800ef3a:	d003      	beq.n	800ef44 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	795b      	ldrb	r3, [r3, #5]
 800ef40:	2b04      	cmp	r3, #4
 800ef42:	d116      	bne.n	800ef72 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 fbb1 	bl	800f6ac <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	8a9b      	ldrh	r3, [r3, #20]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	8a5b      	ldrh	r3, [r3, #18]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	dd0b      	ble.n	800ef72 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	8a9b      	ldrh	r3, [r3, #20]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	8a5b      	ldrh	r3, [r3, #18]
 800ef64:	1ad3      	subs	r3, r2, r3
 800ef66:	0fda      	lsrs	r2, r3, #31
 800ef68:	4413      	add	r3, r2
 800ef6a:	105b      	asrs	r3, r3, #1
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ef72:	bf00      	nop
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
	...

0800ef7c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ef98:	4b26      	ldr	r3, [pc, #152]	; (800f034 <dhcp_handle_ack+0xb8>)
 800ef9a:	78db      	ldrb	r3, [r3, #3]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d003      	beq.n	800efa8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800efa0:	4b25      	ldr	r3, [pc, #148]	; (800f038 <dhcp_handle_ack+0xbc>)
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800efa8:	4b22      	ldr	r3, [pc, #136]	; (800f034 <dhcp_handle_ack+0xb8>)
 800efaa:	791b      	ldrb	r3, [r3, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800efb0:	4b21      	ldr	r3, [pc, #132]	; (800f038 <dhcp_handle_ack+0xbc>)
 800efb2:	691a      	ldr	r2, [r3, #16]
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	62da      	str	r2, [r3, #44]	; 0x2c
 800efb8:	e004      	b.n	800efc4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efbe:	085a      	lsrs	r2, r3, #1
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800efc4:	4b1b      	ldr	r3, [pc, #108]	; (800f034 <dhcp_handle_ack+0xb8>)
 800efc6:	795b      	ldrb	r3, [r3, #5]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800efcc:	4b1a      	ldr	r3, [pc, #104]	; (800f038 <dhcp_handle_ack+0xbc>)
 800efce:	695a      	ldr	r2, [r3, #20]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	631a      	str	r2, [r3, #48]	; 0x30
 800efd4:	e007      	b.n	800efe6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800efda:	4613      	mov	r3, r2
 800efdc:	00db      	lsls	r3, r3, #3
 800efde:	1a9b      	subs	r3, r3, r2
 800efe0:	08da      	lsrs	r2, r3, #3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	691a      	ldr	r2, [r3, #16]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800efee:	4b11      	ldr	r3, [pc, #68]	; (800f034 <dhcp_handle_ack+0xb8>)
 800eff0:	799b      	ldrb	r3, [r3, #6]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00b      	beq.n	800f00e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800eff6:	4b10      	ldr	r3, [pc, #64]	; (800f038 <dhcp_handle_ack+0xbc>)
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	4618      	mov	r0, r3
 800effc:	f7f7 fee5 	bl	8006dca <lwip_htonl>
 800f000:	4602      	mov	r2, r0
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2201      	movs	r2, #1
 800f00a:	71da      	strb	r2, [r3, #7]
 800f00c:	e002      	b.n	800f014 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2200      	movs	r2, #0
 800f012:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f014:	4b07      	ldr	r3, [pc, #28]	; (800f034 <dhcp_handle_ack+0xb8>)
 800f016:	79db      	ldrb	r3, [r3, #7]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d007      	beq.n	800f02c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f01c:	4b06      	ldr	r3, [pc, #24]	; (800f038 <dhcp_handle_ack+0xbc>)
 800f01e:	69db      	ldr	r3, [r3, #28]
 800f020:	4618      	mov	r0, r3
 800f022:	f7f7 fed2 	bl	8006dca <lwip_htonl>
 800f026:	4602      	mov	r2, r0
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f02c:	bf00      	nop
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	20010928 	.word	0x20010928
 800f038:	20010908 	.word	0x20010908

0800f03c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d109      	bne.n	800f05e <dhcp_start+0x22>
 800f04a:	4b37      	ldr	r3, [pc, #220]	; (800f128 <dhcp_start+0xec>)
 800f04c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f050:	4936      	ldr	r1, [pc, #216]	; (800f12c <dhcp_start+0xf0>)
 800f052:	4837      	ldr	r0, [pc, #220]	; (800f130 <dhcp_start+0xf4>)
 800f054:	f003 ffb8 	bl	8012fc8 <iprintf>
 800f058:	f06f 030f 	mvn.w	r3, #15
 800f05c:	e060      	b.n	800f120 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d109      	bne.n	800f080 <dhcp_start+0x44>
 800f06c:	4b2e      	ldr	r3, [pc, #184]	; (800f128 <dhcp_start+0xec>)
 800f06e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f072:	4930      	ldr	r1, [pc, #192]	; (800f134 <dhcp_start+0xf8>)
 800f074:	482e      	ldr	r0, [pc, #184]	; (800f130 <dhcp_start+0xf4>)
 800f076:	f003 ffa7 	bl	8012fc8 <iprintf>
 800f07a:	f06f 030f 	mvn.w	r3, #15
 800f07e:	e04f      	b.n	800f120 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f084:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f08a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f08e:	d202      	bcs.n	800f096 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	e044      	b.n	800f120 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d10d      	bne.n	800f0b8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f09c:	2034      	movs	r0, #52	; 0x34
 800f09e:	f7f8 f9b3 	bl	8007408 <mem_malloc>
 800f0a2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d102      	bne.n	800f0b0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ae:	e037      	b.n	800f120 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	625a      	str	r2, [r3, #36]	; 0x24
 800f0b6:	e005      	b.n	800f0c4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	791b      	ldrb	r3, [r3, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d001      	beq.n	800f0c4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f0c0:	f7ff fc92 	bl	800e9e8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f0c4:	2234      	movs	r2, #52	; 0x34
 800f0c6:	2100      	movs	r1, #0
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f003 ffe2 	bl	8013092 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f0ce:	f7ff fc39 	bl	800e944 <dhcp_inc_pcb_refcount>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <dhcp_start+0xa2>
    return ERR_MEM;
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0dc:	e020      	b.n	800f120 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f0ea:	f003 0304 	and.w	r3, r3, #4
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d105      	bne.n	800f0fe <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f0f2:	2102      	movs	r1, #2
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f000 fcc5 	bl	800fa84 <dhcp_set_state>
    return ERR_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e010      	b.n	800f120 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f8bc 	bl	800f27c <dhcp_discover>
 800f104:	4603      	mov	r3, r0
 800f106:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f108:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d005      	beq.n	800f11c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fc1d 	bl	800f950 <dhcp_release_and_stop>
    return ERR_MEM;
 800f116:	f04f 33ff 	mov.w	r3, #4294967295
 800f11a:	e001      	b.n	800f120 <dhcp_start+0xe4>
  }
  return result;
 800f11c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	0801633c 	.word	0x0801633c
 800f12c:	08016420 	.word	0x08016420
 800f130:	0801639c 	.word	0x0801639c
 800f134:	08016464 	.word	0x08016464

0800f138 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d107      	bne.n	800f158 <dhcp_arp_reply+0x20>
 800f148:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <dhcp_arp_reply+0x4c>)
 800f14a:	f240 328b 	movw	r2, #907	; 0x38b
 800f14e:	490e      	ldr	r1, [pc, #56]	; (800f188 <dhcp_arp_reply+0x50>)
 800f150:	480e      	ldr	r0, [pc, #56]	; (800f18c <dhcp_arp_reply+0x54>)
 800f152:	f003 ff39 	bl	8012fc8 <iprintf>
 800f156:	e012      	b.n	800f17e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f15c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00c      	beq.n	800f17e <dhcp_arp_reply+0x46>
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	795b      	ldrb	r3, [r3, #5]
 800f168:	2b08      	cmp	r3, #8
 800f16a:	d108      	bne.n	800f17e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	429a      	cmp	r2, r3
 800f176:	d102      	bne.n	800f17e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f000 f809 	bl	800f190 <dhcp_decline>
    }
  }
}
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	0801633c 	.word	0x0801633c
 800f188:	08016420 	.word	0x08016420
 800f18c:	0801639c 	.word	0x0801639c

0800f190 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f190:	b5b0      	push	{r4, r5, r7, lr}
 800f192:	b08a      	sub	sp, #40	; 0x28
 800f194:	af02      	add	r7, sp, #8
 800f196:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f19c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f19e:	210c      	movs	r1, #12
 800f1a0:	69b8      	ldr	r0, [r7, #24]
 800f1a2:	f000 fc6f 	bl	800fa84 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f1a6:	f107 030c 	add.w	r3, r7, #12
 800f1aa:	2204      	movs	r2, #4
 800f1ac:	69b9      	ldr	r1, [r7, #24]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f001 f8f4 	bl	801039c <dhcp_create_msg>
 800f1b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d035      	beq.n	800f228 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f1c2:	89b8      	ldrh	r0, [r7, #12]
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1ca:	2304      	movs	r3, #4
 800f1cc:	2232      	movs	r2, #50	; 0x32
 800f1ce:	f000 fc73 	bl	800fab8 <dhcp_option>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f1d6:	89bc      	ldrh	r4, [r7, #12]
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	69db      	ldr	r3, [r3, #28]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7f7 fdf1 	bl	8006dca <lwip_htonl>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 fcee 	bl	800fbd0 <dhcp_option_long>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f1f8:	89b8      	ldrh	r0, [r7, #12]
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	33f0      	adds	r3, #240	; 0xf0
 800f1fe:	697a      	ldr	r2, [r7, #20]
 800f200:	4619      	mov	r1, r3
 800f202:	f001 f9a1 	bl	8010548 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f206:	4b19      	ldr	r3, [pc, #100]	; (800f26c <dhcp_decline+0xdc>)
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	4b19      	ldr	r3, [pc, #100]	; (800f270 <dhcp_decline+0xe0>)
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	9300      	str	r3, [sp, #0]
 800f212:	2343      	movs	r3, #67	; 0x43
 800f214:	4a17      	ldr	r2, [pc, #92]	; (800f274 <dhcp_decline+0xe4>)
 800f216:	6979      	ldr	r1, [r7, #20]
 800f218:	f7ff f90e 	bl	800e438 <udp_sendto_if_src>
 800f21c:	4603      	mov	r3, r0
 800f21e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f220:	6978      	ldr	r0, [r7, #20]
 800f222:	f7f9 f953 	bl	80084cc <pbuf_free>
 800f226:	e001      	b.n	800f22c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f228:	23ff      	movs	r3, #255	; 0xff
 800f22a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	799b      	ldrb	r3, [r3, #6]
 800f230:	2bff      	cmp	r3, #255	; 0xff
 800f232:	d005      	beq.n	800f240 <dhcp_decline+0xb0>
    dhcp->tries++;
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	799b      	ldrb	r3, [r3, #6]
 800f238:	3301      	adds	r3, #1
 800f23a:	b2da      	uxtb	r2, r3
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f240:	f242 7310 	movw	r3, #10000	; 0x2710
 800f244:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f246:	89fb      	ldrh	r3, [r7, #14]
 800f248:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f24c:	4a0a      	ldr	r2, [pc, #40]	; (800f278 <dhcp_decline+0xe8>)
 800f24e:	fb82 1203 	smull	r1, r2, r2, r3
 800f252:	1152      	asrs	r2, r2, #5
 800f254:	17db      	asrs	r3, r3, #31
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	b29a      	uxth	r2, r3
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f25e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3720      	adds	r7, #32
 800f266:	46bd      	mov	sp, r7
 800f268:	bdb0      	pop	{r4, r5, r7, pc}
 800f26a:	bf00      	nop
 800f26c:	20010930 	.word	0x20010930
 800f270:	08016ee4 	.word	0x08016ee4
 800f274:	08016ee8 	.word	0x08016ee8
 800f278:	10624dd3 	.word	0x10624dd3

0800f27c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08a      	sub	sp, #40	; 0x28
 800f280:	af02      	add	r7, sp, #8
 800f282:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f288:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	2200      	movs	r2, #0
 800f292:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f294:	2106      	movs	r1, #6
 800f296:	69b8      	ldr	r0, [r7, #24]
 800f298:	f000 fbf4 	bl	800fa84 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f29c:	f107 0308 	add.w	r3, r7, #8
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	69b9      	ldr	r1, [r7, #24]
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f001 f879 	bl	801039c <dhcp_create_msg>
 800f2aa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d04b      	beq.n	800f34a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f2b8:	8938      	ldrh	r0, [r7, #8]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	2239      	movs	r2, #57	; 0x39
 800f2c4:	f000 fbf8 	bl	800fab8 <dhcp_option>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f2cc:	8938      	ldrh	r0, [r7, #8]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2d8:	461a      	mov	r2, r3
 800f2da:	f000 fc47 	bl	800fb6c <dhcp_option_short>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f2e2:	8938      	ldrh	r0, [r7, #8]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f2ea:	2303      	movs	r3, #3
 800f2ec:	2237      	movs	r2, #55	; 0x37
 800f2ee:	f000 fbe3 	bl	800fab8 <dhcp_option>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	77fb      	strb	r3, [r7, #31]
 800f2fa:	e00e      	b.n	800f31a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f2fc:	8938      	ldrh	r0, [r7, #8]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f304:	7ffb      	ldrb	r3, [r7, #31]
 800f306:	4a29      	ldr	r2, [pc, #164]	; (800f3ac <dhcp_discover+0x130>)
 800f308:	5cd3      	ldrb	r3, [r2, r3]
 800f30a:	461a      	mov	r2, r3
 800f30c:	f000 fc08 	bl	800fb20 <dhcp_option_byte>
 800f310:	4603      	mov	r3, r0
 800f312:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f314:	7ffb      	ldrb	r3, [r7, #31]
 800f316:	3301      	adds	r3, #1
 800f318:	77fb      	strb	r3, [r7, #31]
 800f31a:	7ffb      	ldrb	r3, [r7, #31]
 800f31c:	2b02      	cmp	r3, #2
 800f31e:	d9ed      	bls.n	800f2fc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f320:	8938      	ldrh	r0, [r7, #8]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	33f0      	adds	r3, #240	; 0xf0
 800f326:	693a      	ldr	r2, [r7, #16]
 800f328:	4619      	mov	r1, r3
 800f32a:	f001 f90d 	bl	8010548 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f32e:	4b20      	ldr	r3, [pc, #128]	; (800f3b0 <dhcp_discover+0x134>)
 800f330:	6818      	ldr	r0, [r3, #0]
 800f332:	4b20      	ldr	r3, [pc, #128]	; (800f3b4 <dhcp_discover+0x138>)
 800f334:	9301      	str	r3, [sp, #4]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	9300      	str	r3, [sp, #0]
 800f33a:	2343      	movs	r3, #67	; 0x43
 800f33c:	4a1e      	ldr	r2, [pc, #120]	; (800f3b8 <dhcp_discover+0x13c>)
 800f33e:	6939      	ldr	r1, [r7, #16]
 800f340:	f7ff f87a 	bl	800e438 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f344:	6938      	ldr	r0, [r7, #16]
 800f346:	f7f9 f8c1 	bl	80084cc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	799b      	ldrb	r3, [r3, #6]
 800f34e:	2bff      	cmp	r3, #255	; 0xff
 800f350:	d005      	beq.n	800f35e <dhcp_discover+0xe2>
    dhcp->tries++;
 800f352:	69bb      	ldr	r3, [r7, #24]
 800f354:	799b      	ldrb	r3, [r3, #6]
 800f356:	3301      	adds	r3, #1
 800f358:	b2da      	uxtb	r2, r3
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	799b      	ldrb	r3, [r3, #6]
 800f362:	2b05      	cmp	r3, #5
 800f364:	d80d      	bhi.n	800f382 <dhcp_discover+0x106>
 800f366:	69bb      	ldr	r3, [r7, #24]
 800f368:	799b      	ldrb	r3, [r3, #6]
 800f36a:	461a      	mov	r2, r3
 800f36c:	2301      	movs	r3, #1
 800f36e:	4093      	lsls	r3, r2
 800f370:	b29b      	uxth	r3, r3
 800f372:	461a      	mov	r2, r3
 800f374:	0152      	lsls	r2, r2, #5
 800f376:	1ad2      	subs	r2, r2, r3
 800f378:	0092      	lsls	r2, r2, #2
 800f37a:	4413      	add	r3, r2
 800f37c:	00db      	lsls	r3, r3, #3
 800f37e:	b29b      	uxth	r3, r3
 800f380:	e001      	b.n	800f386 <dhcp_discover+0x10a>
 800f382:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f386:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f388:	897b      	ldrh	r3, [r7, #10]
 800f38a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f38e:	4a0b      	ldr	r2, [pc, #44]	; (800f3bc <dhcp_discover+0x140>)
 800f390:	fb82 1203 	smull	r1, r2, r2, r3
 800f394:	1152      	asrs	r2, r2, #5
 800f396:	17db      	asrs	r3, r3, #31
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f3a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3720      	adds	r7, #32
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	2000001c 	.word	0x2000001c
 800f3b0:	20010930 	.word	0x20010930
 800f3b4:	08016ee4 	.word	0x08016ee4
 800f3b8:	08016ee8 	.word	0x08016ee8
 800f3bc:	10624dd3 	.word	0x10624dd3

0800f3c0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b088      	sub	sp, #32
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d107      	bne.n	800f3de <dhcp_bind+0x1e>
 800f3ce:	4b64      	ldr	r3, [pc, #400]	; (800f560 <dhcp_bind+0x1a0>)
 800f3d0:	f240 4215 	movw	r2, #1045	; 0x415
 800f3d4:	4963      	ldr	r1, [pc, #396]	; (800f564 <dhcp_bind+0x1a4>)
 800f3d6:	4864      	ldr	r0, [pc, #400]	; (800f568 <dhcp_bind+0x1a8>)
 800f3d8:	f003 fdf6 	bl	8012fc8 <iprintf>
 800f3dc:	e0bc      	b.n	800f558 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d107      	bne.n	800f3fa <dhcp_bind+0x3a>
 800f3ea:	4b5d      	ldr	r3, [pc, #372]	; (800f560 <dhcp_bind+0x1a0>)
 800f3ec:	f240 4217 	movw	r2, #1047	; 0x417
 800f3f0:	495e      	ldr	r1, [pc, #376]	; (800f56c <dhcp_bind+0x1ac>)
 800f3f2:	485d      	ldr	r0, [pc, #372]	; (800f568 <dhcp_bind+0x1a8>)
 800f3f4:	f003 fde8 	bl	8012fc8 <iprintf>
 800f3f8:	e0ae      	b.n	800f558 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f408:	d019      	beq.n	800f43e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f40a:	69bb      	ldr	r3, [r7, #24]
 800f40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f40e:	331e      	adds	r3, #30
 800f410:	4a57      	ldr	r2, [pc, #348]	; (800f570 <dhcp_bind+0x1b0>)
 800f412:	fba2 2303 	umull	r2, r3, r2, r3
 800f416:	095b      	lsrs	r3, r3, #5
 800f418:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f420:	d302      	bcc.n	800f428 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f426:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	8a9b      	ldrh	r3, [r3, #20]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d102      	bne.n	800f43e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	2201      	movs	r2, #1
 800f43c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f446:	d01d      	beq.n	800f484 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44c:	331e      	adds	r3, #30
 800f44e:	4a48      	ldr	r2, [pc, #288]	; (800f570 <dhcp_bind+0x1b0>)
 800f450:	fba2 2303 	umull	r2, r3, r2, r3
 800f454:	095b      	lsrs	r3, r3, #5
 800f456:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f45e:	d302      	bcc.n	800f466 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f464:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	b29a      	uxth	r2, r3
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	895b      	ldrh	r3, [r3, #10]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d102      	bne.n	800f47c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	2201      	movs	r2, #1
 800f47a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	895a      	ldrh	r2, [r3, #10]
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f484:	69bb      	ldr	r3, [r7, #24]
 800f486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f48c:	d01d      	beq.n	800f4ca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f492:	331e      	adds	r3, #30
 800f494:	4a36      	ldr	r2, [pc, #216]	; (800f570 <dhcp_bind+0x1b0>)
 800f496:	fba2 2303 	umull	r2, r3, r2, r3
 800f49a:	095b      	lsrs	r3, r3, #5
 800f49c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4a4:	d302      	bcc.n	800f4ac <dhcp_bind+0xec>
      timeout = 0xffff;
 800f4a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	899b      	ldrh	r3, [r3, #12]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d102      	bne.n	800f4c2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	899a      	ldrh	r2, [r3, #12]
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	895a      	ldrh	r2, [r3, #10]
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	899b      	ldrh	r3, [r3, #12]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d306      	bcc.n	800f4e4 <dhcp_bind+0x124>
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	899b      	ldrh	r3, [r3, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	79db      	ldrb	r3, [r3, #7]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d003      	beq.n	800f4f4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	6a1b      	ldr	r3, [r3, #32]
 800f4f0:	613b      	str	r3, [r7, #16]
 800f4f2:	e014      	b.n	800f51e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	331c      	adds	r3, #28
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f500:	2b00      	cmp	r3, #0
 800f502:	db02      	blt.n	800f50a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f504:	23ff      	movs	r3, #255	; 0xff
 800f506:	613b      	str	r3, [r7, #16]
 800f508:	e009      	b.n	800f51e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	2bbf      	cmp	r3, #191	; 0xbf
 800f50e:	d903      	bls.n	800f518 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f510:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f514:	613b      	str	r3, [r7, #16]
 800f516:	e002      	b.n	800f51e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f51c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f522:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d108      	bne.n	800f53c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	69da      	ldr	r2, [r3, #28]
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	4013      	ands	r3, r2
 800f532:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f53a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f53c:	210a      	movs	r1, #10
 800f53e:	69b8      	ldr	r0, [r7, #24]
 800f540:	f000 faa0 	bl	800fa84 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	f103 011c 	add.w	r1, r3, #28
 800f54a:	f107 030c 	add.w	r3, r7, #12
 800f54e:	f107 0210 	add.w	r2, r7, #16
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7f8 fb14 	bl	8007b80 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f558:	3720      	adds	r7, #32
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	0801633c 	.word	0x0801633c
 800f564:	0801649c 	.word	0x0801649c
 800f568:	0801639c 	.word	0x0801639c
 800f56c:	080164b8 	.word	0x080164b8
 800f570:	88888889 	.word	0x88888889

0800f574 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	; 0x28
 800f578:	af02      	add	r7, sp, #8
 800f57a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f580:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f582:	2105      	movs	r1, #5
 800f584:	69b8      	ldr	r0, [r7, #24]
 800f586:	f000 fa7d 	bl	800fa84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f58a:	f107 030c 	add.w	r3, r7, #12
 800f58e:	2203      	movs	r2, #3
 800f590:	69b9      	ldr	r1, [r7, #24]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 ff02 	bl	801039c <dhcp_create_msg>
 800f598:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d04e      	beq.n	800f63e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f5a6:	89b8      	ldrh	r0, [r7, #12]
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5ae:	2302      	movs	r3, #2
 800f5b0:	2239      	movs	r2, #57	; 0x39
 800f5b2:	f000 fa81 	bl	800fab8 <dhcp_option>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f5ba:	89b8      	ldrh	r0, [r7, #12]
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	f000 fad0 	bl	800fb6c <dhcp_option_short>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f5d0:	89b8      	ldrh	r0, [r7, #12]
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5d8:	2303      	movs	r3, #3
 800f5da:	2237      	movs	r2, #55	; 0x37
 800f5dc:	f000 fa6c 	bl	800fab8 <dhcp_option>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	77bb      	strb	r3, [r7, #30]
 800f5e8:	e00e      	b.n	800f608 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f5ea:	89b8      	ldrh	r0, [r7, #12]
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f5f2:	7fbb      	ldrb	r3, [r7, #30]
 800f5f4:	4a2a      	ldr	r2, [pc, #168]	; (800f6a0 <dhcp_renew+0x12c>)
 800f5f6:	5cd3      	ldrb	r3, [r2, r3]
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	f000 fa91 	bl	800fb20 <dhcp_option_byte>
 800f5fe:	4603      	mov	r3, r0
 800f600:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f602:	7fbb      	ldrb	r3, [r7, #30]
 800f604:	3301      	adds	r3, #1
 800f606:	77bb      	strb	r3, [r7, #30]
 800f608:	7fbb      	ldrb	r3, [r7, #30]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d9ed      	bls.n	800f5ea <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f60e:	89b8      	ldrh	r0, [r7, #12]
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	33f0      	adds	r3, #240	; 0xf0
 800f614:	697a      	ldr	r2, [r7, #20]
 800f616:	4619      	mov	r1, r3
 800f618:	f000 ff96 	bl	8010548 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f61c:	4b21      	ldr	r3, [pc, #132]	; (800f6a4 <dhcp_renew+0x130>)
 800f61e:	6818      	ldr	r0, [r3, #0]
 800f620:	69bb      	ldr	r3, [r7, #24]
 800f622:	f103 0218 	add.w	r2, r3, #24
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	2343      	movs	r3, #67	; 0x43
 800f62c:	6979      	ldr	r1, [r7, #20]
 800f62e:	f7fe fe8f 	bl	800e350 <udp_sendto_if>
 800f632:	4603      	mov	r3, r0
 800f634:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f636:	6978      	ldr	r0, [r7, #20]
 800f638:	f7f8 ff48 	bl	80084cc <pbuf_free>
 800f63c:	e001      	b.n	800f642 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f63e:	23ff      	movs	r3, #255	; 0xff
 800f640:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	799b      	ldrb	r3, [r3, #6]
 800f646:	2bff      	cmp	r3, #255	; 0xff
 800f648:	d005      	beq.n	800f656 <dhcp_renew+0xe2>
    dhcp->tries++;
 800f64a:	69bb      	ldr	r3, [r7, #24]
 800f64c:	799b      	ldrb	r3, [r3, #6]
 800f64e:	3301      	adds	r3, #1
 800f650:	b2da      	uxtb	r2, r3
 800f652:	69bb      	ldr	r3, [r7, #24]
 800f654:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	799b      	ldrb	r3, [r3, #6]
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	d80a      	bhi.n	800f674 <dhcp_renew+0x100>
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	799b      	ldrb	r3, [r3, #6]
 800f662:	b29b      	uxth	r3, r3
 800f664:	461a      	mov	r2, r3
 800f666:	0152      	lsls	r2, r2, #5
 800f668:	1ad2      	subs	r2, r2, r3
 800f66a:	0092      	lsls	r2, r2, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	011b      	lsls	r3, r3, #4
 800f670:	b29b      	uxth	r3, r3
 800f672:	e001      	b.n	800f678 <dhcp_renew+0x104>
 800f674:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f678:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f67a:	89fb      	ldrh	r3, [r7, #14]
 800f67c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f680:	4a09      	ldr	r2, [pc, #36]	; (800f6a8 <dhcp_renew+0x134>)
 800f682:	fb82 1203 	smull	r1, r2, r2, r3
 800f686:	1152      	asrs	r2, r2, #5
 800f688:	17db      	asrs	r3, r3, #31
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f692:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f696:	4618      	mov	r0, r3
 800f698:	3720      	adds	r7, #32
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	2000001c 	.word	0x2000001c
 800f6a4:	20010930 	.word	0x20010930
 800f6a8:	10624dd3 	.word	0x10624dd3

0800f6ac <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08a      	sub	sp, #40	; 0x28
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800f6ba:	2104      	movs	r1, #4
 800f6bc:	69b8      	ldr	r0, [r7, #24]
 800f6be:	f000 f9e1 	bl	800fa84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f6c2:	f107 030c 	add.w	r3, r7, #12
 800f6c6:	2203      	movs	r2, #3
 800f6c8:	69b9      	ldr	r1, [r7, #24]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f000 fe66 	bl	801039c <dhcp_create_msg>
 800f6d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d04c      	beq.n	800f772 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f6de:	89b8      	ldrh	r0, [r7, #12]
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f6e6:	2302      	movs	r3, #2
 800f6e8:	2239      	movs	r2, #57	; 0x39
 800f6ea:	f000 f9e5 	bl	800fab8 <dhcp_option>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f6f2:	89b8      	ldrh	r0, [r7, #12]
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6fe:	461a      	mov	r2, r3
 800f700:	f000 fa34 	bl	800fb6c <dhcp_option_short>
 800f704:	4603      	mov	r3, r0
 800f706:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f708:	89b8      	ldrh	r0, [r7, #12]
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f710:	2303      	movs	r3, #3
 800f712:	2237      	movs	r2, #55	; 0x37
 800f714:	f000 f9d0 	bl	800fab8 <dhcp_option>
 800f718:	4603      	mov	r3, r0
 800f71a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f71c:	2300      	movs	r3, #0
 800f71e:	77bb      	strb	r3, [r7, #30]
 800f720:	e00e      	b.n	800f740 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f722:	89b8      	ldrh	r0, [r7, #12]
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f72a:	7fbb      	ldrb	r3, [r7, #30]
 800f72c:	4a29      	ldr	r2, [pc, #164]	; (800f7d4 <dhcp_rebind+0x128>)
 800f72e:	5cd3      	ldrb	r3, [r2, r3]
 800f730:	461a      	mov	r2, r3
 800f732:	f000 f9f5 	bl	800fb20 <dhcp_option_byte>
 800f736:	4603      	mov	r3, r0
 800f738:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f73a:	7fbb      	ldrb	r3, [r7, #30]
 800f73c:	3301      	adds	r3, #1
 800f73e:	77bb      	strb	r3, [r7, #30]
 800f740:	7fbb      	ldrb	r3, [r7, #30]
 800f742:	2b02      	cmp	r3, #2
 800f744:	d9ed      	bls.n	800f722 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f746:	89b8      	ldrh	r0, [r7, #12]
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	33f0      	adds	r3, #240	; 0xf0
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	4619      	mov	r1, r3
 800f750:	f000 fefa 	bl	8010548 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f754:	4b20      	ldr	r3, [pc, #128]	; (800f7d8 <dhcp_rebind+0x12c>)
 800f756:	6818      	ldr	r0, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	2343      	movs	r3, #67	; 0x43
 800f75e:	4a1f      	ldr	r2, [pc, #124]	; (800f7dc <dhcp_rebind+0x130>)
 800f760:	6979      	ldr	r1, [r7, #20]
 800f762:	f7fe fdf5 	bl	800e350 <udp_sendto_if>
 800f766:	4603      	mov	r3, r0
 800f768:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f76a:	6978      	ldr	r0, [r7, #20]
 800f76c:	f7f8 feae 	bl	80084cc <pbuf_free>
 800f770:	e001      	b.n	800f776 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f772:	23ff      	movs	r3, #255	; 0xff
 800f774:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	799b      	ldrb	r3, [r3, #6]
 800f77a:	2bff      	cmp	r3, #255	; 0xff
 800f77c:	d005      	beq.n	800f78a <dhcp_rebind+0xde>
    dhcp->tries++;
 800f77e:	69bb      	ldr	r3, [r7, #24]
 800f780:	799b      	ldrb	r3, [r3, #6]
 800f782:	3301      	adds	r3, #1
 800f784:	b2da      	uxtb	r2, r3
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	799b      	ldrb	r3, [r3, #6]
 800f78e:	2b09      	cmp	r3, #9
 800f790:	d80a      	bhi.n	800f7a8 <dhcp_rebind+0xfc>
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	799b      	ldrb	r3, [r3, #6]
 800f796:	b29b      	uxth	r3, r3
 800f798:	461a      	mov	r2, r3
 800f79a:	0152      	lsls	r2, r2, #5
 800f79c:	1ad2      	subs	r2, r2, r3
 800f79e:	0092      	lsls	r2, r2, #2
 800f7a0:	4413      	add	r3, r2
 800f7a2:	00db      	lsls	r3, r3, #3
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	e001      	b.n	800f7ac <dhcp_rebind+0x100>
 800f7a8:	f242 7310 	movw	r3, #10000	; 0x2710
 800f7ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f7ae:	89fb      	ldrh	r3, [r7, #14]
 800f7b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f7b4:	4a0a      	ldr	r2, [pc, #40]	; (800f7e0 <dhcp_rebind+0x134>)
 800f7b6:	fb82 1203 	smull	r1, r2, r2, r3
 800f7ba:	1152      	asrs	r2, r2, #5
 800f7bc:	17db      	asrs	r3, r3, #31
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f7c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	2000001c 	.word	0x2000001c
 800f7d8:	20010930 	.word	0x20010930
 800f7dc:	08016ee8 	.word	0x08016ee8
 800f7e0:	10624dd3 	.word	0x10624dd3

0800f7e4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f7e4:	b5b0      	push	{r4, r5, r7, lr}
 800f7e6:	b08a      	sub	sp, #40	; 0x28
 800f7e8:	af02      	add	r7, sp, #8
 800f7ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f7f2:	2103      	movs	r1, #3
 800f7f4:	69b8      	ldr	r0, [r7, #24]
 800f7f6:	f000 f945 	bl	800fa84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f7fa:	f107 030c 	add.w	r3, r7, #12
 800f7fe:	2203      	movs	r2, #3
 800f800:	69b9      	ldr	r1, [r7, #24]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fdca 	bl	801039c <dhcp_create_msg>
 800f808:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d066      	beq.n	800f8de <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f816:	89b8      	ldrh	r0, [r7, #12]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f81e:	2302      	movs	r3, #2
 800f820:	2239      	movs	r2, #57	; 0x39
 800f822:	f000 f949 	bl	800fab8 <dhcp_option>
 800f826:	4603      	mov	r3, r0
 800f828:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f82a:	89b8      	ldrh	r0, [r7, #12]
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	33f0      	adds	r3, #240	; 0xf0
 800f830:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f834:	4619      	mov	r1, r3
 800f836:	f000 f999 	bl	800fb6c <dhcp_option_short>
 800f83a:	4603      	mov	r3, r0
 800f83c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f83e:	89b8      	ldrh	r0, [r7, #12]
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f846:	2304      	movs	r3, #4
 800f848:	2232      	movs	r2, #50	; 0x32
 800f84a:	f000 f935 	bl	800fab8 <dhcp_option>
 800f84e:	4603      	mov	r3, r0
 800f850:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f852:	89bc      	ldrh	r4, [r7, #12]
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	69db      	ldr	r3, [r3, #28]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7f7 fab3 	bl	8006dca <lwip_htonl>
 800f864:	4603      	mov	r3, r0
 800f866:	461a      	mov	r2, r3
 800f868:	4629      	mov	r1, r5
 800f86a:	4620      	mov	r0, r4
 800f86c:	f000 f9b0 	bl	800fbd0 <dhcp_option_long>
 800f870:	4603      	mov	r3, r0
 800f872:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f874:	89b8      	ldrh	r0, [r7, #12]
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f87c:	2303      	movs	r3, #3
 800f87e:	2237      	movs	r2, #55	; 0x37
 800f880:	f000 f91a 	bl	800fab8 <dhcp_option>
 800f884:	4603      	mov	r3, r0
 800f886:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f888:	2300      	movs	r3, #0
 800f88a:	77bb      	strb	r3, [r7, #30]
 800f88c:	e00e      	b.n	800f8ac <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f88e:	89b8      	ldrh	r0, [r7, #12]
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f896:	7fbb      	ldrb	r3, [r7, #30]
 800f898:	4a29      	ldr	r2, [pc, #164]	; (800f940 <dhcp_reboot+0x15c>)
 800f89a:	5cd3      	ldrb	r3, [r2, r3]
 800f89c:	461a      	mov	r2, r3
 800f89e:	f000 f93f 	bl	800fb20 <dhcp_option_byte>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f8a6:	7fbb      	ldrb	r3, [r7, #30]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	77bb      	strb	r3, [r7, #30]
 800f8ac:	7fbb      	ldrb	r3, [r7, #30]
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d9ed      	bls.n	800f88e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f8b2:	89b8      	ldrh	r0, [r7, #12]
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	33f0      	adds	r3, #240	; 0xf0
 800f8b8:	697a      	ldr	r2, [r7, #20]
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	f000 fe44 	bl	8010548 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f8c0:	4b20      	ldr	r3, [pc, #128]	; (800f944 <dhcp_reboot+0x160>)
 800f8c2:	6818      	ldr	r0, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	2343      	movs	r3, #67	; 0x43
 800f8ca:	4a1f      	ldr	r2, [pc, #124]	; (800f948 <dhcp_reboot+0x164>)
 800f8cc:	6979      	ldr	r1, [r7, #20]
 800f8ce:	f7fe fd3f 	bl	800e350 <udp_sendto_if>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f8d6:	6978      	ldr	r0, [r7, #20]
 800f8d8:	f7f8 fdf8 	bl	80084cc <pbuf_free>
 800f8dc:	e001      	b.n	800f8e2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f8de:	23ff      	movs	r3, #255	; 0xff
 800f8e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	799b      	ldrb	r3, [r3, #6]
 800f8e6:	2bff      	cmp	r3, #255	; 0xff
 800f8e8:	d005      	beq.n	800f8f6 <dhcp_reboot+0x112>
    dhcp->tries++;
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	799b      	ldrb	r3, [r3, #6]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	799b      	ldrb	r3, [r3, #6]
 800f8fa:	2b09      	cmp	r3, #9
 800f8fc:	d80a      	bhi.n	800f914 <dhcp_reboot+0x130>
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	799b      	ldrb	r3, [r3, #6]
 800f902:	b29b      	uxth	r3, r3
 800f904:	461a      	mov	r2, r3
 800f906:	0152      	lsls	r2, r2, #5
 800f908:	1ad2      	subs	r2, r2, r3
 800f90a:	0092      	lsls	r2, r2, #2
 800f90c:	4413      	add	r3, r2
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	b29b      	uxth	r3, r3
 800f912:	e001      	b.n	800f918 <dhcp_reboot+0x134>
 800f914:	f242 7310 	movw	r3, #10000	; 0x2710
 800f918:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f91a:	89fb      	ldrh	r3, [r7, #14]
 800f91c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f920:	4a0a      	ldr	r2, [pc, #40]	; (800f94c <dhcp_reboot+0x168>)
 800f922:	fb82 1203 	smull	r1, r2, r2, r3
 800f926:	1152      	asrs	r2, r2, #5
 800f928:	17db      	asrs	r3, r3, #31
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f932:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3720      	adds	r7, #32
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bdb0      	pop	{r4, r5, r7, pc}
 800f93e:	bf00      	nop
 800f940:	2000001c 	.word	0x2000001c
 800f944:	20010930 	.word	0x20010930
 800f948:	08016ee8 	.word	0x08016ee8
 800f94c:	10624dd3 	.word	0x10624dd3

0800f950 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f950:	b5b0      	push	{r4, r5, r7, lr}
 800f952:	b08a      	sub	sp, #40	; 0x28
 800f954:	af02      	add	r7, sp, #8
 800f956:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 8084 	beq.w	800fa6e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	795b      	ldrb	r3, [r3, #5]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 8081 	beq.w	800fa72 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	699b      	ldr	r3, [r3, #24]
 800f974:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	2200      	movs	r2, #0
 800f97a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	2200      	movs	r2, #0
 800f980:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	2200      	movs	r2, #0
 800f986:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	2200      	movs	r2, #0
 800f98c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	2200      	movs	r2, #0
 800f992:	631a      	str	r2, [r3, #48]	; 0x30
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	62da      	str	r2, [r3, #44]	; 0x2c
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	829a      	strh	r2, [r3, #20]
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	8a9a      	ldrh	r2, [r3, #20]
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	825a      	strh	r2, [r3, #18]
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	8a5a      	ldrh	r2, [r3, #18]
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	821a      	strh	r2, [r3, #16]
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	8a1a      	ldrh	r2, [r3, #16]
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fdee 	bl	80105a4 <dhcp_supplied_address>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d03b      	beq.n	800fa46 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f9ce:	f107 030e 	add.w	r3, r7, #14
 800f9d2:	2207      	movs	r2, #7
 800f9d4:	69f9      	ldr	r1, [r7, #28]
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fce0 	bl	801039c <dhcp_create_msg>
 800f9dc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d030      	beq.n	800fa46 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f9ea:	89f8      	ldrh	r0, [r7, #14]
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9f2:	2304      	movs	r3, #4
 800f9f4:	2236      	movs	r2, #54	; 0x36
 800f9f6:	f000 f85f 	bl	800fab8 <dhcp_option>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f9fe:	89fc      	ldrh	r4, [r7, #14]
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f7 f9de 	bl	8006dca <lwip_htonl>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	461a      	mov	r2, r3
 800fa12:	4629      	mov	r1, r5
 800fa14:	4620      	mov	r0, r4
 800fa16:	f000 f8db 	bl	800fbd0 <dhcp_option_long>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fa1e:	89f8      	ldrh	r0, [r7, #14]
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	33f0      	adds	r3, #240	; 0xf0
 800fa24:	69ba      	ldr	r2, [r7, #24]
 800fa26:	4619      	mov	r1, r3
 800fa28:	f000 fd8e 	bl	8010548 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fa2c:	4b13      	ldr	r3, [pc, #76]	; (800fa7c <dhcp_release_and_stop+0x12c>)
 800fa2e:	6818      	ldr	r0, [r3, #0]
 800fa30:	f107 0210 	add.w	r2, r7, #16
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	2343      	movs	r3, #67	; 0x43
 800fa3a:	69b9      	ldr	r1, [r7, #24]
 800fa3c:	f7fe fc88 	bl	800e350 <udp_sendto_if>
      pbuf_free(p_out);
 800fa40:	69b8      	ldr	r0, [r7, #24]
 800fa42:	f7f8 fd43 	bl	80084cc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fa46:	4b0e      	ldr	r3, [pc, #56]	; (800fa80 <dhcp_release_and_stop+0x130>)
 800fa48:	4a0d      	ldr	r2, [pc, #52]	; (800fa80 <dhcp_release_and_stop+0x130>)
 800fa4a:	490d      	ldr	r1, [pc, #52]	; (800fa80 <dhcp_release_and_stop+0x130>)
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f7f8 f897 	bl	8007b80 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fa52:	2100      	movs	r1, #0
 800fa54:	69f8      	ldr	r0, [r7, #28]
 800fa56:	f000 f815 	bl	800fa84 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	791b      	ldrb	r3, [r3, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d008      	beq.n	800fa74 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fa62:	f7fe ffc1 	bl	800e9e8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	711a      	strb	r2, [r3, #4]
 800fa6c:	e002      	b.n	800fa74 <dhcp_release_and_stop+0x124>
    return;
 800fa6e:	bf00      	nop
 800fa70:	e000      	b.n	800fa74 <dhcp_release_and_stop+0x124>
    return;
 800fa72:	bf00      	nop
  }
}
 800fa74:	3720      	adds	r7, #32
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bdb0      	pop	{r4, r5, r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	20010930 	.word	0x20010930
 800fa80:	08016ee4 	.word	0x08016ee4

0800fa84 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	795b      	ldrb	r3, [r3, #5]
 800fa94:	78fa      	ldrb	r2, [r7, #3]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d008      	beq.n	800faac <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	78fa      	ldrb	r2, [r7, #3]
 800fa9e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2200      	movs	r2, #0
 800faa4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	811a      	strh	r2, [r3, #8]
  }
}
 800faac:	bf00      	nop
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6039      	str	r1, [r7, #0]
 800fac0:	4611      	mov	r1, r2
 800fac2:	461a      	mov	r2, r3
 800fac4:	4603      	mov	r3, r0
 800fac6:	80fb      	strh	r3, [r7, #6]
 800fac8:	460b      	mov	r3, r1
 800faca:	717b      	strb	r3, [r7, #5]
 800facc:	4613      	mov	r3, r2
 800face:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fad0:	88fa      	ldrh	r2, [r7, #6]
 800fad2:	793b      	ldrb	r3, [r7, #4]
 800fad4:	4413      	add	r3, r2
 800fad6:	3302      	adds	r3, #2
 800fad8:	2b44      	cmp	r3, #68	; 0x44
 800fada:	d906      	bls.n	800faea <dhcp_option+0x32>
 800fadc:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <dhcp_option+0x5c>)
 800fade:	f240 529a 	movw	r2, #1434	; 0x59a
 800fae2:	490d      	ldr	r1, [pc, #52]	; (800fb18 <dhcp_option+0x60>)
 800fae4:	480d      	ldr	r0, [pc, #52]	; (800fb1c <dhcp_option+0x64>)
 800fae6:	f003 fa6f 	bl	8012fc8 <iprintf>
  options[options_out_len++] = option_type;
 800faea:	88fb      	ldrh	r3, [r7, #6]
 800faec:	1c5a      	adds	r2, r3, #1
 800faee:	80fa      	strh	r2, [r7, #6]
 800faf0:	461a      	mov	r2, r3
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	4413      	add	r3, r2
 800faf6:	797a      	ldrb	r2, [r7, #5]
 800faf8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800fafa:	88fb      	ldrh	r3, [r7, #6]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	80fa      	strh	r2, [r7, #6]
 800fb00:	461a      	mov	r2, r3
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	4413      	add	r3, r2
 800fb06:	793a      	ldrb	r2, [r7, #4]
 800fb08:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fb0a:	88fb      	ldrh	r3, [r7, #6]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	0801633c 	.word	0x0801633c
 800fb18:	080164d0 	.word	0x080164d0
 800fb1c:	0801639c 	.word	0x0801639c

0800fb20 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	4603      	mov	r3, r0
 800fb28:	6039      	str	r1, [r7, #0]
 800fb2a:	80fb      	strh	r3, [r7, #6]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800fb30:	88fb      	ldrh	r3, [r7, #6]
 800fb32:	2b43      	cmp	r3, #67	; 0x43
 800fb34:	d906      	bls.n	800fb44 <dhcp_option_byte+0x24>
 800fb36:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <dhcp_option_byte+0x40>)
 800fb38:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800fb3c:	4909      	ldr	r1, [pc, #36]	; (800fb64 <dhcp_option_byte+0x44>)
 800fb3e:	480a      	ldr	r0, [pc, #40]	; (800fb68 <dhcp_option_byte+0x48>)
 800fb40:	f003 fa42 	bl	8012fc8 <iprintf>
  options[options_out_len++] = value;
 800fb44:	88fb      	ldrh	r3, [r7, #6]
 800fb46:	1c5a      	adds	r2, r3, #1
 800fb48:	80fa      	strh	r2, [r7, #6]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	4413      	add	r3, r2
 800fb50:	797a      	ldrb	r2, [r7, #5]
 800fb52:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fb54:	88fb      	ldrh	r3, [r7, #6]
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	0801633c 	.word	0x0801633c
 800fb64:	08016514 	.word	0x08016514
 800fb68:	0801639c 	.word	0x0801639c

0800fb6c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	6039      	str	r1, [r7, #0]
 800fb76:	80fb      	strh	r3, [r7, #6]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fb7c:	88fb      	ldrh	r3, [r7, #6]
 800fb7e:	3302      	adds	r3, #2
 800fb80:	2b44      	cmp	r3, #68	; 0x44
 800fb82:	d906      	bls.n	800fb92 <dhcp_option_short+0x26>
 800fb84:	4b0f      	ldr	r3, [pc, #60]	; (800fbc4 <dhcp_option_short+0x58>)
 800fb86:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800fb8a:	490f      	ldr	r1, [pc, #60]	; (800fbc8 <dhcp_option_short+0x5c>)
 800fb8c:	480f      	ldr	r0, [pc, #60]	; (800fbcc <dhcp_option_short+0x60>)
 800fb8e:	f003 fa1b 	bl	8012fc8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800fb92:	88bb      	ldrh	r3, [r7, #4]
 800fb94:	0a1b      	lsrs	r3, r3, #8
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	88fb      	ldrh	r3, [r7, #6]
 800fb9a:	1c59      	adds	r1, r3, #1
 800fb9c:	80f9      	strh	r1, [r7, #6]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	440b      	add	r3, r1
 800fba4:	b2d2      	uxtb	r2, r2
 800fba6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800fba8:	88fb      	ldrh	r3, [r7, #6]
 800fbaa:	1c5a      	adds	r2, r3, #1
 800fbac:	80fa      	strh	r2, [r7, #6]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	88ba      	ldrh	r2, [r7, #4]
 800fbb6:	b2d2      	uxtb	r2, r2
 800fbb8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fbba:	88fb      	ldrh	r3, [r7, #6]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	0801633c 	.word	0x0801633c
 800fbc8:	0801654c 	.word	0x0801654c
 800fbcc:	0801639c 	.word	0x0801639c

0800fbd0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
 800fbdc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800fbde:	89fb      	ldrh	r3, [r7, #14]
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	2b44      	cmp	r3, #68	; 0x44
 800fbe4:	d906      	bls.n	800fbf4 <dhcp_option_long+0x24>
 800fbe6:	4b19      	ldr	r3, [pc, #100]	; (800fc4c <dhcp_option_long+0x7c>)
 800fbe8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800fbec:	4918      	ldr	r1, [pc, #96]	; (800fc50 <dhcp_option_long+0x80>)
 800fbee:	4819      	ldr	r0, [pc, #100]	; (800fc54 <dhcp_option_long+0x84>)
 800fbf0:	f003 f9ea 	bl	8012fc8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	0e1a      	lsrs	r2, r3, #24
 800fbf8:	89fb      	ldrh	r3, [r7, #14]
 800fbfa:	1c59      	adds	r1, r3, #1
 800fbfc:	81f9      	strh	r1, [r7, #14]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	440b      	add	r3, r1
 800fc04:	b2d2      	uxtb	r2, r2
 800fc06:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	0c1a      	lsrs	r2, r3, #16
 800fc0c:	89fb      	ldrh	r3, [r7, #14]
 800fc0e:	1c59      	adds	r1, r3, #1
 800fc10:	81f9      	strh	r1, [r7, #14]
 800fc12:	4619      	mov	r1, r3
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	440b      	add	r3, r1
 800fc18:	b2d2      	uxtb	r2, r2
 800fc1a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	0a1a      	lsrs	r2, r3, #8
 800fc20:	89fb      	ldrh	r3, [r7, #14]
 800fc22:	1c59      	adds	r1, r3, #1
 800fc24:	81f9      	strh	r1, [r7, #14]
 800fc26:	4619      	mov	r1, r3
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	440b      	add	r3, r1
 800fc2c:	b2d2      	uxtb	r2, r2
 800fc2e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800fc30:	89fb      	ldrh	r3, [r7, #14]
 800fc32:	1c5a      	adds	r2, r3, #1
 800fc34:	81fa      	strh	r2, [r7, #14]
 800fc36:	461a      	mov	r2, r3
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	b2d2      	uxtb	r2, r2
 800fc40:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fc42:	89fb      	ldrh	r3, [r7, #14]
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3710      	adds	r7, #16
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	0801633c 	.word	0x0801633c
 800fc50:	08016588 	.word	0x08016588
 800fc54:	0801639c 	.word	0x0801639c

0800fc58 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b090      	sub	sp, #64	; 0x40
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800fc62:	2300      	movs	r3, #0
 800fc64:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800fc66:	2300      	movs	r3, #0
 800fc68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800fc6a:	2208      	movs	r2, #8
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	48b5      	ldr	r0, [pc, #724]	; (800ff44 <dhcp_parse_reply+0x2ec>)
 800fc70:	f003 fa0f 	bl	8013092 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	895b      	ldrh	r3, [r3, #10]
 800fc78:	2b2b      	cmp	r3, #43	; 0x2b
 800fc7a:	d802      	bhi.n	800fc82 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800fc7c:	f06f 0301 	mvn.w	r3, #1
 800fc80:	e2a7      	b.n	80101d2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800fc88:	23f0      	movs	r3, #240	; 0xf0
 800fc8a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	891b      	ldrh	r3, [r3, #8]
 800fc90:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fc96:	e00c      	b.n	800fcb2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	895b      	ldrh	r3, [r3, #10]
 800fc9c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fc9e:	1ad3      	subs	r3, r2, r3
 800fca0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	895b      	ldrh	r3, [r3, #10]
 800fca6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800fcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d004      	beq.n	800fcc2 <dhcp_parse_reply+0x6a>
 800fcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcba:	895b      	ldrh	r3, [r3, #10]
 800fcbc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d2ea      	bcs.n	800fc98 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d102      	bne.n	800fcce <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800fcc8:	f06f 0301 	mvn.w	r3, #1
 800fccc:	e281      	b.n	80101d2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800fcce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcd0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800fcd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fcd4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fcdc:	e239      	b.n	8010152 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800fcde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fce2:	4413      	add	r3, r2
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800fce8:	2300      	movs	r3, #0
 800fcea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800fcee:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800fcf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fcf6:	3302      	adds	r3, #2
 800fcf8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800fcfa:	8bfa      	ldrh	r2, [r7, #30]
 800fcfc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d202      	bcs.n	800fd08 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800fd02:	f06f 0301 	mvn.w	r3, #1
 800fd06:	e264      	b.n	80101d2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800fd08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd0e:	8952      	ldrh	r2, [r2, #10]
 800fd10:	4293      	cmp	r3, r2
 800fd12:	da07      	bge.n	800fd24 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800fd14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd16:	3301      	adds	r3, #1
 800fd18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd1a:	4413      	add	r3, r2
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd22:	e00b      	b.n	800fd3c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800fd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d004      	beq.n	800fd36 <dhcp_parse_reply+0xde>
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	e000      	b.n	800fd38 <dhcp_parse_reply+0xe0>
 800fd36:	2300      	movs	r3, #0
 800fd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800fd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
 800fd46:	2b3b      	cmp	r3, #59	; 0x3b
 800fd48:	f200 812c 	bhi.w	800ffa4 <dhcp_parse_reply+0x34c>
 800fd4c:	a201      	add	r2, pc, #4	; (adr r2, 800fd54 <dhcp_parse_reply+0xfc>)
 800fd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd52:	bf00      	nop
 800fd54:	0800fe45 	.word	0x0800fe45
 800fd58:	0800fe55 	.word	0x0800fe55
 800fd5c:	0800ffa5 	.word	0x0800ffa5
 800fd60:	0800fe77 	.word	0x0800fe77
 800fd64:	0800ffa5 	.word	0x0800ffa5
 800fd68:	0800ffa5 	.word	0x0800ffa5
 800fd6c:	0800ffa5 	.word	0x0800ffa5
 800fd70:	0800ffa5 	.word	0x0800ffa5
 800fd74:	0800ffa5 	.word	0x0800ffa5
 800fd78:	0800ffa5 	.word	0x0800ffa5
 800fd7c:	0800ffa5 	.word	0x0800ffa5
 800fd80:	0800ffa5 	.word	0x0800ffa5
 800fd84:	0800ffa5 	.word	0x0800ffa5
 800fd88:	0800ffa5 	.word	0x0800ffa5
 800fd8c:	0800ffa5 	.word	0x0800ffa5
 800fd90:	0800ffa5 	.word	0x0800ffa5
 800fd94:	0800ffa5 	.word	0x0800ffa5
 800fd98:	0800ffa5 	.word	0x0800ffa5
 800fd9c:	0800ffa5 	.word	0x0800ffa5
 800fda0:	0800ffa5 	.word	0x0800ffa5
 800fda4:	0800ffa5 	.word	0x0800ffa5
 800fda8:	0800ffa5 	.word	0x0800ffa5
 800fdac:	0800ffa5 	.word	0x0800ffa5
 800fdb0:	0800ffa5 	.word	0x0800ffa5
 800fdb4:	0800ffa5 	.word	0x0800ffa5
 800fdb8:	0800ffa5 	.word	0x0800ffa5
 800fdbc:	0800ffa5 	.word	0x0800ffa5
 800fdc0:	0800ffa5 	.word	0x0800ffa5
 800fdc4:	0800ffa5 	.word	0x0800ffa5
 800fdc8:	0800ffa5 	.word	0x0800ffa5
 800fdcc:	0800ffa5 	.word	0x0800ffa5
 800fdd0:	0800ffa5 	.word	0x0800ffa5
 800fdd4:	0800ffa5 	.word	0x0800ffa5
 800fdd8:	0800ffa5 	.word	0x0800ffa5
 800fddc:	0800ffa5 	.word	0x0800ffa5
 800fde0:	0800ffa5 	.word	0x0800ffa5
 800fde4:	0800ffa5 	.word	0x0800ffa5
 800fde8:	0800ffa5 	.word	0x0800ffa5
 800fdec:	0800ffa5 	.word	0x0800ffa5
 800fdf0:	0800ffa5 	.word	0x0800ffa5
 800fdf4:	0800ffa5 	.word	0x0800ffa5
 800fdf8:	0800ffa5 	.word	0x0800ffa5
 800fdfc:	0800ffa5 	.word	0x0800ffa5
 800fe00:	0800ffa5 	.word	0x0800ffa5
 800fe04:	0800ffa5 	.word	0x0800ffa5
 800fe08:	0800ffa5 	.word	0x0800ffa5
 800fe0c:	0800ffa5 	.word	0x0800ffa5
 800fe10:	0800ffa5 	.word	0x0800ffa5
 800fe14:	0800ffa5 	.word	0x0800ffa5
 800fe18:	0800ffa5 	.word	0x0800ffa5
 800fe1c:	0800ffa5 	.word	0x0800ffa5
 800fe20:	0800fea3 	.word	0x0800fea3
 800fe24:	0800fec5 	.word	0x0800fec5
 800fe28:	0800ff01 	.word	0x0800ff01
 800fe2c:	0800ff23 	.word	0x0800ff23
 800fe30:	0800ffa5 	.word	0x0800ffa5
 800fe34:	0800ffa5 	.word	0x0800ffa5
 800fe38:	0800ffa5 	.word	0x0800ffa5
 800fe3c:	0800ff61 	.word	0x0800ff61
 800fe40:	0800ff83 	.word	0x0800ff83
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800fe52:	e0ab      	b.n	800ffac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fe54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	d009      	beq.n	800fe70 <dhcp_parse_reply+0x218>
 800fe5c:	4b3a      	ldr	r3, [pc, #232]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800fe5e:	f240 622e 	movw	r2, #1582	; 0x62e
 800fe62:	493a      	ldr	r1, [pc, #232]	; (800ff4c <dhcp_parse_reply+0x2f4>)
 800fe64:	483a      	ldr	r0, [pc, #232]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800fe66:	f003 f8af 	bl	8012fc8 <iprintf>
 800fe6a:	f06f 0305 	mvn.w	r3, #5
 800fe6e:	e1b0      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800fe70:	2306      	movs	r3, #6
 800fe72:	623b      	str	r3, [r7, #32]
        break;
 800fe74:	e09a      	b.n	800ffac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800fe76:	2304      	movs	r3, #4
 800fe78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800fe7c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fe80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d209      	bcs.n	800fe9c <dhcp_parse_reply+0x244>
 800fe88:	4b2f      	ldr	r3, [pc, #188]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800fe8a:	f240 6233 	movw	r2, #1587	; 0x633
 800fe8e:	4931      	ldr	r1, [pc, #196]	; (800ff54 <dhcp_parse_reply+0x2fc>)
 800fe90:	482f      	ldr	r0, [pc, #188]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800fe92:	f003 f899 	bl	8012fc8 <iprintf>
 800fe96:	f06f 0305 	mvn.w	r3, #5
 800fe9a:	e19a      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800fe9c:	2307      	movs	r3, #7
 800fe9e:	623b      	str	r3, [r7, #32]
        break;
 800fea0:	e084      	b.n	800ffac <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800fea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fea6:	2b04      	cmp	r3, #4
 800fea8:	d009      	beq.n	800febe <dhcp_parse_reply+0x266>
 800feaa:	4b27      	ldr	r3, [pc, #156]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800feac:	f240 6241 	movw	r2, #1601	; 0x641
 800feb0:	4926      	ldr	r1, [pc, #152]	; (800ff4c <dhcp_parse_reply+0x2f4>)
 800feb2:	4827      	ldr	r0, [pc, #156]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800feb4:	f003 f888 	bl	8012fc8 <iprintf>
 800feb8:	f06f 0305 	mvn.w	r3, #5
 800febc:	e189      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800febe:	2303      	movs	r3, #3
 800fec0:	623b      	str	r3, [r7, #32]
        break;
 800fec2:	e073      	b.n	800ffac <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800fec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d009      	beq.n	800fee0 <dhcp_parse_reply+0x288>
 800fecc:	4b1e      	ldr	r3, [pc, #120]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800fece:	f240 624f 	movw	r2, #1615	; 0x64f
 800fed2:	4921      	ldr	r1, [pc, #132]	; (800ff58 <dhcp_parse_reply+0x300>)
 800fed4:	481e      	ldr	r0, [pc, #120]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800fed6:	f003 f877 	bl	8012fc8 <iprintf>
 800feda:	f06f 0305 	mvn.w	r3, #5
 800fede:	e178      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800fee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fee2:	2bf0      	cmp	r3, #240	; 0xf0
 800fee4:	d009      	beq.n	800fefa <dhcp_parse_reply+0x2a2>
 800fee6:	4b18      	ldr	r3, [pc, #96]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800fee8:	f240 6251 	movw	r2, #1617	; 0x651
 800feec:	491b      	ldr	r1, [pc, #108]	; (800ff5c <dhcp_parse_reply+0x304>)
 800feee:	4818      	ldr	r0, [pc, #96]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800fef0:	f003 f86a 	bl	8012fc8 <iprintf>
 800fef4:	f06f 0305 	mvn.w	r3, #5
 800fef8:	e16b      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800fefa:	2300      	movs	r3, #0
 800fefc:	623b      	str	r3, [r7, #32]
        break;
 800fefe:	e055      	b.n	800ffac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ff00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d009      	beq.n	800ff1c <dhcp_parse_reply+0x2c4>
 800ff08:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800ff0a:	f240 6255 	movw	r2, #1621	; 0x655
 800ff0e:	4912      	ldr	r1, [pc, #72]	; (800ff58 <dhcp_parse_reply+0x300>)
 800ff10:	480f      	ldr	r0, [pc, #60]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800ff12:	f003 f859 	bl	8012fc8 <iprintf>
 800ff16:	f06f 0305 	mvn.w	r3, #5
 800ff1a:	e15a      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	623b      	str	r3, [r7, #32]
        break;
 800ff20:	e044      	b.n	800ffac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff26:	2b04      	cmp	r3, #4
 800ff28:	d009      	beq.n	800ff3e <dhcp_parse_reply+0x2e6>
 800ff2a:	4b07      	ldr	r3, [pc, #28]	; (800ff48 <dhcp_parse_reply+0x2f0>)
 800ff2c:	f240 6259 	movw	r2, #1625	; 0x659
 800ff30:	4906      	ldr	r1, [pc, #24]	; (800ff4c <dhcp_parse_reply+0x2f4>)
 800ff32:	4807      	ldr	r0, [pc, #28]	; (800ff50 <dhcp_parse_reply+0x2f8>)
 800ff34:	f003 f848 	bl	8012fc8 <iprintf>
 800ff38:	f06f 0305 	mvn.w	r3, #5
 800ff3c:	e149      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ff3e:	2302      	movs	r3, #2
 800ff40:	623b      	str	r3, [r7, #32]
        break;
 800ff42:	e033      	b.n	800ffac <dhcp_parse_reply+0x354>
 800ff44:	20010928 	.word	0x20010928
 800ff48:	0801633c 	.word	0x0801633c
 800ff4c:	080165c4 	.word	0x080165c4
 800ff50:	0801639c 	.word	0x0801639c
 800ff54:	080165d0 	.word	0x080165d0
 800ff58:	080165e4 	.word	0x080165e4
 800ff5c:	080165f0 	.word	0x080165f0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff64:	2b04      	cmp	r3, #4
 800ff66:	d009      	beq.n	800ff7c <dhcp_parse_reply+0x324>
 800ff68:	4b9c      	ldr	r3, [pc, #624]	; (80101dc <dhcp_parse_reply+0x584>)
 800ff6a:	f240 625d 	movw	r2, #1629	; 0x65d
 800ff6e:	499c      	ldr	r1, [pc, #624]	; (80101e0 <dhcp_parse_reply+0x588>)
 800ff70:	489c      	ldr	r0, [pc, #624]	; (80101e4 <dhcp_parse_reply+0x58c>)
 800ff72:	f003 f829 	bl	8012fc8 <iprintf>
 800ff76:	f06f 0305 	mvn.w	r3, #5
 800ff7a:	e12a      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800ff7c:	2304      	movs	r3, #4
 800ff7e:	623b      	str	r3, [r7, #32]
        break;
 800ff80:	e014      	b.n	800ffac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ff82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff86:	2b04      	cmp	r3, #4
 800ff88:	d009      	beq.n	800ff9e <dhcp_parse_reply+0x346>
 800ff8a:	4b94      	ldr	r3, [pc, #592]	; (80101dc <dhcp_parse_reply+0x584>)
 800ff8c:	f240 6261 	movw	r2, #1633	; 0x661
 800ff90:	4993      	ldr	r1, [pc, #588]	; (80101e0 <dhcp_parse_reply+0x588>)
 800ff92:	4894      	ldr	r0, [pc, #592]	; (80101e4 <dhcp_parse_reply+0x58c>)
 800ff94:	f003 f818 	bl	8012fc8 <iprintf>
 800ff98:	f06f 0305 	mvn.w	r3, #5
 800ff9c:	e119      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ff9e:	2305      	movs	r3, #5
 800ffa0:	623b      	str	r3, [r7, #32]
        break;
 800ffa2:	e003      	b.n	800ffac <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800ffaa:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800ffac:	7dfb      	ldrb	r3, [r7, #23]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d103      	bne.n	800ffba <dhcp_parse_reply+0x362>
      offset++;
 800ffb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ffb8:	e0a1      	b.n	80100fe <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800ffba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ffbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	dd02      	ble.n	800ffd0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800ffca:	f06f 0301 	mvn.w	r3, #1
 800ffce:	e100      	b.n	80101d2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800ffd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ffd8:	4413      	add	r3, r2
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	3302      	adds	r3, #2
 800ffde:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800ffe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f000 808a 	beq.w	80100fe <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800ffea:	2300      	movs	r3, #0
 800ffec:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800ffee:	6a3b      	ldr	r3, [r7, #32]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	db02      	blt.n	800fffa <dhcp_parse_reply+0x3a2>
 800fff4:	6a3b      	ldr	r3, [r7, #32]
 800fff6:	2b07      	cmp	r3, #7
 800fff8:	dd06      	ble.n	8010008 <dhcp_parse_reply+0x3b0>
 800fffa:	4b78      	ldr	r3, [pc, #480]	; (80101dc <dhcp_parse_reply+0x584>)
 800fffc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8010000:	4979      	ldr	r1, [pc, #484]	; (80101e8 <dhcp_parse_reply+0x590>)
 8010002:	4878      	ldr	r0, [pc, #480]	; (80101e4 <dhcp_parse_reply+0x58c>)
 8010004:	f002 ffe0 	bl	8012fc8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010008:	4a78      	ldr	r2, [pc, #480]	; (80101ec <dhcp_parse_reply+0x594>)
 801000a:	6a3b      	ldr	r3, [r7, #32]
 801000c:	4413      	add	r3, r2
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d174      	bne.n	80100fe <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8010014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010018:	2b04      	cmp	r3, #4
 801001a:	bf28      	it	cs
 801001c:	2304      	movcs	r3, #4
 801001e:	b2db      	uxtb	r3, r3
 8010020:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010022:	8bfb      	ldrh	r3, [r7, #30]
 8010024:	8aba      	ldrh	r2, [r7, #20]
 8010026:	f107 0108 	add.w	r1, r7, #8
 801002a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801002c:	f7f8 fc54 	bl	80088d8 <pbuf_copy_partial>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	8abb      	ldrh	r3, [r7, #20]
 8010036:	4293      	cmp	r3, r2
 8010038:	d002      	beq.n	8010040 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801003a:	f06f 0301 	mvn.w	r3, #1
 801003e:	e0c8      	b.n	80101d2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8010040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010044:	2b04      	cmp	r3, #4
 8010046:	d933      	bls.n	80100b0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801004c:	f003 0303 	and.w	r3, r3, #3
 8010050:	b2db      	uxtb	r3, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	d009      	beq.n	801006a <dhcp_parse_reply+0x412>
 8010056:	4b61      	ldr	r3, [pc, #388]	; (80101dc <dhcp_parse_reply+0x584>)
 8010058:	f240 6281 	movw	r2, #1665	; 0x681
 801005c:	4964      	ldr	r1, [pc, #400]	; (80101f0 <dhcp_parse_reply+0x598>)
 801005e:	4861      	ldr	r0, [pc, #388]	; (80101e4 <dhcp_parse_reply+0x58c>)
 8010060:	f002 ffb2 	bl	8012fc8 <iprintf>
 8010064:	f06f 0305 	mvn.w	r3, #5
 8010068:	e0b3      	b.n	80101d2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801006a:	4a60      	ldr	r2, [pc, #384]	; (80101ec <dhcp_parse_reply+0x594>)
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	4413      	add	r3, r2
 8010070:	2201      	movs	r2, #1
 8010072:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	4618      	mov	r0, r3
 8010078:	f7f6 fea7 	bl	8006dca <lwip_htonl>
 801007c:	4602      	mov	r2, r0
 801007e:	495d      	ldr	r1, [pc, #372]	; (80101f4 <dhcp_parse_reply+0x59c>)
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010086:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801008a:	3b04      	subs	r3, #4
 801008c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8010090:	8bfb      	ldrh	r3, [r7, #30]
 8010092:	3304      	adds	r3, #4
 8010094:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010096:	8a7a      	ldrh	r2, [r7, #18]
 8010098:	8bfb      	ldrh	r3, [r7, #30]
 801009a:	429a      	cmp	r2, r3
 801009c:	d202      	bcs.n	80100a4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801009e:	f06f 0301 	mvn.w	r3, #1
 80100a2:	e096      	b.n	80101d2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80100a4:	8a7b      	ldrh	r3, [r7, #18]
 80100a6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80100a8:	6a3b      	ldr	r3, [r7, #32]
 80100aa:	3301      	adds	r3, #1
 80100ac:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80100ae:	e79e      	b.n	800ffee <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80100b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100b4:	2b04      	cmp	r3, #4
 80100b6:	d106      	bne.n	80100c6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7f6 fe85 	bl	8006dca <lwip_htonl>
 80100c0:	4603      	mov	r3, r0
 80100c2:	60bb      	str	r3, [r7, #8]
 80100c4:	e011      	b.n	80100ea <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80100c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d009      	beq.n	80100e2 <dhcp_parse_reply+0x48a>
 80100ce:	4b43      	ldr	r3, [pc, #268]	; (80101dc <dhcp_parse_reply+0x584>)
 80100d0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80100d4:	4948      	ldr	r1, [pc, #288]	; (80101f8 <dhcp_parse_reply+0x5a0>)
 80100d6:	4843      	ldr	r0, [pc, #268]	; (80101e4 <dhcp_parse_reply+0x58c>)
 80100d8:	f002 ff76 	bl	8012fc8 <iprintf>
 80100dc:	f06f 0305 	mvn.w	r3, #5
 80100e0:	e077      	b.n	80101d2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80100e2:	f107 0308 	add.w	r3, r7, #8
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80100ea:	4a40      	ldr	r2, [pc, #256]	; (80101ec <dhcp_parse_reply+0x594>)
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	4413      	add	r3, r2
 80100f0:	2201      	movs	r2, #1
 80100f2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80100f4:	68ba      	ldr	r2, [r7, #8]
 80100f6:	493f      	ldr	r1, [pc, #252]	; (80101f4 <dhcp_parse_reply+0x59c>)
 80100f8:	6a3b      	ldr	r3, [r7, #32]
 80100fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80100fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010100:	895b      	ldrh	r3, [r3, #10]
 8010102:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010104:	429a      	cmp	r2, r3
 8010106:	d324      	bcc.n	8010152 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8010108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010a:	895b      	ldrh	r3, [r3, #10]
 801010c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	895b      	ldrh	r3, [r3, #10]
 8010116:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801011c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801011e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010120:	429a      	cmp	r2, r3
 8010122:	d213      	bcs.n	801014c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	2b00      	cmp	r3, #0
 801012e:	d109      	bne.n	8010144 <dhcp_parse_reply+0x4ec>
 8010130:	4b2a      	ldr	r3, [pc, #168]	; (80101dc <dhcp_parse_reply+0x584>)
 8010132:	f240 629d 	movw	r2, #1693	; 0x69d
 8010136:	4931      	ldr	r1, [pc, #196]	; (80101fc <dhcp_parse_reply+0x5a4>)
 8010138:	482a      	ldr	r0, [pc, #168]	; (80101e4 <dhcp_parse_reply+0x58c>)
 801013a:	f002 ff45 	bl	8012fc8 <iprintf>
 801013e:	f06f 0305 	mvn.w	r3, #5
 8010142:	e046      	b.n	80101d2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8010144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	63fb      	str	r3, [r7, #60]	; 0x3c
 801014a:	e002      	b.n	8010152 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801014c:	f06f 0301 	mvn.w	r3, #1
 8010150:	e03f      	b.n	80101d2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00a      	beq.n	801016e <dhcp_parse_reply+0x516>
 8010158:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801015a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801015c:	429a      	cmp	r2, r3
 801015e:	d206      	bcs.n	801016e <dhcp_parse_reply+0x516>
 8010160:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010164:	4413      	add	r3, r2
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	2bff      	cmp	r3, #255	; 0xff
 801016a:	f47f adb8 	bne.w	800fcde <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801016e:	4b1f      	ldr	r3, [pc, #124]	; (80101ec <dhcp_parse_reply+0x594>)
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d018      	beq.n	80101a8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010176:	4b1f      	ldr	r3, [pc, #124]	; (80101f4 <dhcp_parse_reply+0x59c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801017c:	4b1b      	ldr	r3, [pc, #108]	; (80101ec <dhcp_parse_reply+0x594>)
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d102      	bne.n	801018e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010188:	2301      	movs	r3, #1
 801018a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801018c:	e00c      	b.n	80101a8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d102      	bne.n	801019a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8010194:	2301      	movs	r3, #1
 8010196:	62bb      	str	r3, [r7, #40]	; 0x28
 8010198:	e006      	b.n	80101a8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2b03      	cmp	r3, #3
 801019e:	d103      	bne.n	80101a8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80101a0:	2301      	movs	r3, #1
 80101a2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80101a4:	2301      	movs	r3, #1
 80101a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d006      	beq.n	80101bc <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80101b2:	236c      	movs	r3, #108	; 0x6c
 80101b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80101b6:	23ec      	movs	r3, #236	; 0xec
 80101b8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80101ba:	e56a      	b.n	800fc92 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80101bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d006      	beq.n	80101d0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80101c6:	232c      	movs	r3, #44	; 0x2c
 80101c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80101ca:	236c      	movs	r3, #108	; 0x6c
 80101cc:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80101ce:	e560      	b.n	800fc92 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3740      	adds	r7, #64	; 0x40
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	0801633c 	.word	0x0801633c
 80101e0:	080165c4 	.word	0x080165c4
 80101e4:	0801639c 	.word	0x0801639c
 80101e8:	08016608 	.word	0x08016608
 80101ec:	20010928 	.word	0x20010928
 80101f0:	0801661c 	.word	0x0801661c
 80101f4:	20010908 	.word	0x20010908
 80101f8:	08016634 	.word	0x08016634
 80101fc:	08016648 	.word	0x08016648

08010200 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08a      	sub	sp, #40	; 0x28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801020e:	4b60      	ldr	r3, [pc, #384]	; (8010390 <dhcp_recv+0x190>)
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010218:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 809d 	beq.w	8010362 <dhcp_recv+0x162>
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	791b      	ldrb	r3, [r3, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 8098 	beq.w	8010362 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	895b      	ldrh	r3, [r3, #10]
 8010236:	2b2b      	cmp	r3, #43	; 0x2b
 8010238:	f240 8095 	bls.w	8010366 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	2b02      	cmp	r3, #2
 8010242:	f040 8092 	bne.w	801036a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010246:	2300      	movs	r3, #0
 8010248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801024c:	e012      	b.n	8010274 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801024e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010252:	6a3a      	ldr	r2, [r7, #32]
 8010254:	4413      	add	r3, r2
 8010256:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801025a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801025e:	69b9      	ldr	r1, [r7, #24]
 8010260:	440b      	add	r3, r1
 8010262:	7f1b      	ldrb	r3, [r3, #28]
 8010264:	429a      	cmp	r2, r3
 8010266:	f040 8082 	bne.w	801036e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801026a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801026e:	3301      	adds	r3, #1
 8010270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010274:	6a3b      	ldr	r3, [r7, #32]
 8010276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801027a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801027e:	429a      	cmp	r2, r3
 8010280:	d203      	bcs.n	801028a <dhcp_recv+0x8a>
 8010282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010286:	2b05      	cmp	r3, #5
 8010288:	d9e1      	bls.n	801024e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	4618      	mov	r0, r3
 8010290:	f7f6 fd9b 	bl	8006dca <lwip_htonl>
 8010294:	4602      	mov	r2, r0
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	429a      	cmp	r2, r3
 801029c:	d169      	bne.n	8010372 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801029e:	69f9      	ldr	r1, [r7, #28]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7ff fcd9 	bl	800fc58 <dhcp_parse_reply>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d164      	bne.n	8010376 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80102ac:	4b39      	ldr	r3, [pc, #228]	; (8010394 <dhcp_recv+0x194>)
 80102ae:	785b      	ldrb	r3, [r3, #1]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d062      	beq.n	801037a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80102ba:	4b37      	ldr	r3, [pc, #220]	; (8010398 <dhcp_recv+0x198>)
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80102c0:	7cfb      	ldrb	r3, [r7, #19]
 80102c2:	2b05      	cmp	r3, #5
 80102c4:	d12a      	bne.n	801031c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	795b      	ldrb	r3, [r3, #5]
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d112      	bne.n	80102f4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80102ce:	6979      	ldr	r1, [r7, #20]
 80102d0:	6a38      	ldr	r0, [r7, #32]
 80102d2:	f7fe fe53 	bl	800ef7c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102dc:	f003 0308 	and.w	r3, r3, #8
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80102e4:	6a38      	ldr	r0, [r7, #32]
 80102e6:	f7fe fbc3 	bl	800ea70 <dhcp_check>
 80102ea:	e049      	b.n	8010380 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80102ec:	6a38      	ldr	r0, [r7, #32]
 80102ee:	f7ff f867 	bl	800f3c0 <dhcp_bind>
 80102f2:	e045      	b.n	8010380 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	795b      	ldrb	r3, [r3, #5]
 80102f8:	2b03      	cmp	r3, #3
 80102fa:	d007      	beq.n	801030c <dhcp_recv+0x10c>
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	795b      	ldrb	r3, [r3, #5]
 8010300:	2b04      	cmp	r3, #4
 8010302:	d003      	beq.n	801030c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010304:	69fb      	ldr	r3, [r7, #28]
 8010306:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010308:	2b05      	cmp	r3, #5
 801030a:	d139      	bne.n	8010380 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801030c:	6979      	ldr	r1, [r7, #20]
 801030e:	6a38      	ldr	r0, [r7, #32]
 8010310:	f7fe fe34 	bl	800ef7c <dhcp_handle_ack>
      dhcp_bind(netif);
 8010314:	6a38      	ldr	r0, [r7, #32]
 8010316:	f7ff f853 	bl	800f3c0 <dhcp_bind>
 801031a:	e031      	b.n	8010380 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801031c:	7cfb      	ldrb	r3, [r7, #19]
 801031e:	2b06      	cmp	r3, #6
 8010320:	d113      	bne.n	801034a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8010326:	2b03      	cmp	r3, #3
 8010328:	d00b      	beq.n	8010342 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	795b      	ldrb	r3, [r3, #5]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d007      	beq.n	8010342 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010336:	2b04      	cmp	r3, #4
 8010338:	d003      	beq.n	8010342 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	795b      	ldrb	r3, [r3, #5]
 801033e:	2b05      	cmp	r3, #5
 8010340:	d103      	bne.n	801034a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8010342:	6a38      	ldr	r0, [r7, #32]
 8010344:	f7fe fb7a 	bl	800ea3c <dhcp_handle_nak>
 8010348:	e01a      	b.n	8010380 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801034a:	7cfb      	ldrb	r3, [r7, #19]
 801034c:	2b02      	cmp	r3, #2
 801034e:	d116      	bne.n	801037e <dhcp_recv+0x17e>
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	795b      	ldrb	r3, [r3, #5]
 8010354:	2b06      	cmp	r3, #6
 8010356:	d112      	bne.n	801037e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010358:	6979      	ldr	r1, [r7, #20]
 801035a:	6a38      	ldr	r0, [r7, #32]
 801035c:	f7fe fbbc 	bl	800ead8 <dhcp_handle_offer>
 8010360:	e00e      	b.n	8010380 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010362:	bf00      	nop
 8010364:	e00c      	b.n	8010380 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010366:	bf00      	nop
 8010368:	e00a      	b.n	8010380 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801036a:	bf00      	nop
 801036c:	e008      	b.n	8010380 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801036e:	bf00      	nop
 8010370:	e006      	b.n	8010380 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010372:	bf00      	nop
 8010374:	e004      	b.n	8010380 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010376:	bf00      	nop
 8010378:	e002      	b.n	8010380 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801037a:	bf00      	nop
 801037c:	e000      	b.n	8010380 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801037e:	bf00      	nop
  pbuf_free(p);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7f8 f8a3 	bl	80084cc <pbuf_free>
}
 8010386:	bf00      	nop
 8010388:	3728      	adds	r7, #40	; 0x28
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	2000d134 	.word	0x2000d134
 8010394:	20010928 	.word	0x20010928
 8010398:	20010908 	.word	0x20010908

0801039c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b088      	sub	sp, #32
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	603b      	str	r3, [r7, #0]
 80103a8:	4613      	mov	r3, r2
 80103aa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d108      	bne.n	80103c4 <dhcp_create_msg+0x28>
 80103b2:	4b5f      	ldr	r3, [pc, #380]	; (8010530 <dhcp_create_msg+0x194>)
 80103b4:	f240 7269 	movw	r2, #1897	; 0x769
 80103b8:	495e      	ldr	r1, [pc, #376]	; (8010534 <dhcp_create_msg+0x198>)
 80103ba:	485f      	ldr	r0, [pc, #380]	; (8010538 <dhcp_create_msg+0x19c>)
 80103bc:	f002 fe04 	bl	8012fc8 <iprintf>
 80103c0:	2300      	movs	r3, #0
 80103c2:	e0b1      	b.n	8010528 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d108      	bne.n	80103dc <dhcp_create_msg+0x40>
 80103ca:	4b59      	ldr	r3, [pc, #356]	; (8010530 <dhcp_create_msg+0x194>)
 80103cc:	f240 726a 	movw	r2, #1898	; 0x76a
 80103d0:	495a      	ldr	r1, [pc, #360]	; (801053c <dhcp_create_msg+0x1a0>)
 80103d2:	4859      	ldr	r0, [pc, #356]	; (8010538 <dhcp_create_msg+0x19c>)
 80103d4:	f002 fdf8 	bl	8012fc8 <iprintf>
 80103d8:	2300      	movs	r3, #0
 80103da:	e0a5      	b.n	8010528 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80103dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80103e0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80103e4:	2036      	movs	r0, #54	; 0x36
 80103e6:	f7f7 fd8d 	bl	8007f04 <pbuf_alloc>
 80103ea:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	e098      	b.n	8010528 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	895b      	ldrh	r3, [r3, #10]
 80103fa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80103fe:	d206      	bcs.n	801040e <dhcp_create_msg+0x72>
 8010400:	4b4b      	ldr	r3, [pc, #300]	; (8010530 <dhcp_create_msg+0x194>)
 8010402:	f240 7271 	movw	r2, #1905	; 0x771
 8010406:	494e      	ldr	r1, [pc, #312]	; (8010540 <dhcp_create_msg+0x1a4>)
 8010408:	484b      	ldr	r0, [pc, #300]	; (8010538 <dhcp_create_msg+0x19c>)
 801040a:	f002 fddd 	bl	8012fc8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	2b03      	cmp	r3, #3
 8010412:	d103      	bne.n	801041c <dhcp_create_msg+0x80>
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	795b      	ldrb	r3, [r3, #5]
 8010418:	2b03      	cmp	r3, #3
 801041a:	d10d      	bne.n	8010438 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	799b      	ldrb	r3, [r3, #6]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d105      	bne.n	8010430 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010424:	f002 fce2 	bl	8012dec <rand>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
 801042c:	4b45      	ldr	r3, [pc, #276]	; (8010544 <dhcp_create_msg+0x1a8>)
 801042e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8010430:	4b44      	ldr	r3, [pc, #272]	; (8010544 <dhcp_create_msg+0x1a8>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801043e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010442:	2100      	movs	r1, #0
 8010444:	6978      	ldr	r0, [r7, #20]
 8010446:	f002 fe24 	bl	8013092 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	2201      	movs	r2, #1
 801044e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	2201      	movs	r2, #1
 8010454:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4618      	mov	r0, r3
 8010466:	f7f6 fcb0 	bl	8006dca <lwip_htonl>
 801046a:	4602      	mov	r2, r0
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010470:	79fb      	ldrb	r3, [r7, #7]
 8010472:	2b08      	cmp	r3, #8
 8010474:	d010      	beq.n	8010498 <dhcp_create_msg+0xfc>
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	2b04      	cmp	r3, #4
 801047a:	d00d      	beq.n	8010498 <dhcp_create_msg+0xfc>
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	2b07      	cmp	r3, #7
 8010480:	d00a      	beq.n	8010498 <dhcp_create_msg+0xfc>
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	2b03      	cmp	r3, #3
 8010486:	d10c      	bne.n	80104a2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801048c:	2b05      	cmp	r3, #5
 801048e:	d003      	beq.n	8010498 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	795b      	ldrb	r3, [r3, #5]
 8010494:	2b04      	cmp	r3, #4
 8010496:	d104      	bne.n	80104a2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3304      	adds	r3, #4
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80104a2:	2300      	movs	r3, #0
 80104a4:	83fb      	strh	r3, [r7, #30]
 80104a6:	e00c      	b.n	80104c2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80104a8:	8bfa      	ldrh	r2, [r7, #30]
 80104aa:	8bfb      	ldrh	r3, [r7, #30]
 80104ac:	68f9      	ldr	r1, [r7, #12]
 80104ae:	440a      	add	r2, r1
 80104b0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80104b4:	697a      	ldr	r2, [r7, #20]
 80104b6:	4413      	add	r3, r2
 80104b8:	460a      	mov	r2, r1
 80104ba:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80104bc:	8bfb      	ldrh	r3, [r7, #30]
 80104be:	3301      	adds	r3, #1
 80104c0:	83fb      	strh	r3, [r7, #30]
 80104c2:	8bfb      	ldrh	r3, [r7, #30]
 80104c4:	2b05      	cmp	r3, #5
 80104c6:	d9ef      	bls.n	80104a8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	2200      	movs	r2, #0
 80104cc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80104d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80104d4:	2200      	movs	r2, #0
 80104d6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80104da:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80104de:	2200      	movs	r2, #0
 80104e0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80104e4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80104e8:	2200      	movs	r2, #0
 80104ea:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80104ee:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104f8:	2301      	movs	r3, #1
 80104fa:	2235      	movs	r2, #53	; 0x35
 80104fc:	2000      	movs	r0, #0
 80104fe:	f7ff fadb 	bl	800fab8 <dhcp_option>
 8010502:	4603      	mov	r3, r0
 8010504:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801050c:	79fa      	ldrb	r2, [r7, #7]
 801050e:	8a7b      	ldrh	r3, [r7, #18]
 8010510:	4618      	mov	r0, r3
 8010512:	f7ff fb05 	bl	800fb20 <dhcp_option_byte>
 8010516:	4603      	mov	r3, r0
 8010518:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	8a7a      	ldrh	r2, [r7, #18]
 8010524:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8010526:	69bb      	ldr	r3, [r7, #24]
}
 8010528:	4618      	mov	r0, r3
 801052a:	3720      	adds	r7, #32
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	0801633c 	.word	0x0801633c
 8010534:	0801665c 	.word	0x0801665c
 8010538:	0801639c 	.word	0x0801639c
 801053c:	0801667c 	.word	0x0801667c
 8010540:	0801669c 	.word	0x0801669c
 8010544:	20010938 	.word	0x20010938

08010548 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	607a      	str	r2, [r7, #4]
 8010554:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8010556:	89fb      	ldrh	r3, [r7, #14]
 8010558:	1c5a      	adds	r2, r3, #1
 801055a:	81fa      	strh	r2, [r7, #14]
 801055c:	461a      	mov	r2, r3
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	4413      	add	r3, r2
 8010562:	22ff      	movs	r2, #255	; 0xff
 8010564:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010566:	e007      	b.n	8010578 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010568:	89fb      	ldrh	r3, [r7, #14]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	81fa      	strh	r2, [r7, #14]
 801056e:	461a      	mov	r2, r3
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	4413      	add	r3, r2
 8010574:	2200      	movs	r2, #0
 8010576:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010578:	89fb      	ldrh	r3, [r7, #14]
 801057a:	2b43      	cmp	r3, #67	; 0x43
 801057c:	d904      	bls.n	8010588 <dhcp_option_trailer+0x40>
 801057e:	89fb      	ldrh	r3, [r7, #14]
 8010580:	f003 0303 	and.w	r3, r3, #3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <dhcp_option_trailer+0x46>
 8010588:	89fb      	ldrh	r3, [r7, #14]
 801058a:	2b43      	cmp	r3, #67	; 0x43
 801058c:	d9ec      	bls.n	8010568 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801058e:	89fb      	ldrh	r3, [r7, #14]
 8010590:	33f0      	adds	r3, #240	; 0xf0
 8010592:	b29b      	uxth	r3, r3
 8010594:	4619      	mov	r1, r3
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7f7 fe12 	bl	80081c0 <pbuf_realloc>
}
 801059c:	bf00      	nop
 801059e:	3710      	adds	r7, #16
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b085      	sub	sp, #20
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d017      	beq.n	80105e2 <dhcp_supplied_address+0x3e>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d013      	beq.n	80105e2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105be:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	795b      	ldrb	r3, [r3, #5]
 80105c4:	2b0a      	cmp	r3, #10
 80105c6:	d007      	beq.n	80105d8 <dhcp_supplied_address+0x34>
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	795b      	ldrb	r3, [r3, #5]
 80105cc:	2b05      	cmp	r3, #5
 80105ce:	d003      	beq.n	80105d8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80105d4:	2b04      	cmp	r3, #4
 80105d6:	d101      	bne.n	80105dc <dhcp_supplied_address+0x38>
 80105d8:	2301      	movs	r3, #1
 80105da:	e000      	b.n	80105de <dhcp_supplied_address+0x3a>
 80105dc:	2300      	movs	r3, #0
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	e000      	b.n	80105e4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80105f8:	4915      	ldr	r1, [pc, #84]	; (8010650 <etharp_free_entry+0x60>)
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	440b      	add	r3, r1
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d013      	beq.n	8010634 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801060c:	4910      	ldr	r1, [pc, #64]	; (8010650 <etharp_free_entry+0x60>)
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	4613      	mov	r3, r2
 8010612:	005b      	lsls	r3, r3, #1
 8010614:	4413      	add	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	440b      	add	r3, r1
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4618      	mov	r0, r3
 801061e:	f7f7 ff55 	bl	80084cc <pbuf_free>
    arp_table[i].q = NULL;
 8010622:	490b      	ldr	r1, [pc, #44]	; (8010650 <etharp_free_entry+0x60>)
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	4613      	mov	r3, r2
 8010628:	005b      	lsls	r3, r3, #1
 801062a:	4413      	add	r3, r2
 801062c:	00db      	lsls	r3, r3, #3
 801062e:	440b      	add	r3, r1
 8010630:	2200      	movs	r2, #0
 8010632:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010634:	4906      	ldr	r1, [pc, #24]	; (8010650 <etharp_free_entry+0x60>)
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	4613      	mov	r3, r2
 801063a:	005b      	lsls	r3, r3, #1
 801063c:	4413      	add	r3, r2
 801063e:	00db      	lsls	r3, r3, #3
 8010640:	440b      	add	r3, r1
 8010642:	3314      	adds	r3, #20
 8010644:	2200      	movs	r2, #0
 8010646:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010648:	bf00      	nop
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	2001093c 	.word	0x2001093c

08010654 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801065a:	2300      	movs	r3, #0
 801065c:	607b      	str	r3, [r7, #4]
 801065e:	e096      	b.n	801078e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010660:	494f      	ldr	r1, [pc, #316]	; (80107a0 <etharp_tmr+0x14c>)
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	4613      	mov	r3, r2
 8010666:	005b      	lsls	r3, r3, #1
 8010668:	4413      	add	r3, r2
 801066a:	00db      	lsls	r3, r3, #3
 801066c:	440b      	add	r3, r1
 801066e:	3314      	adds	r3, #20
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010674:	78fb      	ldrb	r3, [r7, #3]
 8010676:	2b00      	cmp	r3, #0
 8010678:	f000 8086 	beq.w	8010788 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801067c:	4948      	ldr	r1, [pc, #288]	; (80107a0 <etharp_tmr+0x14c>)
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	4613      	mov	r3, r2
 8010682:	005b      	lsls	r3, r3, #1
 8010684:	4413      	add	r3, r2
 8010686:	00db      	lsls	r3, r3, #3
 8010688:	440b      	add	r3, r1
 801068a:	3312      	adds	r3, #18
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	3301      	adds	r3, #1
 8010690:	b298      	uxth	r0, r3
 8010692:	4943      	ldr	r1, [pc, #268]	; (80107a0 <etharp_tmr+0x14c>)
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	4613      	mov	r3, r2
 8010698:	005b      	lsls	r3, r3, #1
 801069a:	4413      	add	r3, r2
 801069c:	00db      	lsls	r3, r3, #3
 801069e:	440b      	add	r3, r1
 80106a0:	3312      	adds	r3, #18
 80106a2:	4602      	mov	r2, r0
 80106a4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80106a6:	493e      	ldr	r1, [pc, #248]	; (80107a0 <etharp_tmr+0x14c>)
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	4613      	mov	r3, r2
 80106ac:	005b      	lsls	r3, r3, #1
 80106ae:	4413      	add	r3, r2
 80106b0:	00db      	lsls	r3, r3, #3
 80106b2:	440b      	add	r3, r1
 80106b4:	3312      	adds	r3, #18
 80106b6:	881b      	ldrh	r3, [r3, #0]
 80106b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80106bc:	d215      	bcs.n	80106ea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80106be:	4938      	ldr	r1, [pc, #224]	; (80107a0 <etharp_tmr+0x14c>)
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	4613      	mov	r3, r2
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	4413      	add	r3, r2
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	440b      	add	r3, r1
 80106cc:	3314      	adds	r3, #20
 80106ce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d10e      	bne.n	80106f2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80106d4:	4932      	ldr	r1, [pc, #200]	; (80107a0 <etharp_tmr+0x14c>)
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	4613      	mov	r3, r2
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	4413      	add	r3, r2
 80106de:	00db      	lsls	r3, r3, #3
 80106e0:	440b      	add	r3, r1
 80106e2:	3312      	adds	r3, #18
 80106e4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80106e6:	2b04      	cmp	r3, #4
 80106e8:	d903      	bls.n	80106f2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7ff ff80 	bl	80105f0 <etharp_free_entry>
 80106f0:	e04a      	b.n	8010788 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80106f2:	492b      	ldr	r1, [pc, #172]	; (80107a0 <etharp_tmr+0x14c>)
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	4613      	mov	r3, r2
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	4413      	add	r3, r2
 80106fc:	00db      	lsls	r3, r3, #3
 80106fe:	440b      	add	r3, r1
 8010700:	3314      	adds	r3, #20
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	2b03      	cmp	r3, #3
 8010706:	d10a      	bne.n	801071e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010708:	4925      	ldr	r1, [pc, #148]	; (80107a0 <etharp_tmr+0x14c>)
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	4613      	mov	r3, r2
 801070e:	005b      	lsls	r3, r3, #1
 8010710:	4413      	add	r3, r2
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	440b      	add	r3, r1
 8010716:	3314      	adds	r3, #20
 8010718:	2204      	movs	r2, #4
 801071a:	701a      	strb	r2, [r3, #0]
 801071c:	e034      	b.n	8010788 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801071e:	4920      	ldr	r1, [pc, #128]	; (80107a0 <etharp_tmr+0x14c>)
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	4613      	mov	r3, r2
 8010724:	005b      	lsls	r3, r3, #1
 8010726:	4413      	add	r3, r2
 8010728:	00db      	lsls	r3, r3, #3
 801072a:	440b      	add	r3, r1
 801072c:	3314      	adds	r3, #20
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	2b04      	cmp	r3, #4
 8010732:	d10a      	bne.n	801074a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010734:	491a      	ldr	r1, [pc, #104]	; (80107a0 <etharp_tmr+0x14c>)
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	4613      	mov	r3, r2
 801073a:	005b      	lsls	r3, r3, #1
 801073c:	4413      	add	r3, r2
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	440b      	add	r3, r1
 8010742:	3314      	adds	r3, #20
 8010744:	2202      	movs	r2, #2
 8010746:	701a      	strb	r2, [r3, #0]
 8010748:	e01e      	b.n	8010788 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801074a:	4915      	ldr	r1, [pc, #84]	; (80107a0 <etharp_tmr+0x14c>)
 801074c:	687a      	ldr	r2, [r7, #4]
 801074e:	4613      	mov	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4413      	add	r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	3314      	adds	r3, #20
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	2b01      	cmp	r3, #1
 801075e:	d113      	bne.n	8010788 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010760:	490f      	ldr	r1, [pc, #60]	; (80107a0 <etharp_tmr+0x14c>)
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	4613      	mov	r3, r2
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	4413      	add	r3, r2
 801076a:	00db      	lsls	r3, r3, #3
 801076c:	440b      	add	r3, r1
 801076e:	3308      	adds	r3, #8
 8010770:	6818      	ldr	r0, [r3, #0]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4613      	mov	r3, r2
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	4413      	add	r3, r2
 801077a:	00db      	lsls	r3, r3, #3
 801077c:	4a08      	ldr	r2, [pc, #32]	; (80107a0 <etharp_tmr+0x14c>)
 801077e:	4413      	add	r3, r2
 8010780:	3304      	adds	r3, #4
 8010782:	4619      	mov	r1, r3
 8010784:	f000 fe72 	bl	801146c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	3301      	adds	r3, #1
 801078c:	607b      	str	r3, [r7, #4]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b09      	cmp	r3, #9
 8010792:	f77f af65 	ble.w	8010660 <etharp_tmr+0xc>
      }
    }
  }
}
 8010796:	bf00      	nop
 8010798:	bf00      	nop
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	2001093c 	.word	0x2001093c

080107a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08a      	sub	sp, #40	; 0x28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	460b      	mov	r3, r1
 80107ae:	607a      	str	r2, [r7, #4]
 80107b0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80107b2:	230a      	movs	r3, #10
 80107b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80107b6:	230a      	movs	r3, #10
 80107b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80107ba:	230a      	movs	r3, #10
 80107bc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80107c2:	230a      	movs	r3, #10
 80107c4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80107c6:	2300      	movs	r3, #0
 80107c8:	83bb      	strh	r3, [r7, #28]
 80107ca:	2300      	movs	r3, #0
 80107cc:	837b      	strh	r3, [r7, #26]
 80107ce:	2300      	movs	r3, #0
 80107d0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107d2:	2300      	movs	r3, #0
 80107d4:	843b      	strh	r3, [r7, #32]
 80107d6:	e0ae      	b.n	8010936 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80107d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80107dc:	49a6      	ldr	r1, [pc, #664]	; (8010a78 <etharp_find_entry+0x2d4>)
 80107de:	4613      	mov	r3, r2
 80107e0:	005b      	lsls	r3, r3, #1
 80107e2:	4413      	add	r3, r2
 80107e4:	00db      	lsls	r3, r3, #3
 80107e6:	440b      	add	r3, r1
 80107e8:	3314      	adds	r3, #20
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80107ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80107f2:	2b0a      	cmp	r3, #10
 80107f4:	d105      	bne.n	8010802 <etharp_find_entry+0x5e>
 80107f6:	7dfb      	ldrb	r3, [r7, #23]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d102      	bne.n	8010802 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80107fc:	8c3b      	ldrh	r3, [r7, #32]
 80107fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8010800:	e095      	b.n	801092e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010802:	7dfb      	ldrb	r3, [r7, #23]
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8092 	beq.w	801092e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801080a:	7dfb      	ldrb	r3, [r7, #23]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d009      	beq.n	8010824 <etharp_find_entry+0x80>
 8010810:	7dfb      	ldrb	r3, [r7, #23]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d806      	bhi.n	8010824 <etharp_find_entry+0x80>
 8010816:	4b99      	ldr	r3, [pc, #612]	; (8010a7c <etharp_find_entry+0x2d8>)
 8010818:	f240 1223 	movw	r2, #291	; 0x123
 801081c:	4998      	ldr	r1, [pc, #608]	; (8010a80 <etharp_find_entry+0x2dc>)
 801081e:	4899      	ldr	r0, [pc, #612]	; (8010a84 <etharp_find_entry+0x2e0>)
 8010820:	f002 fbd2 	bl	8012fc8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d020      	beq.n	801086c <etharp_find_entry+0xc8>
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6819      	ldr	r1, [r3, #0]
 801082e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010832:	4891      	ldr	r0, [pc, #580]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010834:	4613      	mov	r3, r2
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	4413      	add	r3, r2
 801083a:	00db      	lsls	r3, r3, #3
 801083c:	4403      	add	r3, r0
 801083e:	3304      	adds	r3, #4
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	4299      	cmp	r1, r3
 8010844:	d112      	bne.n	801086c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d00c      	beq.n	8010866 <etharp_find_entry+0xc2>
 801084c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010850:	4989      	ldr	r1, [pc, #548]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010852:	4613      	mov	r3, r2
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	4413      	add	r3, r2
 8010858:	00db      	lsls	r3, r3, #3
 801085a:	440b      	add	r3, r1
 801085c:	3308      	adds	r3, #8
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	429a      	cmp	r2, r3
 8010864:	d102      	bne.n	801086c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010866:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801086a:	e100      	b.n	8010a6e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801086c:	7dfb      	ldrb	r3, [r7, #23]
 801086e:	2b01      	cmp	r3, #1
 8010870:	d140      	bne.n	80108f4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010876:	4980      	ldr	r1, [pc, #512]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010878:	4613      	mov	r3, r2
 801087a:	005b      	lsls	r3, r3, #1
 801087c:	4413      	add	r3, r2
 801087e:	00db      	lsls	r3, r3, #3
 8010880:	440b      	add	r3, r1
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d01a      	beq.n	80108be <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801088c:	497a      	ldr	r1, [pc, #488]	; (8010a78 <etharp_find_entry+0x2d4>)
 801088e:	4613      	mov	r3, r2
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	4413      	add	r3, r2
 8010894:	00db      	lsls	r3, r3, #3
 8010896:	440b      	add	r3, r1
 8010898:	3312      	adds	r3, #18
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	8bba      	ldrh	r2, [r7, #28]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d845      	bhi.n	801092e <etharp_find_entry+0x18a>
            old_queue = i;
 80108a2:	8c3b      	ldrh	r3, [r7, #32]
 80108a4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80108a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108aa:	4973      	ldr	r1, [pc, #460]	; (8010a78 <etharp_find_entry+0x2d4>)
 80108ac:	4613      	mov	r3, r2
 80108ae:	005b      	lsls	r3, r3, #1
 80108b0:	4413      	add	r3, r2
 80108b2:	00db      	lsls	r3, r3, #3
 80108b4:	440b      	add	r3, r1
 80108b6:	3312      	adds	r3, #18
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	83bb      	strh	r3, [r7, #28]
 80108bc:	e037      	b.n	801092e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80108be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108c2:	496d      	ldr	r1, [pc, #436]	; (8010a78 <etharp_find_entry+0x2d4>)
 80108c4:	4613      	mov	r3, r2
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	4413      	add	r3, r2
 80108ca:	00db      	lsls	r3, r3, #3
 80108cc:	440b      	add	r3, r1
 80108ce:	3312      	adds	r3, #18
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	8b7a      	ldrh	r2, [r7, #26]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d82a      	bhi.n	801092e <etharp_find_entry+0x18a>
            old_pending = i;
 80108d8:	8c3b      	ldrh	r3, [r7, #32]
 80108da:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80108dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108e0:	4965      	ldr	r1, [pc, #404]	; (8010a78 <etharp_find_entry+0x2d4>)
 80108e2:	4613      	mov	r3, r2
 80108e4:	005b      	lsls	r3, r3, #1
 80108e6:	4413      	add	r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	440b      	add	r3, r1
 80108ec:	3312      	adds	r3, #18
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	837b      	strh	r3, [r7, #26]
 80108f2:	e01c      	b.n	801092e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80108f4:	7dfb      	ldrb	r3, [r7, #23]
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d919      	bls.n	801092e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80108fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80108fe:	495e      	ldr	r1, [pc, #376]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010900:	4613      	mov	r3, r2
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	4413      	add	r3, r2
 8010906:	00db      	lsls	r3, r3, #3
 8010908:	440b      	add	r3, r1
 801090a:	3312      	adds	r3, #18
 801090c:	881b      	ldrh	r3, [r3, #0]
 801090e:	8b3a      	ldrh	r2, [r7, #24]
 8010910:	429a      	cmp	r2, r3
 8010912:	d80c      	bhi.n	801092e <etharp_find_entry+0x18a>
            old_stable = i;
 8010914:	8c3b      	ldrh	r3, [r7, #32]
 8010916:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801091c:	4956      	ldr	r1, [pc, #344]	; (8010a78 <etharp_find_entry+0x2d4>)
 801091e:	4613      	mov	r3, r2
 8010920:	005b      	lsls	r3, r3, #1
 8010922:	4413      	add	r3, r2
 8010924:	00db      	lsls	r3, r3, #3
 8010926:	440b      	add	r3, r1
 8010928:	3312      	adds	r3, #18
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801092e:	8c3b      	ldrh	r3, [r7, #32]
 8010930:	3301      	adds	r3, #1
 8010932:	b29b      	uxth	r3, r3
 8010934:	843b      	strh	r3, [r7, #32]
 8010936:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801093a:	2b09      	cmp	r3, #9
 801093c:	f77f af4c 	ble.w	80107d8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010940:	7afb      	ldrb	r3, [r7, #11]
 8010942:	f003 0302 	and.w	r3, r3, #2
 8010946:	2b00      	cmp	r3, #0
 8010948:	d108      	bne.n	801095c <etharp_find_entry+0x1b8>
 801094a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801094e:	2b0a      	cmp	r3, #10
 8010950:	d107      	bne.n	8010962 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010952:	7afb      	ldrb	r3, [r7, #11]
 8010954:	f003 0301 	and.w	r3, r3, #1
 8010958:	2b00      	cmp	r3, #0
 801095a:	d102      	bne.n	8010962 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801095c:	f04f 33ff 	mov.w	r3, #4294967295
 8010960:	e085      	b.n	8010a6e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010962:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010966:	2b09      	cmp	r3, #9
 8010968:	dc02      	bgt.n	8010970 <etharp_find_entry+0x1cc>
    i = empty;
 801096a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801096c:	843b      	strh	r3, [r7, #32]
 801096e:	e039      	b.n	80109e4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010970:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010974:	2b09      	cmp	r3, #9
 8010976:	dc14      	bgt.n	80109a2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801097a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801097c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010980:	493d      	ldr	r1, [pc, #244]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010982:	4613      	mov	r3, r2
 8010984:	005b      	lsls	r3, r3, #1
 8010986:	4413      	add	r3, r2
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	440b      	add	r3, r1
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d018      	beq.n	80109c4 <etharp_find_entry+0x220>
 8010992:	4b3a      	ldr	r3, [pc, #232]	; (8010a7c <etharp_find_entry+0x2d8>)
 8010994:	f240 126d 	movw	r2, #365	; 0x16d
 8010998:	493b      	ldr	r1, [pc, #236]	; (8010a88 <etharp_find_entry+0x2e4>)
 801099a:	483a      	ldr	r0, [pc, #232]	; (8010a84 <etharp_find_entry+0x2e0>)
 801099c:	f002 fb14 	bl	8012fc8 <iprintf>
 80109a0:	e010      	b.n	80109c4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80109a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80109a6:	2b09      	cmp	r3, #9
 80109a8:	dc02      	bgt.n	80109b0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80109aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80109ac:	843b      	strh	r3, [r7, #32]
 80109ae:	e009      	b.n	80109c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80109b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80109b4:	2b09      	cmp	r3, #9
 80109b6:	dc02      	bgt.n	80109be <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80109b8:	8bfb      	ldrh	r3, [r7, #30]
 80109ba:	843b      	strh	r3, [r7, #32]
 80109bc:	e002      	b.n	80109c4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80109be:	f04f 33ff 	mov.w	r3, #4294967295
 80109c2:	e054      	b.n	8010a6e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80109c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109c8:	2b09      	cmp	r3, #9
 80109ca:	dd06      	ble.n	80109da <etharp_find_entry+0x236>
 80109cc:	4b2b      	ldr	r3, [pc, #172]	; (8010a7c <etharp_find_entry+0x2d8>)
 80109ce:	f240 127f 	movw	r2, #383	; 0x17f
 80109d2:	492e      	ldr	r1, [pc, #184]	; (8010a8c <etharp_find_entry+0x2e8>)
 80109d4:	482b      	ldr	r0, [pc, #172]	; (8010a84 <etharp_find_entry+0x2e0>)
 80109d6:	f002 faf7 	bl	8012fc8 <iprintf>
    etharp_free_entry(i);
 80109da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff fe06 	bl	80105f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80109e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109e8:	2b09      	cmp	r3, #9
 80109ea:	dd06      	ble.n	80109fa <etharp_find_entry+0x256>
 80109ec:	4b23      	ldr	r3, [pc, #140]	; (8010a7c <etharp_find_entry+0x2d8>)
 80109ee:	f240 1283 	movw	r2, #387	; 0x183
 80109f2:	4926      	ldr	r1, [pc, #152]	; (8010a8c <etharp_find_entry+0x2e8>)
 80109f4:	4823      	ldr	r0, [pc, #140]	; (8010a84 <etharp_find_entry+0x2e0>)
 80109f6:	f002 fae7 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80109fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109fe:	491e      	ldr	r1, [pc, #120]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010a00:	4613      	mov	r3, r2
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	4413      	add	r3, r2
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	440b      	add	r3, r1
 8010a0a:	3314      	adds	r3, #20
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d006      	beq.n	8010a20 <etharp_find_entry+0x27c>
 8010a12:	4b1a      	ldr	r3, [pc, #104]	; (8010a7c <etharp_find_entry+0x2d8>)
 8010a14:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010a18:	491d      	ldr	r1, [pc, #116]	; (8010a90 <etharp_find_entry+0x2ec>)
 8010a1a:	481a      	ldr	r0, [pc, #104]	; (8010a84 <etharp_find_entry+0x2e0>)
 8010a1c:	f002 fad4 	bl	8012fc8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00b      	beq.n	8010a3e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010a26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6819      	ldr	r1, [r3, #0]
 8010a2e:	4812      	ldr	r0, [pc, #72]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010a30:	4613      	mov	r3, r2
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	4413      	add	r3, r2
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	4403      	add	r3, r0
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010a3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a42:	490d      	ldr	r1, [pc, #52]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010a44:	4613      	mov	r3, r2
 8010a46:	005b      	lsls	r3, r3, #1
 8010a48:	4413      	add	r3, r2
 8010a4a:	00db      	lsls	r3, r3, #3
 8010a4c:	440b      	add	r3, r1
 8010a4e:	3312      	adds	r3, #18
 8010a50:	2200      	movs	r2, #0
 8010a52:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010a54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a58:	4907      	ldr	r1, [pc, #28]	; (8010a78 <etharp_find_entry+0x2d4>)
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	005b      	lsls	r3, r3, #1
 8010a5e:	4413      	add	r3, r2
 8010a60:	00db      	lsls	r3, r3, #3
 8010a62:	440b      	add	r3, r1
 8010a64:	3308      	adds	r3, #8
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010a6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3728      	adds	r7, #40	; 0x28
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	2001093c 	.word	0x2001093c
 8010a7c:	080166dc 	.word	0x080166dc
 8010a80:	08016714 	.word	0x08016714
 8010a84:	08016754 	.word	0x08016754
 8010a88:	0801677c 	.word	0x0801677c
 8010a8c:	08016794 	.word	0x08016794
 8010a90:	080167a8 	.word	0x080167a8

08010a94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b088      	sub	sp, #32
 8010a98:	af02      	add	r7, sp, #8
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	607a      	str	r2, [r7, #4]
 8010aa0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010aa8:	2b06      	cmp	r3, #6
 8010aaa:	d006      	beq.n	8010aba <etharp_update_arp_entry+0x26>
 8010aac:	4b48      	ldr	r3, [pc, #288]	; (8010bd0 <etharp_update_arp_entry+0x13c>)
 8010aae:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010ab2:	4948      	ldr	r1, [pc, #288]	; (8010bd4 <etharp_update_arp_entry+0x140>)
 8010ab4:	4848      	ldr	r0, [pc, #288]	; (8010bd8 <etharp_update_arp_entry+0x144>)
 8010ab6:	f002 fa87 	bl	8012fc8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d012      	beq.n	8010ae6 <etharp_update_arp_entry+0x52>
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00e      	beq.n	8010ae6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	68f9      	ldr	r1, [r7, #12]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f001 f920 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 8010ad4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d105      	bne.n	8010ae6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ae2:	2be0      	cmp	r3, #224	; 0xe0
 8010ae4:	d102      	bne.n	8010aec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ae6:	f06f 030f 	mvn.w	r3, #15
 8010aea:	e06c      	b.n	8010bc6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010aec:	78fb      	ldrb	r3, [r7, #3]
 8010aee:	68fa      	ldr	r2, [r7, #12]
 8010af0:	4619      	mov	r1, r3
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f7ff fe56 	bl	80107a4 <etharp_find_entry>
 8010af8:	4603      	mov	r3, r0
 8010afa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010afc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	da02      	bge.n	8010b0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010b04:	8afb      	ldrh	r3, [r7, #22]
 8010b06:	b25b      	sxtb	r3, r3
 8010b08:	e05d      	b.n	8010bc6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010b0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b0e:	4933      	ldr	r1, [pc, #204]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b10:	4613      	mov	r3, r2
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	4413      	add	r3, r2
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	440b      	add	r3, r1
 8010b1a:	3314      	adds	r3, #20
 8010b1c:	2202      	movs	r2, #2
 8010b1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010b20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b24:	492d      	ldr	r1, [pc, #180]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b26:	4613      	mov	r3, r2
 8010b28:	005b      	lsls	r3, r3, #1
 8010b2a:	4413      	add	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	440b      	add	r3, r1
 8010b30:	3308      	adds	r3, #8
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010b36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	4413      	add	r3, r2
 8010b40:	00db      	lsls	r3, r3, #3
 8010b42:	3308      	adds	r3, #8
 8010b44:	4a25      	ldr	r2, [pc, #148]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b46:	4413      	add	r3, r2
 8010b48:	3304      	adds	r3, #4
 8010b4a:	2206      	movs	r2, #6
 8010b4c:	6879      	ldr	r1, [r7, #4]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f002 fb6a 	bl	8013228 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010b54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b58:	4920      	ldr	r1, [pc, #128]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	005b      	lsls	r3, r3, #1
 8010b5e:	4413      	add	r3, r2
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	440b      	add	r3, r1
 8010b64:	3312      	adds	r3, #18
 8010b66:	2200      	movs	r2, #0
 8010b68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010b6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b6e:	491b      	ldr	r1, [pc, #108]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b70:	4613      	mov	r3, r2
 8010b72:	005b      	lsls	r3, r3, #1
 8010b74:	4413      	add	r3, r2
 8010b76:	00db      	lsls	r3, r3, #3
 8010b78:	440b      	add	r3, r1
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d021      	beq.n	8010bc4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010b80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b84:	4915      	ldr	r1, [pc, #84]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b86:	4613      	mov	r3, r2
 8010b88:	005b      	lsls	r3, r3, #1
 8010b8a:	4413      	add	r3, r2
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	440b      	add	r3, r1
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010b94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010b98:	4910      	ldr	r1, [pc, #64]	; (8010bdc <etharp_update_arp_entry+0x148>)
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	005b      	lsls	r3, r3, #1
 8010b9e:	4413      	add	r3, r2
 8010ba0:	00db      	lsls	r3, r3, #3
 8010ba2:	440b      	add	r3, r1
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010bae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6939      	ldr	r1, [r7, #16]
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f001 ffb9 	bl	8012b30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010bbe:	6938      	ldr	r0, [r7, #16]
 8010bc0:	f7f7 fc84 	bl	80084cc <pbuf_free>
  }
  return ERR_OK;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	080166dc 	.word	0x080166dc
 8010bd4:	080167d4 	.word	0x080167d4
 8010bd8:	08016754 	.word	0x08016754
 8010bdc:	2001093c 	.word	0x2001093c

08010be0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010be8:	2300      	movs	r3, #0
 8010bea:	60fb      	str	r3, [r7, #12]
 8010bec:	e01e      	b.n	8010c2c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010bee:	4913      	ldr	r1, [pc, #76]	; (8010c3c <etharp_cleanup_netif+0x5c>)
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	005b      	lsls	r3, r3, #1
 8010bf6:	4413      	add	r3, r2
 8010bf8:	00db      	lsls	r3, r3, #3
 8010bfa:	440b      	add	r3, r1
 8010bfc:	3314      	adds	r3, #20
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010c02:	7afb      	ldrb	r3, [r7, #11]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00e      	beq.n	8010c26 <etharp_cleanup_netif+0x46>
 8010c08:	490c      	ldr	r1, [pc, #48]	; (8010c3c <etharp_cleanup_netif+0x5c>)
 8010c0a:	68fa      	ldr	r2, [r7, #12]
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	005b      	lsls	r3, r3, #1
 8010c10:	4413      	add	r3, r2
 8010c12:	00db      	lsls	r3, r3, #3
 8010c14:	440b      	add	r3, r1
 8010c16:	3308      	adds	r3, #8
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d102      	bne.n	8010c26 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7ff fce5 	bl	80105f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	60fb      	str	r3, [r7, #12]
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2b09      	cmp	r3, #9
 8010c30:	dddd      	ble.n	8010bee <etharp_cleanup_netif+0xe>
    }
  }
}
 8010c32:	bf00      	nop
 8010c34:	bf00      	nop
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}
 8010c3c:	2001093c 	.word	0x2001093c

08010c40 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010c40:	b5b0      	push	{r4, r5, r7, lr}
 8010c42:	b08a      	sub	sp, #40	; 0x28
 8010c44:	af04      	add	r7, sp, #16
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d107      	bne.n	8010c60 <etharp_input+0x20>
 8010c50:	4b3f      	ldr	r3, [pc, #252]	; (8010d50 <etharp_input+0x110>)
 8010c52:	f240 228a 	movw	r2, #650	; 0x28a
 8010c56:	493f      	ldr	r1, [pc, #252]	; (8010d54 <etharp_input+0x114>)
 8010c58:	483f      	ldr	r0, [pc, #252]	; (8010d58 <etharp_input+0x118>)
 8010c5a:	f002 f9b5 	bl	8012fc8 <iprintf>
 8010c5e:	e074      	b.n	8010d4a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c70:	d10c      	bne.n	8010c8c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010c76:	2b06      	cmp	r3, #6
 8010c78:	d108      	bne.n	8010c8c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010c7e:	2b04      	cmp	r3, #4
 8010c80:	d104      	bne.n	8010c8c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	885b      	ldrh	r3, [r3, #2]
 8010c86:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010c88:	2b08      	cmp	r3, #8
 8010c8a:	d003      	beq.n	8010c94 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7f7 fc1d 	bl	80084cc <pbuf_free>
    return;
 8010c92:	e05a      	b.n	8010d4a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	330e      	adds	r3, #14
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	3318      	adds	r3, #24
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	3304      	adds	r3, #4
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d102      	bne.n	8010cb4 <etharp_input+0x74>
    for_us = 0;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	75fb      	strb	r3, [r7, #23]
 8010cb2:	e009      	b.n	8010cc8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	3304      	adds	r3, #4
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	bf0c      	ite	eq
 8010cc0:	2301      	moveq	r3, #1
 8010cc2:	2300      	movne	r3, #0
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	f103 0208 	add.w	r2, r3, #8
 8010cce:	7dfb      	ldrb	r3, [r7, #23]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <etharp_input+0x98>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e000      	b.n	8010cda <etharp_input+0x9a>
 8010cd8:	2302      	movs	r3, #2
 8010cda:	f107 010c 	add.w	r1, r7, #12
 8010cde:	6838      	ldr	r0, [r7, #0]
 8010ce0:	f7ff fed8 	bl	8010a94 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	88db      	ldrh	r3, [r3, #6]
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cee:	d003      	beq.n	8010cf8 <etharp_input+0xb8>
 8010cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cf4:	d01e      	beq.n	8010d34 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010cf6:	e025      	b.n	8010d44 <etharp_input+0x104>
      if (for_us) {
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d021      	beq.n	8010d42 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010d18:	2102      	movs	r1, #2
 8010d1a:	9103      	str	r1, [sp, #12]
 8010d1c:	f107 010c 	add.w	r1, r7, #12
 8010d20:	9102      	str	r1, [sp, #8]
 8010d22:	9201      	str	r2, [sp, #4]
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	462b      	mov	r3, r5
 8010d28:	4622      	mov	r2, r4
 8010d2a:	4601      	mov	r1, r0
 8010d2c:	6838      	ldr	r0, [r7, #0]
 8010d2e:	f000 faef 	bl	8011310 <etharp_raw>
      break;
 8010d32:	e006      	b.n	8010d42 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010d34:	f107 030c 	add.w	r3, r7, #12
 8010d38:	4619      	mov	r1, r3
 8010d3a:	6838      	ldr	r0, [r7, #0]
 8010d3c:	f7fe f9fc 	bl	800f138 <dhcp_arp_reply>
      break;
 8010d40:	e000      	b.n	8010d44 <etharp_input+0x104>
      break;
 8010d42:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f7f7 fbc1 	bl	80084cc <pbuf_free>
}
 8010d4a:	3718      	adds	r7, #24
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8010d50:	080166dc 	.word	0x080166dc
 8010d54:	0801682c 	.word	0x0801682c
 8010d58:	08016754 	.word	0x08016754

08010d5c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b086      	sub	sp, #24
 8010d60:	af02      	add	r7, sp, #8
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	4613      	mov	r3, r2
 8010d68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010d6a:	79fa      	ldrb	r2, [r7, #7]
 8010d6c:	4944      	ldr	r1, [pc, #272]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010d6e:	4613      	mov	r3, r2
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	00db      	lsls	r3, r3, #3
 8010d76:	440b      	add	r3, r1
 8010d78:	3314      	adds	r3, #20
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d806      	bhi.n	8010d8e <etharp_output_to_arp_index+0x32>
 8010d80:	4b40      	ldr	r3, [pc, #256]	; (8010e84 <etharp_output_to_arp_index+0x128>)
 8010d82:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010d86:	4940      	ldr	r1, [pc, #256]	; (8010e88 <etharp_output_to_arp_index+0x12c>)
 8010d88:	4840      	ldr	r0, [pc, #256]	; (8010e8c <etharp_output_to_arp_index+0x130>)
 8010d8a:	f002 f91d 	bl	8012fc8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010d8e:	79fa      	ldrb	r2, [r7, #7]
 8010d90:	493b      	ldr	r1, [pc, #236]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010d92:	4613      	mov	r3, r2
 8010d94:	005b      	lsls	r3, r3, #1
 8010d96:	4413      	add	r3, r2
 8010d98:	00db      	lsls	r3, r3, #3
 8010d9a:	440b      	add	r3, r1
 8010d9c:	3314      	adds	r3, #20
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d153      	bne.n	8010e4c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010da4:	79fa      	ldrb	r2, [r7, #7]
 8010da6:	4936      	ldr	r1, [pc, #216]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	00db      	lsls	r3, r3, #3
 8010db0:	440b      	add	r3, r1
 8010db2:	3312      	adds	r3, #18
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010dba:	d919      	bls.n	8010df0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010dbc:	79fa      	ldrb	r2, [r7, #7]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	4413      	add	r3, r2
 8010dc4:	00db      	lsls	r3, r3, #3
 8010dc6:	4a2e      	ldr	r2, [pc, #184]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010dc8:	4413      	add	r3, r2
 8010dca:	3304      	adds	r3, #4
 8010dcc:	4619      	mov	r1, r3
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f000 fb4c 	bl	801146c <etharp_request>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d138      	bne.n	8010e4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010dda:	79fa      	ldrb	r2, [r7, #7]
 8010ddc:	4928      	ldr	r1, [pc, #160]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010dde:	4613      	mov	r3, r2
 8010de0:	005b      	lsls	r3, r3, #1
 8010de2:	4413      	add	r3, r2
 8010de4:	00db      	lsls	r3, r3, #3
 8010de6:	440b      	add	r3, r1
 8010de8:	3314      	adds	r3, #20
 8010dea:	2203      	movs	r2, #3
 8010dec:	701a      	strb	r2, [r3, #0]
 8010dee:	e02d      	b.n	8010e4c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010df0:	79fa      	ldrb	r2, [r7, #7]
 8010df2:	4923      	ldr	r1, [pc, #140]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010df4:	4613      	mov	r3, r2
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	4413      	add	r3, r2
 8010dfa:	00db      	lsls	r3, r3, #3
 8010dfc:	440b      	add	r3, r1
 8010dfe:	3312      	adds	r3, #18
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010e06:	d321      	bcc.n	8010e4c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010e08:	79fa      	ldrb	r2, [r7, #7]
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	4a1b      	ldr	r2, [pc, #108]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010e14:	4413      	add	r3, r2
 8010e16:	1d19      	adds	r1, r3, #4
 8010e18:	79fa      	ldrb	r2, [r7, #7]
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	4413      	add	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	3308      	adds	r3, #8
 8010e24:	4a16      	ldr	r2, [pc, #88]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010e26:	4413      	add	r3, r2
 8010e28:	3304      	adds	r3, #4
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	68f8      	ldr	r0, [r7, #12]
 8010e2e:	f000 fafb 	bl	8011428 <etharp_request_dst>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d109      	bne.n	8010e4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010e38:	79fa      	ldrb	r2, [r7, #7]
 8010e3a:	4911      	ldr	r1, [pc, #68]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010e3c:	4613      	mov	r3, r2
 8010e3e:	005b      	lsls	r3, r3, #1
 8010e40:	4413      	add	r3, r2
 8010e42:	00db      	lsls	r3, r3, #3
 8010e44:	440b      	add	r3, r1
 8010e46:	3314      	adds	r3, #20
 8010e48:	2203      	movs	r2, #3
 8010e4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8010e52:	79fa      	ldrb	r2, [r7, #7]
 8010e54:	4613      	mov	r3, r2
 8010e56:	005b      	lsls	r3, r3, #1
 8010e58:	4413      	add	r3, r2
 8010e5a:	00db      	lsls	r3, r3, #3
 8010e5c:	3308      	adds	r3, #8
 8010e5e:	4a08      	ldr	r2, [pc, #32]	; (8010e80 <etharp_output_to_arp_index+0x124>)
 8010e60:	4413      	add	r3, r2
 8010e62:	3304      	adds	r3, #4
 8010e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e68:	9200      	str	r2, [sp, #0]
 8010e6a:	460a      	mov	r2, r1
 8010e6c:	68b9      	ldr	r1, [r7, #8]
 8010e6e:	68f8      	ldr	r0, [r7, #12]
 8010e70:	f001 fe5e 	bl	8012b30 <ethernet_output>
 8010e74:	4603      	mov	r3, r0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3710      	adds	r7, #16
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	2001093c 	.word	0x2001093c
 8010e84:	080166dc 	.word	0x080166dc
 8010e88:	0801684c 	.word	0x0801684c
 8010e8c:	08016754 	.word	0x08016754

08010e90 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b08a      	sub	sp, #40	; 0x28
 8010e94:	af02      	add	r7, sp, #8
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <etharp_output+0x24>
 8010ea6:	4b73      	ldr	r3, [pc, #460]	; (8011074 <etharp_output+0x1e4>)
 8010ea8:	f240 321e 	movw	r2, #798	; 0x31e
 8010eac:	4972      	ldr	r1, [pc, #456]	; (8011078 <etharp_output+0x1e8>)
 8010eae:	4873      	ldr	r0, [pc, #460]	; (801107c <etharp_output+0x1ec>)
 8010eb0:	f002 f88a 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d106      	bne.n	8010ec8 <etharp_output+0x38>
 8010eba:	4b6e      	ldr	r3, [pc, #440]	; (8011074 <etharp_output+0x1e4>)
 8010ebc:	f240 321f 	movw	r2, #799	; 0x31f
 8010ec0:	496f      	ldr	r1, [pc, #444]	; (8011080 <etharp_output+0x1f0>)
 8010ec2:	486e      	ldr	r0, [pc, #440]	; (801107c <etharp_output+0x1ec>)
 8010ec4:	f002 f880 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <etharp_output+0x4c>
 8010ece:	4b69      	ldr	r3, [pc, #420]	; (8011074 <etharp_output+0x1e4>)
 8010ed0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010ed4:	496b      	ldr	r1, [pc, #428]	; (8011084 <etharp_output+0x1f4>)
 8010ed6:	4869      	ldr	r0, [pc, #420]	; (801107c <etharp_output+0x1ec>)
 8010ed8:	f002 f876 	bl	8012fc8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68f9      	ldr	r1, [r7, #12]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f000 ff16 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010eee:	4b66      	ldr	r3, [pc, #408]	; (8011088 <etharp_output+0x1f8>)
 8010ef0:	61fb      	str	r3, [r7, #28]
 8010ef2:	e0af      	b.n	8011054 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010efc:	2be0      	cmp	r3, #224	; 0xe0
 8010efe:	d118      	bne.n	8010f32 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010f00:	2301      	movs	r3, #1
 8010f02:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010f04:	2300      	movs	r3, #0
 8010f06:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010f08:	235e      	movs	r3, #94	; 0x5e
 8010f0a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3302      	adds	r3, #2
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	3303      	adds	r3, #3
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010f2a:	f107 0310 	add.w	r3, r7, #16
 8010f2e:	61fb      	str	r3, [r7, #28]
 8010f30:	e090      	b.n	8011054 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	3304      	adds	r3, #4
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	405a      	eors	r2, r3
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	3308      	adds	r3, #8
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4013      	ands	r3, r2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d012      	beq.n	8010f70 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010f50:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d00b      	beq.n	8010f70 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	330c      	adds	r3, #12
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d003      	beq.n	8010f6a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	330c      	adds	r3, #12
 8010f66:	61bb      	str	r3, [r7, #24]
 8010f68:	e002      	b.n	8010f70 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010f6a:	f06f 0303 	mvn.w	r3, #3
 8010f6e:	e07d      	b.n	801106c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010f70:	4b46      	ldr	r3, [pc, #280]	; (801108c <etharp_output+0x1fc>)
 8010f72:	781b      	ldrb	r3, [r3, #0]
 8010f74:	4619      	mov	r1, r3
 8010f76:	4a46      	ldr	r2, [pc, #280]	; (8011090 <etharp_output+0x200>)
 8010f78:	460b      	mov	r3, r1
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	440b      	add	r3, r1
 8010f7e:	00db      	lsls	r3, r3, #3
 8010f80:	4413      	add	r3, r2
 8010f82:	3314      	adds	r3, #20
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d925      	bls.n	8010fd6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010f8a:	4b40      	ldr	r3, [pc, #256]	; (801108c <etharp_output+0x1fc>)
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	4a3f      	ldr	r2, [pc, #252]	; (8011090 <etharp_output+0x200>)
 8010f92:	460b      	mov	r3, r1
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	440b      	add	r3, r1
 8010f98:	00db      	lsls	r3, r3, #3
 8010f9a:	4413      	add	r3, r2
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d117      	bne.n	8010fd6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	681a      	ldr	r2, [r3, #0]
 8010faa:	4b38      	ldr	r3, [pc, #224]	; (801108c <etharp_output+0x1fc>)
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	4618      	mov	r0, r3
 8010fb0:	4937      	ldr	r1, [pc, #220]	; (8011090 <etharp_output+0x200>)
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	4403      	add	r3, r0
 8010fb8:	00db      	lsls	r3, r3, #3
 8010fba:	440b      	add	r3, r1
 8010fbc:	3304      	adds	r3, #4
 8010fbe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d108      	bne.n	8010fd6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010fc4:	4b31      	ldr	r3, [pc, #196]	; (801108c <etharp_output+0x1fc>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	461a      	mov	r2, r3
 8010fca:	68b9      	ldr	r1, [r7, #8]
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	f7ff fec5 	bl	8010d5c <etharp_output_to_arp_index>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	e04a      	b.n	801106c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	75fb      	strb	r3, [r7, #23]
 8010fda:	e031      	b.n	8011040 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010fdc:	7dfa      	ldrb	r2, [r7, #23]
 8010fde:	492c      	ldr	r1, [pc, #176]	; (8011090 <etharp_output+0x200>)
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	4413      	add	r3, r2
 8010fe6:	00db      	lsls	r3, r3, #3
 8010fe8:	440b      	add	r3, r1
 8010fea:	3314      	adds	r3, #20
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d923      	bls.n	801103a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010ff2:	7dfa      	ldrb	r2, [r7, #23]
 8010ff4:	4926      	ldr	r1, [pc, #152]	; (8011090 <etharp_output+0x200>)
 8010ff6:	4613      	mov	r3, r2
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	4413      	add	r3, r2
 8010ffc:	00db      	lsls	r3, r3, #3
 8010ffe:	440b      	add	r3, r1
 8011000:	3308      	adds	r3, #8
 8011002:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011004:	68fa      	ldr	r2, [r7, #12]
 8011006:	429a      	cmp	r2, r3
 8011008:	d117      	bne.n	801103a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801100a:	69bb      	ldr	r3, [r7, #24]
 801100c:	6819      	ldr	r1, [r3, #0]
 801100e:	7dfa      	ldrb	r2, [r7, #23]
 8011010:	481f      	ldr	r0, [pc, #124]	; (8011090 <etharp_output+0x200>)
 8011012:	4613      	mov	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	4403      	add	r3, r0
 801101c:	3304      	adds	r3, #4
 801101e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011020:	4299      	cmp	r1, r3
 8011022:	d10a      	bne.n	801103a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011024:	4a19      	ldr	r2, [pc, #100]	; (801108c <etharp_output+0x1fc>)
 8011026:	7dfb      	ldrb	r3, [r7, #23]
 8011028:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801102a:	7dfb      	ldrb	r3, [r7, #23]
 801102c:	461a      	mov	r2, r3
 801102e:	68b9      	ldr	r1, [r7, #8]
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f7ff fe93 	bl	8010d5c <etharp_output_to_arp_index>
 8011036:	4603      	mov	r3, r0
 8011038:	e018      	b.n	801106c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801103a:	7dfb      	ldrb	r3, [r7, #23]
 801103c:	3301      	adds	r3, #1
 801103e:	75fb      	strb	r3, [r7, #23]
 8011040:	7dfb      	ldrb	r3, [r7, #23]
 8011042:	2b09      	cmp	r3, #9
 8011044:	d9ca      	bls.n	8010fdc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011046:	68ba      	ldr	r2, [r7, #8]
 8011048:	69b9      	ldr	r1, [r7, #24]
 801104a:	68f8      	ldr	r0, [r7, #12]
 801104c:	f000 f822 	bl	8011094 <etharp_query>
 8011050:	4603      	mov	r3, r0
 8011052:	e00b      	b.n	801106c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801105a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	69fb      	ldr	r3, [r7, #28]
 8011062:	68b9      	ldr	r1, [r7, #8]
 8011064:	68f8      	ldr	r0, [r7, #12]
 8011066:	f001 fd63 	bl	8012b30 <ethernet_output>
 801106a:	4603      	mov	r3, r0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3720      	adds	r7, #32
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	080166dc 	.word	0x080166dc
 8011078:	0801682c 	.word	0x0801682c
 801107c:	08016754 	.word	0x08016754
 8011080:	0801687c 	.word	0x0801687c
 8011084:	0801681c 	.word	0x0801681c
 8011088:	08016eec 	.word	0x08016eec
 801108c:	20010a2c 	.word	0x20010a2c
 8011090:	2001093c 	.word	0x2001093c

08011094 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08c      	sub	sp, #48	; 0x30
 8011098:	af02      	add	r7, sp, #8
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	332a      	adds	r3, #42	; 0x2a
 80110a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80110a6:	23ff      	movs	r3, #255	; 0xff
 80110a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68f9      	ldr	r1, [r7, #12]
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 fe2c 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10c      	bne.n	80110dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80110ca:	2be0      	cmp	r3, #224	; 0xe0
 80110cc:	d006      	beq.n	80110dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d003      	beq.n	80110dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d102      	bne.n	80110e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80110dc:	f06f 030f 	mvn.w	r3, #15
 80110e0:	e101      	b.n	80112e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80110e2:	68fa      	ldr	r2, [r7, #12]
 80110e4:	2101      	movs	r1, #1
 80110e6:	68b8      	ldr	r0, [r7, #8]
 80110e8:	f7ff fb5c 	bl	80107a4 <etharp_find_entry>
 80110ec:	4603      	mov	r3, r0
 80110ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80110f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	da02      	bge.n	80110fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80110f8:	8a7b      	ldrh	r3, [r7, #18]
 80110fa:	b25b      	sxtb	r3, r3
 80110fc:	e0f3      	b.n	80112e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80110fe:	8a7b      	ldrh	r3, [r7, #18]
 8011100:	2b7e      	cmp	r3, #126	; 0x7e
 8011102:	d906      	bls.n	8011112 <etharp_query+0x7e>
 8011104:	4b7a      	ldr	r3, [pc, #488]	; (80112f0 <etharp_query+0x25c>)
 8011106:	f240 32c1 	movw	r2, #961	; 0x3c1
 801110a:	497a      	ldr	r1, [pc, #488]	; (80112f4 <etharp_query+0x260>)
 801110c:	487a      	ldr	r0, [pc, #488]	; (80112f8 <etharp_query+0x264>)
 801110e:	f001 ff5b 	bl	8012fc8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011112:	8a7b      	ldrh	r3, [r7, #18]
 8011114:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011116:	7c7a      	ldrb	r2, [r7, #17]
 8011118:	4978      	ldr	r1, [pc, #480]	; (80112fc <etharp_query+0x268>)
 801111a:	4613      	mov	r3, r2
 801111c:	005b      	lsls	r3, r3, #1
 801111e:	4413      	add	r3, r2
 8011120:	00db      	lsls	r3, r3, #3
 8011122:	440b      	add	r3, r1
 8011124:	3314      	adds	r3, #20
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d115      	bne.n	8011158 <etharp_query+0xc4>
    is_new_entry = 1;
 801112c:	2301      	movs	r3, #1
 801112e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011130:	7c7a      	ldrb	r2, [r7, #17]
 8011132:	4972      	ldr	r1, [pc, #456]	; (80112fc <etharp_query+0x268>)
 8011134:	4613      	mov	r3, r2
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	00db      	lsls	r3, r3, #3
 801113c:	440b      	add	r3, r1
 801113e:	3314      	adds	r3, #20
 8011140:	2201      	movs	r2, #1
 8011142:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011144:	7c7a      	ldrb	r2, [r7, #17]
 8011146:	496d      	ldr	r1, [pc, #436]	; (80112fc <etharp_query+0x268>)
 8011148:	4613      	mov	r3, r2
 801114a:	005b      	lsls	r3, r3, #1
 801114c:	4413      	add	r3, r2
 801114e:	00db      	lsls	r3, r3, #3
 8011150:	440b      	add	r3, r1
 8011152:	3308      	adds	r3, #8
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011158:	7c7a      	ldrb	r2, [r7, #17]
 801115a:	4968      	ldr	r1, [pc, #416]	; (80112fc <etharp_query+0x268>)
 801115c:	4613      	mov	r3, r2
 801115e:	005b      	lsls	r3, r3, #1
 8011160:	4413      	add	r3, r2
 8011162:	00db      	lsls	r3, r3, #3
 8011164:	440b      	add	r3, r1
 8011166:	3314      	adds	r3, #20
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	2b01      	cmp	r3, #1
 801116c:	d011      	beq.n	8011192 <etharp_query+0xfe>
 801116e:	7c7a      	ldrb	r2, [r7, #17]
 8011170:	4962      	ldr	r1, [pc, #392]	; (80112fc <etharp_query+0x268>)
 8011172:	4613      	mov	r3, r2
 8011174:	005b      	lsls	r3, r3, #1
 8011176:	4413      	add	r3, r2
 8011178:	00db      	lsls	r3, r3, #3
 801117a:	440b      	add	r3, r1
 801117c:	3314      	adds	r3, #20
 801117e:	781b      	ldrb	r3, [r3, #0]
 8011180:	2b01      	cmp	r3, #1
 8011182:	d806      	bhi.n	8011192 <etharp_query+0xfe>
 8011184:	4b5a      	ldr	r3, [pc, #360]	; (80112f0 <etharp_query+0x25c>)
 8011186:	f240 32cd 	movw	r2, #973	; 0x3cd
 801118a:	495d      	ldr	r1, [pc, #372]	; (8011300 <etharp_query+0x26c>)
 801118c:	485a      	ldr	r0, [pc, #360]	; (80112f8 <etharp_query+0x264>)
 801118e:	f001 ff1b 	bl	8012fc8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011192:	6a3b      	ldr	r3, [r7, #32]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d102      	bne.n	801119e <etharp_query+0x10a>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d10c      	bne.n	80111b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801119e:	68b9      	ldr	r1, [r7, #8]
 80111a0:	68f8      	ldr	r0, [r7, #12]
 80111a2:	f000 f963 	bl	801146c <etharp_request>
 80111a6:	4603      	mov	r3, r0
 80111a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d102      	bne.n	80111b8 <etharp_query+0x124>
      return result;
 80111b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111b6:	e096      	b.n	80112e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <etharp_query+0x138>
 80111be:	4b4c      	ldr	r3, [pc, #304]	; (80112f0 <etharp_query+0x25c>)
 80111c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80111c4:	494f      	ldr	r1, [pc, #316]	; (8011304 <etharp_query+0x270>)
 80111c6:	484c      	ldr	r0, [pc, #304]	; (80112f8 <etharp_query+0x264>)
 80111c8:	f001 fefe 	bl	8012fc8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80111cc:	7c7a      	ldrb	r2, [r7, #17]
 80111ce:	494b      	ldr	r1, [pc, #300]	; (80112fc <etharp_query+0x268>)
 80111d0:	4613      	mov	r3, r2
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	4413      	add	r3, r2
 80111d6:	00db      	lsls	r3, r3, #3
 80111d8:	440b      	add	r3, r1
 80111da:	3314      	adds	r3, #20
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d917      	bls.n	8011212 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80111e2:	4a49      	ldr	r2, [pc, #292]	; (8011308 <etharp_query+0x274>)
 80111e4:	7c7b      	ldrb	r3, [r7, #17]
 80111e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80111e8:	7c7a      	ldrb	r2, [r7, #17]
 80111ea:	4613      	mov	r3, r2
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	4413      	add	r3, r2
 80111f0:	00db      	lsls	r3, r3, #3
 80111f2:	3308      	adds	r3, #8
 80111f4:	4a41      	ldr	r2, [pc, #260]	; (80112fc <etharp_query+0x268>)
 80111f6:	4413      	add	r3, r2
 80111f8:	3304      	adds	r3, #4
 80111fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80111fe:	9200      	str	r2, [sp, #0]
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f001 fc93 	bl	8012b30 <ethernet_output>
 801120a:	4603      	mov	r3, r0
 801120c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011210:	e067      	b.n	80112e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011212:	7c7a      	ldrb	r2, [r7, #17]
 8011214:	4939      	ldr	r1, [pc, #228]	; (80112fc <etharp_query+0x268>)
 8011216:	4613      	mov	r3, r2
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	4413      	add	r3, r2
 801121c:	00db      	lsls	r3, r3, #3
 801121e:	440b      	add	r3, r1
 8011220:	3314      	adds	r3, #20
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d15c      	bne.n	80112e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011228:	2300      	movs	r3, #0
 801122a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011230:	e01c      	b.n	801126c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	895a      	ldrh	r2, [r3, #10]
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	891b      	ldrh	r3, [r3, #8]
 801123a:	429a      	cmp	r2, r3
 801123c:	d10a      	bne.n	8011254 <etharp_query+0x1c0>
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d006      	beq.n	8011254 <etharp_query+0x1c0>
 8011246:	4b2a      	ldr	r3, [pc, #168]	; (80112f0 <etharp_query+0x25c>)
 8011248:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801124c:	492f      	ldr	r1, [pc, #188]	; (801130c <etharp_query+0x278>)
 801124e:	482a      	ldr	r0, [pc, #168]	; (80112f8 <etharp_query+0x264>)
 8011250:	f001 feba 	bl	8012fc8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	7b1b      	ldrb	r3, [r3, #12]
 8011258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801125c:	2b00      	cmp	r3, #0
 801125e:	d002      	beq.n	8011266 <etharp_query+0x1d2>
        copy_needed = 1;
 8011260:	2301      	movs	r3, #1
 8011262:	61bb      	str	r3, [r7, #24]
        break;
 8011264:	e005      	b.n	8011272 <etharp_query+0x1de>
      }
      p = p->next;
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d1df      	bne.n	8011232 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d007      	beq.n	8011288 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801127e:	200e      	movs	r0, #14
 8011280:	f7f7 fb9c 	bl	80089bc <pbuf_clone>
 8011284:	61f8      	str	r0, [r7, #28]
 8011286:	e004      	b.n	8011292 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801128c:	69f8      	ldr	r0, [r7, #28]
 801128e:	f7f7 f9c3 	bl	8008618 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d021      	beq.n	80112dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011298:	7c7a      	ldrb	r2, [r7, #17]
 801129a:	4918      	ldr	r1, [pc, #96]	; (80112fc <etharp_query+0x268>)
 801129c:	4613      	mov	r3, r2
 801129e:	005b      	lsls	r3, r3, #1
 80112a0:	4413      	add	r3, r2
 80112a2:	00db      	lsls	r3, r3, #3
 80112a4:	440b      	add	r3, r1
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00a      	beq.n	80112c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80112ac:	7c7a      	ldrb	r2, [r7, #17]
 80112ae:	4913      	ldr	r1, [pc, #76]	; (80112fc <etharp_query+0x268>)
 80112b0:	4613      	mov	r3, r2
 80112b2:	005b      	lsls	r3, r3, #1
 80112b4:	4413      	add	r3, r2
 80112b6:	00db      	lsls	r3, r3, #3
 80112b8:	440b      	add	r3, r1
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4618      	mov	r0, r3
 80112be:	f7f7 f905 	bl	80084cc <pbuf_free>
      }
      arp_table[i].q = p;
 80112c2:	7c7a      	ldrb	r2, [r7, #17]
 80112c4:	490d      	ldr	r1, [pc, #52]	; (80112fc <etharp_query+0x268>)
 80112c6:	4613      	mov	r3, r2
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	4413      	add	r3, r2
 80112cc:	00db      	lsls	r3, r3, #3
 80112ce:	440b      	add	r3, r1
 80112d0:	69fa      	ldr	r2, [r7, #28]
 80112d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80112da:	e002      	b.n	80112e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80112dc:	23ff      	movs	r3, #255	; 0xff
 80112de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80112e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3728      	adds	r7, #40	; 0x28
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	080166dc 	.word	0x080166dc
 80112f4:	08016888 	.word	0x08016888
 80112f8:	08016754 	.word	0x08016754
 80112fc:	2001093c 	.word	0x2001093c
 8011300:	08016898 	.word	0x08016898
 8011304:	0801687c 	.word	0x0801687c
 8011308:	20010a2c 	.word	0x20010a2c
 801130c:	080168c0 	.word	0x080168c0

08011310 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b08a      	sub	sp, #40	; 0x28
 8011314:	af02      	add	r7, sp, #8
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801131e:	2300      	movs	r3, #0
 8011320:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d106      	bne.n	8011336 <etharp_raw+0x26>
 8011328:	4b3a      	ldr	r3, [pc, #232]	; (8011414 <etharp_raw+0x104>)
 801132a:	f240 4257 	movw	r2, #1111	; 0x457
 801132e:	493a      	ldr	r1, [pc, #232]	; (8011418 <etharp_raw+0x108>)
 8011330:	483a      	ldr	r0, [pc, #232]	; (801141c <etharp_raw+0x10c>)
 8011332:	f001 fe49 	bl	8012fc8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011336:	f44f 7220 	mov.w	r2, #640	; 0x280
 801133a:	211c      	movs	r1, #28
 801133c:	200e      	movs	r0, #14
 801133e:	f7f6 fde1 	bl	8007f04 <pbuf_alloc>
 8011342:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d102      	bne.n	8011350 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801134a:	f04f 33ff 	mov.w	r3, #4294967295
 801134e:	e05d      	b.n	801140c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	895b      	ldrh	r3, [r3, #10]
 8011354:	2b1b      	cmp	r3, #27
 8011356:	d806      	bhi.n	8011366 <etharp_raw+0x56>
 8011358:	4b2e      	ldr	r3, [pc, #184]	; (8011414 <etharp_raw+0x104>)
 801135a:	f240 4262 	movw	r2, #1122	; 0x462
 801135e:	4930      	ldr	r1, [pc, #192]	; (8011420 <etharp_raw+0x110>)
 8011360:	482e      	ldr	r0, [pc, #184]	; (801141c <etharp_raw+0x10c>)
 8011362:	f001 fe31 	bl	8012fc8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011366:	69bb      	ldr	r3, [r7, #24]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801136c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801136e:	4618      	mov	r0, r3
 8011370:	f7f5 fd16 	bl	8006da0 <lwip_htons>
 8011374:	4603      	mov	r3, r0
 8011376:	461a      	mov	r2, r3
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011382:	2b06      	cmp	r3, #6
 8011384:	d006      	beq.n	8011394 <etharp_raw+0x84>
 8011386:	4b23      	ldr	r3, [pc, #140]	; (8011414 <etharp_raw+0x104>)
 8011388:	f240 4269 	movw	r2, #1129	; 0x469
 801138c:	4925      	ldr	r1, [pc, #148]	; (8011424 <etharp_raw+0x114>)
 801138e:	4823      	ldr	r0, [pc, #140]	; (801141c <etharp_raw+0x10c>)
 8011390:	f001 fe1a 	bl	8012fc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	3308      	adds	r3, #8
 8011398:	2206      	movs	r2, #6
 801139a:	6839      	ldr	r1, [r7, #0]
 801139c:	4618      	mov	r0, r3
 801139e:	f001 ff43 	bl	8013228 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	3312      	adds	r3, #18
 80113a6:	2206      	movs	r2, #6
 80113a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113aa:	4618      	mov	r0, r3
 80113ac:	f001 ff3c 	bl	8013228 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	330e      	adds	r3, #14
 80113b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113b6:	6812      	ldr	r2, [r2, #0]
 80113b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	3318      	adds	r3, #24
 80113be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113c0:	6812      	ldr	r2, [r2, #0]
 80113c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2200      	movs	r2, #0
 80113c8:	701a      	strb	r2, [r3, #0]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f042 0201 	orr.w	r2, r2, #1
 80113d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f042 0208 	orr.w	r2, r2, #8
 80113da:	709a      	strb	r2, [r3, #2]
 80113dc:	2200      	movs	r2, #0
 80113de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	2206      	movs	r2, #6
 80113e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	2204      	movs	r2, #4
 80113ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80113ec:	f640 0306 	movw	r3, #2054	; 0x806
 80113f0:	9300      	str	r3, [sp, #0]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	68ba      	ldr	r2, [r7, #8]
 80113f6:	69b9      	ldr	r1, [r7, #24]
 80113f8:	68f8      	ldr	r0, [r7, #12]
 80113fa:	f001 fb99 	bl	8012b30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80113fe:	69b8      	ldr	r0, [r7, #24]
 8011400:	f7f7 f864 	bl	80084cc <pbuf_free>
  p = NULL;
 8011404:	2300      	movs	r3, #0
 8011406:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011408:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3720      	adds	r7, #32
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	080166dc 	.word	0x080166dc
 8011418:	0801682c 	.word	0x0801682c
 801141c:	08016754 	.word	0x08016754
 8011420:	080168dc 	.word	0x080168dc
 8011424:	08016910 	.word	0x08016910

08011428 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b088      	sub	sp, #32
 801142c:	af04      	add	r7, sp, #16
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011444:	2201      	movs	r2, #1
 8011446:	9203      	str	r2, [sp, #12]
 8011448:	68ba      	ldr	r2, [r7, #8]
 801144a:	9202      	str	r2, [sp, #8]
 801144c:	4a06      	ldr	r2, [pc, #24]	; (8011468 <etharp_request_dst+0x40>)
 801144e:	9201      	str	r2, [sp, #4]
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	4603      	mov	r3, r0
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	f7ff ff5a 	bl	8011310 <etharp_raw>
 801145c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801145e:	4618      	mov	r0, r3
 8011460:	3710      	adds	r7, #16
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	08016ef4 	.word	0x08016ef4

0801146c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011476:	4a05      	ldr	r2, [pc, #20]	; (801148c <etharp_request+0x20>)
 8011478:	6839      	ldr	r1, [r7, #0]
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7ff ffd4 	bl	8011428 <etharp_request_dst>
 8011480:	4603      	mov	r3, r0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	08016eec 	.word	0x08016eec

08011490 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b08e      	sub	sp, #56	; 0x38
 8011494:	af04      	add	r7, sp, #16
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801149a:	4b79      	ldr	r3, [pc, #484]	; (8011680 <icmp_input+0x1f0>)
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80114a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	f003 030f 	and.w	r3, r3, #15
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80114b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114b2:	2b13      	cmp	r3, #19
 80114b4:	f240 80cd 	bls.w	8011652 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	895b      	ldrh	r3, [r3, #10]
 80114bc:	2b03      	cmp	r3, #3
 80114be:	f240 80ca 	bls.w	8011656 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80114cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 80b7 	beq.w	8011644 <icmp_input+0x1b4>
 80114d6:	2b08      	cmp	r3, #8
 80114d8:	f040 80b7 	bne.w	801164a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80114dc:	4b69      	ldr	r3, [pc, #420]	; (8011684 <icmp_input+0x1f4>)
 80114de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80114e0:	4b67      	ldr	r3, [pc, #412]	; (8011680 <icmp_input+0x1f0>)
 80114e2:	695b      	ldr	r3, [r3, #20]
 80114e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80114e8:	2be0      	cmp	r3, #224	; 0xe0
 80114ea:	f000 80bb 	beq.w	8011664 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80114ee:	4b64      	ldr	r3, [pc, #400]	; (8011680 <icmp_input+0x1f0>)
 80114f0:	695b      	ldr	r3, [r3, #20]
 80114f2:	4a63      	ldr	r2, [pc, #396]	; (8011680 <icmp_input+0x1f0>)
 80114f4:	6812      	ldr	r2, [r2, #0]
 80114f6:	4611      	mov	r1, r2
 80114f8:	4618      	mov	r0, r3
 80114fa:	f000 fc0b 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	f040 80b1 	bne.w	8011668 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	891b      	ldrh	r3, [r3, #8]
 801150a:	2b07      	cmp	r3, #7
 801150c:	f240 80a5 	bls.w	801165a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011510:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011512:	330e      	adds	r3, #14
 8011514:	4619      	mov	r1, r3
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f7f6 ff42 	bl	80083a0 <pbuf_add_header>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	d04b      	beq.n	80115ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	891a      	ldrh	r2, [r3, #8]
 8011526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011528:	4413      	add	r3, r2
 801152a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	891b      	ldrh	r3, [r3, #8]
 8011530:	8b7a      	ldrh	r2, [r7, #26]
 8011532:	429a      	cmp	r2, r3
 8011534:	f0c0 809a 	bcc.w	801166c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011538:	8b7b      	ldrh	r3, [r7, #26]
 801153a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801153e:	4619      	mov	r1, r3
 8011540:	200e      	movs	r0, #14
 8011542:	f7f6 fcdf 	bl	8007f04 <pbuf_alloc>
 8011546:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	2b00      	cmp	r3, #0
 801154c:	f000 8090 	beq.w	8011670 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	895b      	ldrh	r3, [r3, #10]
 8011554:	461a      	mov	r2, r3
 8011556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011558:	3308      	adds	r3, #8
 801155a:	429a      	cmp	r2, r3
 801155c:	d203      	bcs.n	8011566 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801155e:	6978      	ldr	r0, [r7, #20]
 8011560:	f7f6 ffb4 	bl	80084cc <pbuf_free>
          goto icmperr;
 8011564:	e085      	b.n	8011672 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801156c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801156e:	4618      	mov	r0, r3
 8011570:	f001 fe5a 	bl	8013228 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011576:	4619      	mov	r1, r3
 8011578:	6978      	ldr	r0, [r7, #20]
 801157a:	f7f6 ff21 	bl	80083c0 <pbuf_remove_header>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d009      	beq.n	8011598 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011584:	4b40      	ldr	r3, [pc, #256]	; (8011688 <icmp_input+0x1f8>)
 8011586:	22b6      	movs	r2, #182	; 0xb6
 8011588:	4940      	ldr	r1, [pc, #256]	; (801168c <icmp_input+0x1fc>)
 801158a:	4841      	ldr	r0, [pc, #260]	; (8011690 <icmp_input+0x200>)
 801158c:	f001 fd1c 	bl	8012fc8 <iprintf>
          pbuf_free(r);
 8011590:	6978      	ldr	r0, [r7, #20]
 8011592:	f7f6 ff9b 	bl	80084cc <pbuf_free>
          goto icmperr;
 8011596:	e06c      	b.n	8011672 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011598:	6879      	ldr	r1, [r7, #4]
 801159a:	6978      	ldr	r0, [r7, #20]
 801159c:	f7f7 f8ca 	bl	8008734 <pbuf_copy>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d003      	beq.n	80115ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80115a6:	6978      	ldr	r0, [r7, #20]
 80115a8:	f7f6 ff90 	bl	80084cc <pbuf_free>
          goto icmperr;
 80115ac:	e061      	b.n	8011672 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7f6 ff8c 	bl	80084cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	607b      	str	r3, [r7, #4]
 80115b8:	e00f      	b.n	80115da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80115ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115bc:	330e      	adds	r3, #14
 80115be:	4619      	mov	r1, r3
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f7f6 fefd 	bl	80083c0 <pbuf_remove_header>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d006      	beq.n	80115da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80115cc:	4b2e      	ldr	r3, [pc, #184]	; (8011688 <icmp_input+0x1f8>)
 80115ce:	22c7      	movs	r2, #199	; 0xc7
 80115d0:	4930      	ldr	r1, [pc, #192]	; (8011694 <icmp_input+0x204>)
 80115d2:	482f      	ldr	r0, [pc, #188]	; (8011690 <icmp_input+0x200>)
 80115d4:	f001 fcf8 	bl	8012fc8 <iprintf>
          goto icmperr;
 80115d8:	e04b      	b.n	8011672 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80115e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115e2:	4619      	mov	r1, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7f6 fedb 	bl	80083a0 <pbuf_add_header>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d12b      	bne.n	8011648 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685b      	ldr	r3, [r3, #4]
 80115f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	681a      	ldr	r2, [r3, #0]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80115fe:	4b20      	ldr	r3, [pc, #128]	; (8011680 <icmp_input+0x1f0>)
 8011600:	691a      	ldr	r2, [r3, #16]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	2200      	movs	r2, #0
 801160a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	2200      	movs	r2, #0
 8011610:	709a      	strb	r2, [r3, #2]
 8011612:	2200      	movs	r2, #0
 8011614:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	22ff      	movs	r2, #255	; 0xff
 801161a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2200      	movs	r2, #0
 8011620:	729a      	strb	r2, [r3, #10]
 8011622:	2200      	movs	r2, #0
 8011624:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	9302      	str	r3, [sp, #8]
 801162a:	2301      	movs	r3, #1
 801162c:	9301      	str	r3, [sp, #4]
 801162e:	2300      	movs	r3, #0
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	23ff      	movs	r3, #255	; 0xff
 8011634:	2200      	movs	r2, #0
 8011636:	69f9      	ldr	r1, [r7, #28]
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 fa93 	bl	8011b64 <ip4_output_if>
 801163e:	4603      	mov	r3, r0
 8011640:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011642:	e001      	b.n	8011648 <icmp_input+0x1b8>
      break;
 8011644:	bf00      	nop
 8011646:	e000      	b.n	801164a <icmp_input+0x1ba>
      break;
 8011648:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7f6 ff3e 	bl	80084cc <pbuf_free>
  return;
 8011650:	e013      	b.n	801167a <icmp_input+0x1ea>
    goto lenerr;
 8011652:	bf00      	nop
 8011654:	e002      	b.n	801165c <icmp_input+0x1cc>
    goto lenerr;
 8011656:	bf00      	nop
 8011658:	e000      	b.n	801165c <icmp_input+0x1cc>
        goto lenerr;
 801165a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7f6 ff35 	bl	80084cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011662:	e00a      	b.n	801167a <icmp_input+0x1ea>
        goto icmperr;
 8011664:	bf00      	nop
 8011666:	e004      	b.n	8011672 <icmp_input+0x1e2>
        goto icmperr;
 8011668:	bf00      	nop
 801166a:	e002      	b.n	8011672 <icmp_input+0x1e2>
          goto icmperr;
 801166c:	bf00      	nop
 801166e:	e000      	b.n	8011672 <icmp_input+0x1e2>
          goto icmperr;
 8011670:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7f6 ff2a 	bl	80084cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011678:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801167a:	3728      	adds	r7, #40	; 0x28
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	2000d134 	.word	0x2000d134
 8011684:	2000d148 	.word	0x2000d148
 8011688:	08016954 	.word	0x08016954
 801168c:	0801698c 	.word	0x0801698c
 8011690:	080169c4 	.word	0x080169c4
 8011694:	080169ec 	.word	0x080169ec

08011698 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	460b      	mov	r3, r1
 80116a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80116a4:	78fb      	ldrb	r3, [r7, #3]
 80116a6:	461a      	mov	r2, r3
 80116a8:	2103      	movs	r1, #3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f000 f814 	bl	80116d8 <icmp_send_response>
}
 80116b0:	bf00      	nop
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	460b      	mov	r3, r1
 80116c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80116c4:	78fb      	ldrb	r3, [r7, #3]
 80116c6:	461a      	mov	r2, r3
 80116c8:	210b      	movs	r1, #11
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 f804 	bl	80116d8 <icmp_send_response>
}
 80116d0:	bf00      	nop
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b08c      	sub	sp, #48	; 0x30
 80116dc:	af04      	add	r7, sp, #16
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	460b      	mov	r3, r1
 80116e2:	70fb      	strb	r3, [r7, #3]
 80116e4:	4613      	mov	r3, r2
 80116e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80116e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ec:	2124      	movs	r1, #36	; 0x24
 80116ee:	2022      	movs	r0, #34	; 0x22
 80116f0:	f7f6 fc08 	bl	8007f04 <pbuf_alloc>
 80116f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80116f6:	69fb      	ldr	r3, [r7, #28]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d04c      	beq.n	8011796 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	895b      	ldrh	r3, [r3, #10]
 8011700:	2b23      	cmp	r3, #35	; 0x23
 8011702:	d806      	bhi.n	8011712 <icmp_send_response+0x3a>
 8011704:	4b26      	ldr	r3, [pc, #152]	; (80117a0 <icmp_send_response+0xc8>)
 8011706:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801170a:	4926      	ldr	r1, [pc, #152]	; (80117a4 <icmp_send_response+0xcc>)
 801170c:	4826      	ldr	r0, [pc, #152]	; (80117a8 <icmp_send_response+0xd0>)
 801170e:	f001 fc5b 	bl	8012fc8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	78fa      	ldrb	r2, [r7, #3]
 8011722:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	78ba      	ldrb	r2, [r7, #2]
 8011728:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	2200      	movs	r2, #0
 801172e:	711a      	strb	r2, [r3, #4]
 8011730:	2200      	movs	r2, #0
 8011732:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	2200      	movs	r2, #0
 8011738:	719a      	strb	r2, [r3, #6]
 801173a:	2200      	movs	r2, #0
 801173c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	f103 0008 	add.w	r0, r3, #8
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	221c      	movs	r2, #28
 801174c:	4619      	mov	r1, r3
 801174e:	f001 fd6b 	bl	8013228 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011758:	f107 030c 	add.w	r3, r7, #12
 801175c:	4618      	mov	r0, r3
 801175e:	f000 f825 	bl	80117ac <ip4_route>
 8011762:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d011      	beq.n	801178e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	2200      	movs	r2, #0
 801176e:	709a      	strb	r2, [r3, #2]
 8011770:	2200      	movs	r2, #0
 8011772:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011774:	f107 020c 	add.w	r2, r7, #12
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	9302      	str	r3, [sp, #8]
 801177c:	2301      	movs	r3, #1
 801177e:	9301      	str	r3, [sp, #4]
 8011780:	2300      	movs	r3, #0
 8011782:	9300      	str	r3, [sp, #0]
 8011784:	23ff      	movs	r3, #255	; 0xff
 8011786:	2100      	movs	r1, #0
 8011788:	69f8      	ldr	r0, [r7, #28]
 801178a:	f000 f9eb 	bl	8011b64 <ip4_output_if>
  }
  pbuf_free(q);
 801178e:	69f8      	ldr	r0, [r7, #28]
 8011790:	f7f6 fe9c 	bl	80084cc <pbuf_free>
 8011794:	e000      	b.n	8011798 <icmp_send_response+0xc0>
    return;
 8011796:	bf00      	nop
}
 8011798:	3720      	adds	r7, #32
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	08016954 	.word	0x08016954
 80117a4:	08016a20 	.word	0x08016a20
 80117a8:	080169c4 	.word	0x080169c4

080117ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80117b4:	4b33      	ldr	r3, [pc, #204]	; (8011884 <ip4_route+0xd8>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	60fb      	str	r3, [r7, #12]
 80117ba:	e036      	b.n	801182a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d02b      	beq.n	8011824 <ip4_route+0x78>
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80117d2:	089b      	lsrs	r3, r3, #2
 80117d4:	f003 0301 	and.w	r3, r3, #1
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d022      	beq.n	8011824 <ip4_route+0x78>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	3304      	adds	r3, #4
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d01d      	beq.n	8011824 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	3304      	adds	r3, #4
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	405a      	eors	r2, r3
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	3308      	adds	r3, #8
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	4013      	ands	r3, r2
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d101      	bne.n	8011804 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	e038      	b.n	8011876 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801180a:	f003 0302 	and.w	r3, r3, #2
 801180e:	2b00      	cmp	r3, #0
 8011810:	d108      	bne.n	8011824 <ip4_route+0x78>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	330c      	adds	r3, #12
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d101      	bne.n	8011824 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	e028      	b.n	8011876 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	60fb      	str	r3, [r7, #12]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d1c5      	bne.n	80117bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011830:	4b15      	ldr	r3, [pc, #84]	; (8011888 <ip4_route+0xdc>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d01a      	beq.n	801186e <ip4_route+0xc2>
 8011838:	4b13      	ldr	r3, [pc, #76]	; (8011888 <ip4_route+0xdc>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	d012      	beq.n	801186e <ip4_route+0xc2>
 8011848:	4b0f      	ldr	r3, [pc, #60]	; (8011888 <ip4_route+0xdc>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011850:	f003 0304 	and.w	r3, r3, #4
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00a      	beq.n	801186e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011858:	4b0b      	ldr	r3, [pc, #44]	; (8011888 <ip4_route+0xdc>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3304      	adds	r3, #4
 801185e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011860:	2b00      	cmp	r3, #0
 8011862:	d004      	beq.n	801186e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	b2db      	uxtb	r3, r3
 801186a:	2b7f      	cmp	r3, #127	; 0x7f
 801186c:	d101      	bne.n	8011872 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801186e:	2300      	movs	r3, #0
 8011870:	e001      	b.n	8011876 <ip4_route+0xca>
  }

  return netif_default;
 8011872:	4b05      	ldr	r3, [pc, #20]	; (8011888 <ip4_route+0xdc>)
 8011874:	681b      	ldr	r3, [r3, #0]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3714      	adds	r7, #20
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	2001089c 	.word	0x2001089c
 8011888:	200108a0 	.word	0x200108a0

0801188c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801189a:	f003 0301 	and.w	r3, r3, #1
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d016      	beq.n	80118d2 <ip4_input_accept+0x46>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3304      	adds	r3, #4
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d011      	beq.n	80118d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80118ae:	4b0b      	ldr	r3, [pc, #44]	; (80118dc <ip4_input_accept+0x50>)
 80118b0:	695a      	ldr	r2, [r3, #20]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	3304      	adds	r3, #4
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d008      	beq.n	80118ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80118bc:	4b07      	ldr	r3, [pc, #28]	; (80118dc <ip4_input_accept+0x50>)
 80118be:	695b      	ldr	r3, [r3, #20]
 80118c0:	6879      	ldr	r1, [r7, #4]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 fa26 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 80118c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d001      	beq.n	80118d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80118ce:	2301      	movs	r3, #1
 80118d0:	e000      	b.n	80118d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80118d2:	2300      	movs	r3, #0
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	2000d134 	.word	0x2000d134

080118e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b088      	sub	sp, #32
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80118ea:	2301      	movs	r3, #1
 80118ec:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	091b      	lsrs	r3, r3, #4
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b04      	cmp	r3, #4
 80118fe:	d004      	beq.n	801190a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7f6 fde3 	bl	80084cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011906:	2300      	movs	r3, #0
 8011908:	e123      	b.n	8011b52 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	f003 030f 	and.w	r3, r3, #15
 8011912:	b2db      	uxtb	r3, r3
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	b2db      	uxtb	r3, r3
 8011918:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	885b      	ldrh	r3, [r3, #2]
 801191e:	b29b      	uxth	r3, r3
 8011920:	4618      	mov	r0, r3
 8011922:	f7f5 fa3d 	bl	8006da0 <lwip_htons>
 8011926:	4603      	mov	r3, r0
 8011928:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	891b      	ldrh	r3, [r3, #8]
 801192e:	8a3a      	ldrh	r2, [r7, #16]
 8011930:	429a      	cmp	r2, r3
 8011932:	d204      	bcs.n	801193e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011934:	8a3b      	ldrh	r3, [r7, #16]
 8011936:	4619      	mov	r1, r3
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7f6 fc41 	bl	80081c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	895b      	ldrh	r3, [r3, #10]
 8011942:	8a7a      	ldrh	r2, [r7, #18]
 8011944:	429a      	cmp	r2, r3
 8011946:	d807      	bhi.n	8011958 <ip4_input+0x78>
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	891b      	ldrh	r3, [r3, #8]
 801194c:	8a3a      	ldrh	r2, [r7, #16]
 801194e:	429a      	cmp	r2, r3
 8011950:	d802      	bhi.n	8011958 <ip4_input+0x78>
 8011952:	8a7b      	ldrh	r3, [r7, #18]
 8011954:	2b13      	cmp	r3, #19
 8011956:	d804      	bhi.n	8011962 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7f6 fdb7 	bl	80084cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801195e:	2300      	movs	r3, #0
 8011960:	e0f7      	b.n	8011b52 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	4a7d      	ldr	r2, [pc, #500]	; (8011b5c <ip4_input+0x27c>)
 8011968:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	4a7b      	ldr	r2, [pc, #492]	; (8011b5c <ip4_input+0x27c>)
 8011970:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011972:	4b7a      	ldr	r3, [pc, #488]	; (8011b5c <ip4_input+0x27c>)
 8011974:	695b      	ldr	r3, [r3, #20]
 8011976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801197a:	2be0      	cmp	r3, #224	; 0xe0
 801197c:	d112      	bne.n	80119a4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011984:	f003 0301 	and.w	r3, r3, #1
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	d007      	beq.n	801199e <ip4_input+0xbe>
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	3304      	adds	r3, #4
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <ip4_input+0xbe>
      netif = inp;
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	61bb      	str	r3, [r7, #24]
 801199c:	e02a      	b.n	80119f4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801199e:	2300      	movs	r3, #0
 80119a0:	61bb      	str	r3, [r7, #24]
 80119a2:	e027      	b.n	80119f4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80119a4:	6838      	ldr	r0, [r7, #0]
 80119a6:	f7ff ff71 	bl	801188c <ip4_input_accept>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d002      	beq.n	80119b6 <ip4_input+0xd6>
      netif = inp;
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	61bb      	str	r3, [r7, #24]
 80119b4:	e01e      	b.n	80119f4 <ip4_input+0x114>
    } else {
      netif = NULL;
 80119b6:	2300      	movs	r3, #0
 80119b8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80119ba:	4b68      	ldr	r3, [pc, #416]	; (8011b5c <ip4_input+0x27c>)
 80119bc:	695b      	ldr	r3, [r3, #20]
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b7f      	cmp	r3, #127	; 0x7f
 80119c2:	d017      	beq.n	80119f4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80119c4:	4b66      	ldr	r3, [pc, #408]	; (8011b60 <ip4_input+0x280>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	61bb      	str	r3, [r7, #24]
 80119ca:	e00e      	b.n	80119ea <ip4_input+0x10a>
          if (netif == inp) {
 80119cc:	69ba      	ldr	r2, [r7, #24]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d006      	beq.n	80119e2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80119d4:	69b8      	ldr	r0, [r7, #24]
 80119d6:	f7ff ff59 	bl	801188c <ip4_input_accept>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d108      	bne.n	80119f2 <ip4_input+0x112>
 80119e0:	e000      	b.n	80119e4 <ip4_input+0x104>
            continue;
 80119e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	61bb      	str	r3, [r7, #24]
 80119ea:	69bb      	ldr	r3, [r7, #24]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1ed      	bne.n	80119cc <ip4_input+0xec>
 80119f0:	e000      	b.n	80119f4 <ip4_input+0x114>
            break;
 80119f2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d111      	bne.n	8011a1e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	7a5b      	ldrb	r3, [r3, #9]
 80119fe:	2b11      	cmp	r3, #17
 8011a00:	d10d      	bne.n	8011a1e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011a02:	8a7b      	ldrh	r3, [r7, #18]
 8011a04:	69fa      	ldr	r2, [r7, #28]
 8011a06:	4413      	add	r3, r2
 8011a08:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	885b      	ldrh	r3, [r3, #2]
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011a14:	d103      	bne.n	8011a1e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d017      	beq.n	8011a54 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011a24:	4b4d      	ldr	r3, [pc, #308]	; (8011b5c <ip4_input+0x27c>)
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d013      	beq.n	8011a54 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011a2c:	4b4b      	ldr	r3, [pc, #300]	; (8011b5c <ip4_input+0x27c>)
 8011a2e:	691b      	ldr	r3, [r3, #16]
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	4618      	mov	r0, r3
 8011a34:	f000 f96e 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d105      	bne.n	8011a4a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011a3e:	4b47      	ldr	r3, [pc, #284]	; (8011b5c <ip4_input+0x27c>)
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011a46:	2be0      	cmp	r3, #224	; 0xe0
 8011a48:	d104      	bne.n	8011a54 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7f6 fd3e 	bl	80084cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011a50:	2300      	movs	r3, #0
 8011a52:	e07e      	b.n	8011b52 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011a54:	69bb      	ldr	r3, [r7, #24]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d104      	bne.n	8011a64 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f7f6 fd36 	bl	80084cc <pbuf_free>
    return ERR_OK;
 8011a60:	2300      	movs	r3, #0
 8011a62:	e076      	b.n	8011b52 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	88db      	ldrh	r3, [r3, #6]
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011a70:	4013      	ands	r3, r2
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00b      	beq.n	8011a8e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 fc92 	bl	80123a0 <ip4_reass>
 8011a7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d101      	bne.n	8011a88 <ip4_input+0x1a8>
      return ERR_OK;
 8011a84:	2300      	movs	r3, #0
 8011a86:	e064      	b.n	8011b52 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011a8e:	4a33      	ldr	r2, [pc, #204]	; (8011b5c <ip4_input+0x27c>)
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011a94:	4a31      	ldr	r2, [pc, #196]	; (8011b5c <ip4_input+0x27c>)
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011a9a:	4a30      	ldr	r2, [pc, #192]	; (8011b5c <ip4_input+0x27c>)
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	f003 030f 	and.w	r3, r3, #15
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	4b2a      	ldr	r3, [pc, #168]	; (8011b5c <ip4_input+0x27c>)
 8011ab2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011ab4:	8a7b      	ldrh	r3, [r7, #18]
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7f6 fc81 	bl	80083c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	7a5b      	ldrb	r3, [r3, #9]
 8011ac2:	2b11      	cmp	r3, #17
 8011ac4:	d006      	beq.n	8011ad4 <ip4_input+0x1f4>
 8011ac6:	2b11      	cmp	r3, #17
 8011ac8:	dc13      	bgt.n	8011af2 <ip4_input+0x212>
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d00c      	beq.n	8011ae8 <ip4_input+0x208>
 8011ace:	2b06      	cmp	r3, #6
 8011ad0:	d005      	beq.n	8011ade <ip4_input+0x1fe>
 8011ad2:	e00e      	b.n	8011af2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f7fc fb26 	bl	800e128 <udp_input>
        break;
 8011adc:	e026      	b.n	8011b2c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011ade:	6839      	ldr	r1, [r7, #0]
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7f8 fb37 	bl	800a154 <tcp_input>
        break;
 8011ae6:	e021      	b.n	8011b2c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011ae8:	6839      	ldr	r1, [r7, #0]
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7ff fcd0 	bl	8011490 <icmp_input>
        break;
 8011af0:	e01c      	b.n	8011b2c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011af2:	4b1a      	ldr	r3, [pc, #104]	; (8011b5c <ip4_input+0x27c>)
 8011af4:	695b      	ldr	r3, [r3, #20]
 8011af6:	69b9      	ldr	r1, [r7, #24]
 8011af8:	4618      	mov	r0, r3
 8011afa:	f000 f90b 	bl	8011d14 <ip4_addr_isbroadcast_u32>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d10f      	bne.n	8011b24 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011b04:	4b15      	ldr	r3, [pc, #84]	; (8011b5c <ip4_input+0x27c>)
 8011b06:	695b      	ldr	r3, [r3, #20]
 8011b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011b0c:	2be0      	cmp	r3, #224	; 0xe0
 8011b0e:	d009      	beq.n	8011b24 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011b10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011b14:	4619      	mov	r1, r3
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7f6 fcc5 	bl	80084a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011b1c:	2102      	movs	r1, #2
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f7ff fdba 	bl	8011698 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7f6 fcd1 	bl	80084cc <pbuf_free>
        break;
 8011b2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011b2c:	4b0b      	ldr	r3, [pc, #44]	; (8011b5c <ip4_input+0x27c>)
 8011b2e:	2200      	movs	r2, #0
 8011b30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011b32:	4b0a      	ldr	r3, [pc, #40]	; (8011b5c <ip4_input+0x27c>)
 8011b34:	2200      	movs	r2, #0
 8011b36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011b38:	4b08      	ldr	r3, [pc, #32]	; (8011b5c <ip4_input+0x27c>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011b3e:	4b07      	ldr	r3, [pc, #28]	; (8011b5c <ip4_input+0x27c>)
 8011b40:	2200      	movs	r2, #0
 8011b42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011b44:	4b05      	ldr	r3, [pc, #20]	; (8011b5c <ip4_input+0x27c>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011b4a:	4b04      	ldr	r3, [pc, #16]	; (8011b5c <ip4_input+0x27c>)
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011b50:	2300      	movs	r3, #0
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3720      	adds	r7, #32
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	2000d134 	.word	0x2000d134
 8011b60:	2001089c 	.word	0x2001089c

08011b64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b08a      	sub	sp, #40	; 0x28
 8011b68:	af04      	add	r7, sp, #16
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	607a      	str	r2, [r7, #4]
 8011b70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d009      	beq.n	8011b90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d003      	beq.n	8011b8a <ip4_output_if+0x26>
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d102      	bne.n	8011b90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8c:	3304      	adds	r3, #4
 8011b8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011b90:	78fa      	ldrb	r2, [r7, #3]
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	9302      	str	r3, [sp, #8]
 8011b96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011ba0:	9300      	str	r3, [sp, #0]
 8011ba2:	4613      	mov	r3, r2
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	6979      	ldr	r1, [r7, #20]
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	f000 f805 	bl	8011bb8 <ip4_output_if_src>
 8011bae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3718      	adds	r7, #24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	7b9b      	ldrb	r3, [r3, #14]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d006      	beq.n	8011bdc <ip4_output_if_src+0x24>
 8011bce:	4b4b      	ldr	r3, [pc, #300]	; (8011cfc <ip4_output_if_src+0x144>)
 8011bd0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011bd4:	494a      	ldr	r1, [pc, #296]	; (8011d00 <ip4_output_if_src+0x148>)
 8011bd6:	484b      	ldr	r0, [pc, #300]	; (8011d04 <ip4_output_if_src+0x14c>)
 8011bd8:	f001 f9f6 	bl	8012fc8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d060      	beq.n	8011ca4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011be2:	2314      	movs	r3, #20
 8011be4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011be6:	2114      	movs	r1, #20
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f7f6 fbd9 	bl	80083a0 <pbuf_add_header>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d002      	beq.n	8011bfa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011bf4:	f06f 0301 	mvn.w	r3, #1
 8011bf8:	e07c      	b.n	8011cf4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	895b      	ldrh	r3, [r3, #10]
 8011c04:	2b13      	cmp	r3, #19
 8011c06:	d806      	bhi.n	8011c16 <ip4_output_if_src+0x5e>
 8011c08:	4b3c      	ldr	r3, [pc, #240]	; (8011cfc <ip4_output_if_src+0x144>)
 8011c0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011c0e:	493e      	ldr	r1, [pc, #248]	; (8011d08 <ip4_output_if_src+0x150>)
 8011c10:	483c      	ldr	r0, [pc, #240]	; (8011d04 <ip4_output_if_src+0x14c>)
 8011c12:	f001 f9d9 	bl	8012fc8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	78fa      	ldrb	r2, [r7, #3]
 8011c1a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011c1c:	69fb      	ldr	r3, [r7, #28]
 8011c1e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011c22:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011c2c:	8b7b      	ldrh	r3, [r7, #26]
 8011c2e:	089b      	lsrs	r3, r3, #2
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c38:	b2da      	uxtb	r2, r3
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011c44:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	891b      	ldrh	r3, [r3, #8]
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7f5 f8a8 	bl	8006da0 <lwip_htons>
 8011c50:	4603      	mov	r3, r0
 8011c52:	461a      	mov	r2, r3
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	719a      	strb	r2, [r3, #6]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011c62:	4b2a      	ldr	r3, [pc, #168]	; (8011d0c <ip4_output_if_src+0x154>)
 8011c64:	881b      	ldrh	r3, [r3, #0]
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7f5 f89a 	bl	8006da0 <lwip_htons>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	461a      	mov	r2, r3
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011c74:	4b25      	ldr	r3, [pc, #148]	; (8011d0c <ip4_output_if_src+0x154>)
 8011c76:	881b      	ldrh	r3, [r3, #0]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	4b23      	ldr	r3, [pc, #140]	; (8011d0c <ip4_output_if_src+0x154>)
 8011c7e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011c80:	68bb      	ldr	r3, [r7, #8]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d104      	bne.n	8011c90 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011c86:	4b22      	ldr	r3, [pc, #136]	; (8011d10 <ip4_output_if_src+0x158>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	60da      	str	r2, [r3, #12]
 8011c8e:	e003      	b.n	8011c98 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	729a      	strb	r2, [r3, #10]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	72da      	strb	r2, [r3, #11]
 8011ca2:	e00f      	b.n	8011cc4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	895b      	ldrh	r3, [r3, #10]
 8011ca8:	2b13      	cmp	r3, #19
 8011caa:	d802      	bhi.n	8011cb2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011cac:	f06f 0301 	mvn.w	r3, #1
 8011cb0:	e020      	b.n	8011cf4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	691b      	ldr	r3, [r3, #16]
 8011cbc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011cbe:	f107 0314 	add.w	r3, r7, #20
 8011cc2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d00c      	beq.n	8011ce6 <ip4_output_if_src+0x12e>
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	891a      	ldrh	r2, [r3, #8]
 8011cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d906      	bls.n	8011ce6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f000 fd53 	bl	8012788 <ip4_frag>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	e006      	b.n	8011cf4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce8:	695b      	ldr	r3, [r3, #20]
 8011cea:	687a      	ldr	r2, [r7, #4]
 8011cec:	68f9      	ldr	r1, [r7, #12]
 8011cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cf0:	4798      	blx	r3
 8011cf2:	4603      	mov	r3, r0
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3720      	adds	r7, #32
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}
 8011cfc:	08016a4c 	.word	0x08016a4c
 8011d00:	08016a80 	.word	0x08016a80
 8011d04:	08016a8c 	.word	0x08016a8c
 8011d08:	08016ab4 	.word	0x08016ab4
 8011d0c:	20010a2e 	.word	0x20010a2e
 8011d10:	08016ee4 	.word	0x08016ee4

08011d14 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011d14:	b480      	push	{r7}
 8011d16:	b085      	sub	sp, #20
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d28:	d002      	beq.n	8011d30 <ip4_addr_isbroadcast_u32+0x1c>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011d30:	2301      	movs	r3, #1
 8011d32:	e02a      	b.n	8011d8a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d3a:	f003 0302 	and.w	r3, r3, #2
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d101      	bne.n	8011d46 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	e021      	b.n	8011d8a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	3304      	adds	r3, #4
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d101      	bne.n	8011d56 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	e019      	b.n	8011d8a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	405a      	eors	r2, r3
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	3308      	adds	r3, #8
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	4013      	ands	r3, r2
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d10d      	bne.n	8011d88 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	3308      	adds	r3, #8
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	43da      	mvns	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	3308      	adds	r3, #8
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d101      	bne.n	8011d88 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011d84:	2301      	movs	r3, #1
 8011d86:	e000      	b.n	8011d8a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011d88:	2300      	movs	r3, #0
  }
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3714      	adds	r7, #20
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr
	...

08011d98 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b084      	sub	sp, #16
 8011d9c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011da2:	4b12      	ldr	r3, [pc, #72]	; (8011dec <ip_reass_tmr+0x54>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011da8:	e018      	b.n	8011ddc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	7fdb      	ldrb	r3, [r3, #31]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00b      	beq.n	8011dca <ip_reass_tmr+0x32>
      r->timer--;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	7fdb      	ldrb	r3, [r3, #31]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	b2da      	uxtb	r2, r3
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	60fb      	str	r3, [r7, #12]
 8011dc8:	e008      	b.n	8011ddc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011dd4:	68b9      	ldr	r1, [r7, #8]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 f80a 	bl	8011df0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d1e3      	bne.n	8011daa <ip_reass_tmr+0x12>
    }
  }
}
 8011de2:	bf00      	nop
 8011de4:	bf00      	nop
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	20010a30 	.word	0x20010a30

08011df0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b088      	sub	sp, #32
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011dfe:	683a      	ldr	r2, [r7, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d105      	bne.n	8011e12 <ip_reass_free_complete_datagram+0x22>
 8011e06:	4b45      	ldr	r3, [pc, #276]	; (8011f1c <ip_reass_free_complete_datagram+0x12c>)
 8011e08:	22ab      	movs	r2, #171	; 0xab
 8011e0a:	4945      	ldr	r1, [pc, #276]	; (8011f20 <ip_reass_free_complete_datagram+0x130>)
 8011e0c:	4845      	ldr	r0, [pc, #276]	; (8011f24 <ip_reass_free_complete_datagram+0x134>)
 8011e0e:	f001 f8db 	bl	8012fc8 <iprintf>
  if (prev != NULL) {
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d00a      	beq.n	8011e2e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d005      	beq.n	8011e2e <ip_reass_free_complete_datagram+0x3e>
 8011e22:	4b3e      	ldr	r3, [pc, #248]	; (8011f1c <ip_reass_free_complete_datagram+0x12c>)
 8011e24:	22ad      	movs	r2, #173	; 0xad
 8011e26:	4940      	ldr	r1, [pc, #256]	; (8011f28 <ip_reass_free_complete_datagram+0x138>)
 8011e28:	483e      	ldr	r0, [pc, #248]	; (8011f24 <ip_reass_free_complete_datagram+0x134>)
 8011e2a:	f001 f8cd 	bl	8012fc8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	889b      	ldrh	r3, [r3, #4]
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d12a      	bne.n	8011e96 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	685b      	ldr	r3, [r3, #4]
 8011e44:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	6858      	ldr	r0, [r3, #4]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	3308      	adds	r3, #8
 8011e56:	2214      	movs	r2, #20
 8011e58:	4619      	mov	r1, r3
 8011e5a:	f001 f9e5 	bl	8013228 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011e5e:	2101      	movs	r1, #1
 8011e60:	69b8      	ldr	r0, [r7, #24]
 8011e62:	f7ff fc29 	bl	80116b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011e66:	69b8      	ldr	r0, [r7, #24]
 8011e68:	f7f6 fbbe 	bl	80085e8 <pbuf_clen>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011e70:	8bfa      	ldrh	r2, [r7, #30]
 8011e72:	8a7b      	ldrh	r3, [r7, #18]
 8011e74:	4413      	add	r3, r2
 8011e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e7a:	db05      	blt.n	8011e88 <ip_reass_free_complete_datagram+0x98>
 8011e7c:	4b27      	ldr	r3, [pc, #156]	; (8011f1c <ip_reass_free_complete_datagram+0x12c>)
 8011e7e:	22bc      	movs	r2, #188	; 0xbc
 8011e80:	492a      	ldr	r1, [pc, #168]	; (8011f2c <ip_reass_free_complete_datagram+0x13c>)
 8011e82:	4828      	ldr	r0, [pc, #160]	; (8011f24 <ip_reass_free_complete_datagram+0x134>)
 8011e84:	f001 f8a0 	bl	8012fc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011e88:	8bfa      	ldrh	r2, [r7, #30]
 8011e8a:	8a7b      	ldrh	r3, [r7, #18]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011e90:	69b8      	ldr	r0, [r7, #24]
 8011e92:	f7f6 fb1b 	bl	80084cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011e9c:	e01f      	b.n	8011ede <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011ea4:	69bb      	ldr	r3, [r7, #24]
 8011ea6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f7f6 fb9a 	bl	80085e8 <pbuf_clen>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011eb8:	8bfa      	ldrh	r2, [r7, #30]
 8011eba:	8a7b      	ldrh	r3, [r7, #18]
 8011ebc:	4413      	add	r3, r2
 8011ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ec2:	db05      	blt.n	8011ed0 <ip_reass_free_complete_datagram+0xe0>
 8011ec4:	4b15      	ldr	r3, [pc, #84]	; (8011f1c <ip_reass_free_complete_datagram+0x12c>)
 8011ec6:	22cc      	movs	r2, #204	; 0xcc
 8011ec8:	4918      	ldr	r1, [pc, #96]	; (8011f2c <ip_reass_free_complete_datagram+0x13c>)
 8011eca:	4816      	ldr	r0, [pc, #88]	; (8011f24 <ip_reass_free_complete_datagram+0x134>)
 8011ecc:	f001 f87c 	bl	8012fc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ed0:	8bfa      	ldrh	r2, [r7, #30]
 8011ed2:	8a7b      	ldrh	r3, [r7, #18]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f7f6 faf7 	bl	80084cc <pbuf_free>
  while (p != NULL) {
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d1dc      	bne.n	8011e9e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011ee4:	6839      	ldr	r1, [r7, #0]
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 f8c2 	bl	8012070 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011eec:	4b10      	ldr	r3, [pc, #64]	; (8011f30 <ip_reass_free_complete_datagram+0x140>)
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	8bfa      	ldrh	r2, [r7, #30]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d905      	bls.n	8011f02 <ip_reass_free_complete_datagram+0x112>
 8011ef6:	4b09      	ldr	r3, [pc, #36]	; (8011f1c <ip_reass_free_complete_datagram+0x12c>)
 8011ef8:	22d2      	movs	r2, #210	; 0xd2
 8011efa:	490e      	ldr	r1, [pc, #56]	; (8011f34 <ip_reass_free_complete_datagram+0x144>)
 8011efc:	4809      	ldr	r0, [pc, #36]	; (8011f24 <ip_reass_free_complete_datagram+0x134>)
 8011efe:	f001 f863 	bl	8012fc8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011f02:	4b0b      	ldr	r3, [pc, #44]	; (8011f30 <ip_reass_free_complete_datagram+0x140>)
 8011f04:	881a      	ldrh	r2, [r3, #0]
 8011f06:	8bfb      	ldrh	r3, [r7, #30]
 8011f08:	1ad3      	subs	r3, r2, r3
 8011f0a:	b29a      	uxth	r2, r3
 8011f0c:	4b08      	ldr	r3, [pc, #32]	; (8011f30 <ip_reass_free_complete_datagram+0x140>)
 8011f0e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011f10:	8bfb      	ldrh	r3, [r7, #30]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3720      	adds	r7, #32
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	08016ae4 	.word	0x08016ae4
 8011f20:	08016b20 	.word	0x08016b20
 8011f24:	08016b2c 	.word	0x08016b2c
 8011f28:	08016b54 	.word	0x08016b54
 8011f2c:	08016b68 	.word	0x08016b68
 8011f30:	20010a34 	.word	0x20010a34
 8011f34:	08016b88 	.word	0x08016b88

08011f38 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b08a      	sub	sp, #40	; 0x28
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011f42:	2300      	movs	r3, #0
 8011f44:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011f46:	2300      	movs	r3, #0
 8011f48:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011f52:	2300      	movs	r3, #0
 8011f54:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011f56:	4b28      	ldr	r3, [pc, #160]	; (8011ff8 <ip_reass_remove_oldest_datagram+0xc0>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011f5c:	e030      	b.n	8011fc0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f60:	695a      	ldr	r2, [r3, #20]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d10c      	bne.n	8011f84 <ip_reass_remove_oldest_datagram+0x4c>
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6c:	699a      	ldr	r2, [r3, #24]
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	691b      	ldr	r3, [r3, #16]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d106      	bne.n	8011f84 <ip_reass_remove_oldest_datagram+0x4c>
 8011f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f78:	899a      	ldrh	r2, [r3, #12]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	889b      	ldrh	r3, [r3, #4]
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d014      	beq.n	8011fae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	3301      	adds	r3, #1
 8011f88:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011f8a:	6a3b      	ldr	r3, [r7, #32]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d104      	bne.n	8011f9a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f92:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	61bb      	str	r3, [r7, #24]
 8011f98:	e009      	b.n	8011fae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	7fda      	ldrb	r2, [r3, #31]
 8011f9e:	6a3b      	ldr	r3, [r7, #32]
 8011fa0:	7fdb      	ldrb	r3, [r3, #31]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d803      	bhi.n	8011fae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d001      	beq.n	8011fba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d1cb      	bne.n	8011f5e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011fc6:	6a3b      	ldr	r3, [r7, #32]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d008      	beq.n	8011fde <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011fcc:	69b9      	ldr	r1, [r7, #24]
 8011fce:	6a38      	ldr	r0, [r7, #32]
 8011fd0:	f7ff ff0e 	bl	8011df0 <ip_reass_free_complete_datagram>
 8011fd4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011fd6:	697a      	ldr	r2, [r7, #20]
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	4413      	add	r3, r2
 8011fdc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011fde:	697a      	ldr	r2, [r7, #20]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	da02      	bge.n	8011fec <ip_reass_remove_oldest_datagram+0xb4>
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	2b01      	cmp	r3, #1
 8011fea:	dcac      	bgt.n	8011f46 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011fec:	697b      	ldr	r3, [r7, #20]
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3728      	adds	r7, #40	; 0x28
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	20010a30 	.word	0x20010a30

08011ffc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b084      	sub	sp, #16
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012006:	2004      	movs	r0, #4
 8012008:	f7f5 fba2 	bl	8007750 <memp_malloc>
 801200c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d110      	bne.n	8012036 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012014:	6839      	ldr	r1, [r7, #0]
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7ff ff8e 	bl	8011f38 <ip_reass_remove_oldest_datagram>
 801201c:	4602      	mov	r2, r0
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	4293      	cmp	r3, r2
 8012022:	dc03      	bgt.n	801202c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012024:	2004      	movs	r0, #4
 8012026:	f7f5 fb93 	bl	8007750 <memp_malloc>
 801202a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d101      	bne.n	8012036 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012032:	2300      	movs	r3, #0
 8012034:	e016      	b.n	8012064 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012036:	2220      	movs	r2, #32
 8012038:	2100      	movs	r1, #0
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f001 f829 	bl	8013092 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	220f      	movs	r2, #15
 8012044:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012046:	4b09      	ldr	r3, [pc, #36]	; (801206c <ip_reass_enqueue_new_datagram+0x70>)
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801204e:	4a07      	ldr	r2, [pc, #28]	; (801206c <ip_reass_enqueue_new_datagram+0x70>)
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	3308      	adds	r3, #8
 8012058:	2214      	movs	r2, #20
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	4618      	mov	r0, r3
 801205e:	f001 f8e3 	bl	8013228 <memcpy>
  return ipr;
 8012062:	68fb      	ldr	r3, [r7, #12]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	20010a30 	.word	0x20010a30

08012070 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801207a:	4b10      	ldr	r3, [pc, #64]	; (80120bc <ip_reass_dequeue_datagram+0x4c>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	429a      	cmp	r2, r3
 8012082:	d104      	bne.n	801208e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a0c      	ldr	r2, [pc, #48]	; (80120bc <ip_reass_dequeue_datagram+0x4c>)
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	e00d      	b.n	80120aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d106      	bne.n	80120a2 <ip_reass_dequeue_datagram+0x32>
 8012094:	4b0a      	ldr	r3, [pc, #40]	; (80120c0 <ip_reass_dequeue_datagram+0x50>)
 8012096:	f240 1245 	movw	r2, #325	; 0x145
 801209a:	490a      	ldr	r1, [pc, #40]	; (80120c4 <ip_reass_dequeue_datagram+0x54>)
 801209c:	480a      	ldr	r0, [pc, #40]	; (80120c8 <ip_reass_dequeue_datagram+0x58>)
 801209e:	f000 ff93 	bl	8012fc8 <iprintf>
    prev->next = ipr->next;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	2004      	movs	r0, #4
 80120ae:	f7f5 fbc5 	bl	800783c <memp_free>
}
 80120b2:	bf00      	nop
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	bf00      	nop
 80120bc:	20010a30 	.word	0x20010a30
 80120c0:	08016ae4 	.word	0x08016ae4
 80120c4:	08016bac 	.word	0x08016bac
 80120c8:	08016b2c 	.word	0x08016b2c

080120cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b08c      	sub	sp, #48	; 0x30
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80120d8:	2300      	movs	r3, #0
 80120da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80120dc:	2301      	movs	r3, #1
 80120de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	885b      	ldrh	r3, [r3, #2]
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f4 fe57 	bl	8006da0 <lwip_htons>
 80120f2:	4603      	mov	r3, r0
 80120f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	f003 030f 	and.w	r3, r3, #15
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012104:	7e7b      	ldrb	r3, [r7, #25]
 8012106:	b29b      	uxth	r3, r3
 8012108:	8b7a      	ldrh	r2, [r7, #26]
 801210a:	429a      	cmp	r2, r3
 801210c:	d202      	bcs.n	8012114 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801210e:	f04f 33ff 	mov.w	r3, #4294967295
 8012112:	e135      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012114:	7e7b      	ldrb	r3, [r7, #25]
 8012116:	b29b      	uxth	r3, r3
 8012118:	8b7a      	ldrh	r2, [r7, #26]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801211e:	69fb      	ldr	r3, [r7, #28]
 8012120:	88db      	ldrh	r3, [r3, #6]
 8012122:	b29b      	uxth	r3, r3
 8012124:	4618      	mov	r0, r3
 8012126:	f7f4 fe3b 	bl	8006da0 <lwip_htons>
 801212a:	4603      	mov	r3, r0
 801212c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012130:	b29b      	uxth	r3, r3
 8012132:	00db      	lsls	r3, r3, #3
 8012134:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213e:	2200      	movs	r2, #0
 8012140:	701a      	strb	r2, [r3, #0]
 8012142:	2200      	movs	r2, #0
 8012144:	705a      	strb	r2, [r3, #1]
 8012146:	2200      	movs	r2, #0
 8012148:	709a      	strb	r2, [r3, #2]
 801214a:	2200      	movs	r2, #0
 801214c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012150:	8afa      	ldrh	r2, [r7, #22]
 8012152:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012154:	8afa      	ldrh	r2, [r7, #22]
 8012156:	8b7b      	ldrh	r3, [r7, #26]
 8012158:	4413      	add	r3, r2
 801215a:	b29a      	uxth	r2, r3
 801215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801215e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012162:	88db      	ldrh	r3, [r3, #6]
 8012164:	b29b      	uxth	r3, r3
 8012166:	8afa      	ldrh	r2, [r7, #22]
 8012168:	429a      	cmp	r2, r3
 801216a:	d902      	bls.n	8012172 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801216c:	f04f 33ff 	mov.w	r3, #4294967295
 8012170:	e106      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	627b      	str	r3, [r7, #36]	; 0x24
 8012178:	e068      	b.n	801224c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012182:	889b      	ldrh	r3, [r3, #4]
 8012184:	b29a      	uxth	r2, r3
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	889b      	ldrh	r3, [r3, #4]
 801218a:	b29b      	uxth	r3, r3
 801218c:	429a      	cmp	r2, r3
 801218e:	d235      	bcs.n	80121fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012194:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012198:	2b00      	cmp	r3, #0
 801219a:	d020      	beq.n	80121de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801219e:	889b      	ldrh	r3, [r3, #4]
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a4:	88db      	ldrh	r3, [r3, #6]
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d307      	bcc.n	80121bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80121ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ae:	88db      	ldrh	r3, [r3, #6]
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	889b      	ldrh	r3, [r3, #4]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d902      	bls.n	80121c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121bc:	f04f 33ff 	mov.w	r3, #4294967295
 80121c0:	e0de      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80121c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80121c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ca:	88db      	ldrh	r3, [r3, #6]
 80121cc:	b29a      	uxth	r2, r3
 80121ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121d0:	889b      	ldrh	r3, [r3, #4]
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d03d      	beq.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80121d8:	2300      	movs	r3, #0
 80121da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80121dc:	e03a      	b.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80121de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e0:	88db      	ldrh	r3, [r3, #6]
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	889b      	ldrh	r3, [r3, #4]
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d902      	bls.n	80121f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80121ee:	f04f 33ff 	mov.w	r3, #4294967295
 80121f2:	e0c5      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	68ba      	ldr	r2, [r7, #8]
 80121f8:	605a      	str	r2, [r3, #4]
      break;
 80121fa:	e02b      	b.n	8012254 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	889b      	ldrh	r3, [r3, #4]
 8012200:	b29a      	uxth	r2, r3
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	889b      	ldrh	r3, [r3, #4]
 8012206:	b29b      	uxth	r3, r3
 8012208:	429a      	cmp	r2, r3
 801220a:	d102      	bne.n	8012212 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801220c:	f04f 33ff 	mov.w	r3, #4294967295
 8012210:	e0b6      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012214:	889b      	ldrh	r3, [r3, #4]
 8012216:	b29a      	uxth	r2, r3
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	88db      	ldrh	r3, [r3, #6]
 801221c:	b29b      	uxth	r3, r3
 801221e:	429a      	cmp	r2, r3
 8012220:	d202      	bcs.n	8012228 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012222:	f04f 33ff 	mov.w	r3, #4294967295
 8012226:	e0ab      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801222a:	2b00      	cmp	r3, #0
 801222c:	d009      	beq.n	8012242 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012230:	88db      	ldrh	r3, [r3, #6]
 8012232:	b29a      	uxth	r2, r3
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	889b      	ldrh	r3, [r3, #4]
 8012238:	b29b      	uxth	r3, r3
 801223a:	429a      	cmp	r2, r3
 801223c:	d001      	beq.n	8012242 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224e:	2b00      	cmp	r3, #0
 8012250:	d193      	bne.n	801217a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012252:	e000      	b.n	8012256 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012254:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012258:	2b00      	cmp	r3, #0
 801225a:	d12d      	bne.n	80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225e:	2b00      	cmp	r3, #0
 8012260:	d01c      	beq.n	801229c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012264:	88db      	ldrh	r3, [r3, #6]
 8012266:	b29a      	uxth	r2, r3
 8012268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801226a:	889b      	ldrh	r3, [r3, #4]
 801226c:	b29b      	uxth	r3, r3
 801226e:	429a      	cmp	r2, r3
 8012270:	d906      	bls.n	8012280 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012272:	4b45      	ldr	r3, [pc, #276]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012274:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012278:	4944      	ldr	r1, [pc, #272]	; (801238c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801227a:	4845      	ldr	r0, [pc, #276]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801227c:	f000 fea4 	bl	8012fc8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012288:	88db      	ldrh	r3, [r3, #6]
 801228a:	b29a      	uxth	r2, r3
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	889b      	ldrh	r3, [r3, #4]
 8012290:	b29b      	uxth	r3, r3
 8012292:	429a      	cmp	r2, r3
 8012294:	d010      	beq.n	80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012296:	2300      	movs	r3, #0
 8012298:	623b      	str	r3, [r7, #32]
 801229a:	e00d      	b.n	80122b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d006      	beq.n	80122b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80122a4:	4b38      	ldr	r3, [pc, #224]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80122a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80122aa:	493a      	ldr	r1, [pc, #232]	; (8012394 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80122ac:	4838      	ldr	r0, [pc, #224]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80122ae:	f000 fe8b 	bl	8012fc8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	68ba      	ldr	r2, [r7, #8]
 80122b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d105      	bne.n	80122ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	7f9b      	ldrb	r3, [r3, #30]
 80122c2:	f003 0301 	and.w	r3, r3, #1
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d059      	beq.n	801237e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80122ca:	6a3b      	ldr	r3, [r7, #32]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d04f      	beq.n	8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d006      	beq.n	80122e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	889b      	ldrh	r3, [r3, #4]
 80122e0:	b29b      	uxth	r3, r3
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d002      	beq.n	80122ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80122e6:	2300      	movs	r3, #0
 80122e8:	623b      	str	r3, [r7, #32]
 80122ea:	e041      	b.n	8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80122ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80122f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80122f6:	e012      	b.n	801231e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80122f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80122fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012300:	88db      	ldrh	r3, [r3, #6]
 8012302:	b29a      	uxth	r2, r3
 8012304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012306:	889b      	ldrh	r3, [r3, #4]
 8012308:	b29b      	uxth	r3, r3
 801230a:	429a      	cmp	r2, r3
 801230c:	d002      	beq.n	8012314 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801230e:	2300      	movs	r3, #0
 8012310:	623b      	str	r3, [r7, #32]
            break;
 8012312:	e007      	b.n	8012324 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012316:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1e9      	bne.n	80122f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012324:	6a3b      	ldr	r3, [r7, #32]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d022      	beq.n	8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d106      	bne.n	8012340 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012332:	4b15      	ldr	r3, [pc, #84]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012334:	f240 12df 	movw	r2, #479	; 0x1df
 8012338:	4917      	ldr	r1, [pc, #92]	; (8012398 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801233a:	4815      	ldr	r0, [pc, #84]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801233c:	f000 fe44 	bl	8012fc8 <iprintf>
          LWIP_ASSERT("sanity check",
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012348:	429a      	cmp	r2, r3
 801234a:	d106      	bne.n	801235a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801234c:	4b0e      	ldr	r3, [pc, #56]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801234e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012352:	4911      	ldr	r1, [pc, #68]	; (8012398 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012354:	480e      	ldr	r0, [pc, #56]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012356:	f000 fe37 	bl	8012fc8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d006      	beq.n	8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012362:	4b09      	ldr	r3, [pc, #36]	; (8012388 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012364:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012368:	490c      	ldr	r1, [pc, #48]	; (801239c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801236a:	4809      	ldr	r0, [pc, #36]	; (8012390 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801236c:	f000 fe2c 	bl	8012fc8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012370:	6a3b      	ldr	r3, [r7, #32]
 8012372:	2b00      	cmp	r3, #0
 8012374:	bf14      	ite	ne
 8012376:	2301      	movne	r3, #1
 8012378:	2300      	moveq	r3, #0
 801237a:	b2db      	uxtb	r3, r3
 801237c:	e000      	b.n	8012380 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3730      	adds	r7, #48	; 0x30
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	08016ae4 	.word	0x08016ae4
 801238c:	08016bc8 	.word	0x08016bc8
 8012390:	08016b2c 	.word	0x08016b2c
 8012394:	08016be8 	.word	0x08016be8
 8012398:	08016c20 	.word	0x08016c20
 801239c:	08016c30 	.word	0x08016c30

080123a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b08e      	sub	sp, #56	; 0x38
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80123ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	f003 030f 	and.w	r3, r3, #15
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b14      	cmp	r3, #20
 80123be:	f040 8171 	bne.w	80126a4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80123c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c4:	88db      	ldrh	r3, [r3, #6]
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7f4 fce9 	bl	8006da0 <lwip_htons>
 80123ce:	4603      	mov	r3, r0
 80123d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80123da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123dc:	885b      	ldrh	r3, [r3, #2]
 80123de:	b29b      	uxth	r3, r3
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7f4 fcdd 	bl	8006da0 <lwip_htons>
 80123e6:	4603      	mov	r3, r0
 80123e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80123ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ec:	781b      	ldrb	r3, [r3, #0]
 80123ee:	f003 030f 	and.w	r3, r3, #15
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80123fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80123fe:	b29b      	uxth	r3, r3
 8012400:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012402:	429a      	cmp	r2, r3
 8012404:	f0c0 8150 	bcc.w	80126a8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801240c:	b29b      	uxth	r3, r3
 801240e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012410:	1ad3      	subs	r3, r2, r3
 8012412:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7f6 f8e7 	bl	80085e8 <pbuf_clen>
 801241a:	4603      	mov	r3, r0
 801241c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801241e:	4b8c      	ldr	r3, [pc, #560]	; (8012650 <ip4_reass+0x2b0>)
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	8c3b      	ldrh	r3, [r7, #32]
 8012426:	4413      	add	r3, r2
 8012428:	2b0a      	cmp	r3, #10
 801242a:	dd10      	ble.n	801244e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801242c:	8c3b      	ldrh	r3, [r7, #32]
 801242e:	4619      	mov	r1, r3
 8012430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012432:	f7ff fd81 	bl	8011f38 <ip_reass_remove_oldest_datagram>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	f000 8137 	beq.w	80126ac <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801243e:	4b84      	ldr	r3, [pc, #528]	; (8012650 <ip4_reass+0x2b0>)
 8012440:	881b      	ldrh	r3, [r3, #0]
 8012442:	461a      	mov	r2, r3
 8012444:	8c3b      	ldrh	r3, [r7, #32]
 8012446:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012448:	2b0a      	cmp	r3, #10
 801244a:	f300 812f 	bgt.w	80126ac <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801244e:	4b81      	ldr	r3, [pc, #516]	; (8012654 <ip4_reass+0x2b4>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	633b      	str	r3, [r7, #48]	; 0x30
 8012454:	e015      	b.n	8012482 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012458:	695a      	ldr	r2, [r3, #20]
 801245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	429a      	cmp	r2, r3
 8012460:	d10c      	bne.n	801247c <ip4_reass+0xdc>
 8012462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012464:	699a      	ldr	r2, [r3, #24]
 8012466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012468:	691b      	ldr	r3, [r3, #16]
 801246a:	429a      	cmp	r2, r3
 801246c:	d106      	bne.n	801247c <ip4_reass+0xdc>
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	899a      	ldrh	r2, [r3, #12]
 8012472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012474:	889b      	ldrh	r3, [r3, #4]
 8012476:	b29b      	uxth	r3, r3
 8012478:	429a      	cmp	r2, r3
 801247a:	d006      	beq.n	801248a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	633b      	str	r3, [r7, #48]	; 0x30
 8012482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1e6      	bne.n	8012456 <ip4_reass+0xb6>
 8012488:	e000      	b.n	801248c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801248a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248e:	2b00      	cmp	r3, #0
 8012490:	d109      	bne.n	80124a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012492:	8c3b      	ldrh	r3, [r7, #32]
 8012494:	4619      	mov	r1, r3
 8012496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012498:	f7ff fdb0 	bl	8011ffc <ip_reass_enqueue_new_datagram>
 801249c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d11c      	bne.n	80124de <ip4_reass+0x13e>
      goto nullreturn;
 80124a4:	e105      	b.n	80126b2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80124a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a8:	88db      	ldrh	r3, [r3, #6]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7f4 fc77 	bl	8006da0 <lwip_htons>
 80124b2:	4603      	mov	r3, r0
 80124b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d110      	bne.n	80124de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80124bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124be:	89db      	ldrh	r3, [r3, #14]
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7f4 fc6d 	bl	8006da0 <lwip_htons>
 80124c6:	4603      	mov	r3, r0
 80124c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d006      	beq.n	80124de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80124d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d2:	3308      	adds	r3, #8
 80124d4:	2214      	movs	r2, #20
 80124d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 fea5 	bl	8013228 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80124de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e0:	88db      	ldrh	r3, [r3, #6]
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	f003 0320 	and.w	r3, r3, #32
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	bf0c      	ite	eq
 80124ec:	2301      	moveq	r3, #1
 80124ee:	2300      	movne	r3, #0
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00e      	beq.n	8012518 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80124fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80124fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124fe:	4413      	add	r3, r2
 8012500:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012502:	8b7a      	ldrh	r2, [r7, #26]
 8012504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012506:	429a      	cmp	r2, r3
 8012508:	f0c0 80a0 	bcc.w	801264c <ip4_reass+0x2ac>
 801250c:	8b7b      	ldrh	r3, [r7, #26]
 801250e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012512:	4293      	cmp	r3, r2
 8012514:	f200 809a 	bhi.w	801264c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012518:	69fa      	ldr	r2, [r7, #28]
 801251a:	6879      	ldr	r1, [r7, #4]
 801251c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801251e:	f7ff fdd5 	bl	80120cc <ip_reass_chain_frag_into_datagram_and_validate>
 8012522:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252a:	f000 809b 	beq.w	8012664 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801252e:	4b48      	ldr	r3, [pc, #288]	; (8012650 <ip4_reass+0x2b0>)
 8012530:	881a      	ldrh	r2, [r3, #0]
 8012532:	8c3b      	ldrh	r3, [r7, #32]
 8012534:	4413      	add	r3, r2
 8012536:	b29a      	uxth	r2, r3
 8012538:	4b45      	ldr	r3, [pc, #276]	; (8012650 <ip4_reass+0x2b0>)
 801253a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801253c:	69fb      	ldr	r3, [r7, #28]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d00d      	beq.n	801255e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012542:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012546:	4413      	add	r3, r2
 8012548:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254c:	8a7a      	ldrh	r2, [r7, #18]
 801254e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012552:	7f9b      	ldrb	r3, [r3, #30]
 8012554:	f043 0301 	orr.w	r3, r3, #1
 8012558:	b2da      	uxtb	r2, r3
 801255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	2b01      	cmp	r3, #1
 8012562:	d171      	bne.n	8012648 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012566:	8b9b      	ldrh	r3, [r3, #28]
 8012568:	3314      	adds	r3, #20
 801256a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012580:	3308      	adds	r3, #8
 8012582:	2214      	movs	r2, #20
 8012584:	4619      	mov	r1, r3
 8012586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012588:	f000 fe4e 	bl	8013228 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801258c:	8a3b      	ldrh	r3, [r7, #16]
 801258e:	4618      	mov	r0, r3
 8012590:	f7f4 fc06 	bl	8006da0 <lwip_htons>
 8012594:	4603      	mov	r3, r0
 8012596:	461a      	mov	r2, r3
 8012598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801259e:	2200      	movs	r2, #0
 80125a0:	719a      	strb	r2, [r3, #6]
 80125a2:	2200      	movs	r2, #0
 80125a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80125a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a8:	2200      	movs	r2, #0
 80125aa:	729a      	strb	r2, [r3, #10]
 80125ac:	2200      	movs	r2, #0
 80125ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80125b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80125b6:	e00d      	b.n	80125d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80125b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80125be:	2114      	movs	r1, #20
 80125c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80125c2:	f7f5 fefd 	bl	80083c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80125c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f7f6 f84d 	bl	8008668 <pbuf_cat>
      r = iprh->next_pbuf;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80125d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d1ee      	bne.n	80125b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80125da:	4b1e      	ldr	r3, [pc, #120]	; (8012654 <ip4_reass+0x2b4>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d102      	bne.n	80125ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 80125e4:	2300      	movs	r3, #0
 80125e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125e8:	e010      	b.n	801260c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125ea:	4b1a      	ldr	r3, [pc, #104]	; (8012654 <ip4_reass+0x2b4>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125f0:	e007      	b.n	8012602 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80125f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d006      	beq.n	801260a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80125fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1f4      	bne.n	80125f2 <ip4_reass+0x252>
 8012608:	e000      	b.n	801260c <ip4_reass+0x26c>
          break;
 801260a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801260c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801260e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012610:	f7ff fd2e 	bl	8012070 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f7f5 ffe7 	bl	80085e8 <pbuf_clen>
 801261a:	4603      	mov	r3, r0
 801261c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801261e:	4b0c      	ldr	r3, [pc, #48]	; (8012650 <ip4_reass+0x2b0>)
 8012620:	881b      	ldrh	r3, [r3, #0]
 8012622:	8c3a      	ldrh	r2, [r7, #32]
 8012624:	429a      	cmp	r2, r3
 8012626:	d906      	bls.n	8012636 <ip4_reass+0x296>
 8012628:	4b0b      	ldr	r3, [pc, #44]	; (8012658 <ip4_reass+0x2b8>)
 801262a:	f240 229b 	movw	r2, #667	; 0x29b
 801262e:	490b      	ldr	r1, [pc, #44]	; (801265c <ip4_reass+0x2bc>)
 8012630:	480b      	ldr	r0, [pc, #44]	; (8012660 <ip4_reass+0x2c0>)
 8012632:	f000 fcc9 	bl	8012fc8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012636:	4b06      	ldr	r3, [pc, #24]	; (8012650 <ip4_reass+0x2b0>)
 8012638:	881a      	ldrh	r2, [r3, #0]
 801263a:	8c3b      	ldrh	r3, [r7, #32]
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	b29a      	uxth	r2, r3
 8012640:	4b03      	ldr	r3, [pc, #12]	; (8012650 <ip4_reass+0x2b0>)
 8012642:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	e038      	b.n	80126ba <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012648:	2300      	movs	r3, #0
 801264a:	e036      	b.n	80126ba <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801264c:	bf00      	nop
 801264e:	e00a      	b.n	8012666 <ip4_reass+0x2c6>
 8012650:	20010a34 	.word	0x20010a34
 8012654:	20010a30 	.word	0x20010a30
 8012658:	08016ae4 	.word	0x08016ae4
 801265c:	08016c54 	.word	0x08016c54
 8012660:	08016b2c 	.word	0x08016b2c
    goto nullreturn_ipr;
 8012664:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	2b00      	cmp	r3, #0
 801266a:	d106      	bne.n	801267a <ip4_reass+0x2da>
 801266c:	4b15      	ldr	r3, [pc, #84]	; (80126c4 <ip4_reass+0x324>)
 801266e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012672:	4915      	ldr	r1, [pc, #84]	; (80126c8 <ip4_reass+0x328>)
 8012674:	4815      	ldr	r0, [pc, #84]	; (80126cc <ip4_reass+0x32c>)
 8012676:	f000 fca7 	bl	8012fc8 <iprintf>
  if (ipr->p == NULL) {
 801267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d116      	bne.n	80126b0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012682:	4b13      	ldr	r3, [pc, #76]	; (80126d0 <ip4_reass+0x330>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012688:	429a      	cmp	r2, r3
 801268a:	d006      	beq.n	801269a <ip4_reass+0x2fa>
 801268c:	4b0d      	ldr	r3, [pc, #52]	; (80126c4 <ip4_reass+0x324>)
 801268e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012692:	4910      	ldr	r1, [pc, #64]	; (80126d4 <ip4_reass+0x334>)
 8012694:	480d      	ldr	r0, [pc, #52]	; (80126cc <ip4_reass+0x32c>)
 8012696:	f000 fc97 	bl	8012fc8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801269a:	2100      	movs	r1, #0
 801269c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801269e:	f7ff fce7 	bl	8012070 <ip_reass_dequeue_datagram>
 80126a2:	e006      	b.n	80126b2 <ip4_reass+0x312>
    goto nullreturn;
 80126a4:	bf00      	nop
 80126a6:	e004      	b.n	80126b2 <ip4_reass+0x312>
    goto nullreturn;
 80126a8:	bf00      	nop
 80126aa:	e002      	b.n	80126b2 <ip4_reass+0x312>
      goto nullreturn;
 80126ac:	bf00      	nop
 80126ae:	e000      	b.n	80126b2 <ip4_reass+0x312>
  }

nullreturn:
 80126b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f7f5 ff0a 	bl	80084cc <pbuf_free>
  return NULL;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3738      	adds	r7, #56	; 0x38
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	08016ae4 	.word	0x08016ae4
 80126c8:	08016c70 	.word	0x08016c70
 80126cc:	08016b2c 	.word	0x08016b2c
 80126d0:	20010a30 	.word	0x20010a30
 80126d4:	08016c7c 	.word	0x08016c7c

080126d8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80126dc:	2005      	movs	r0, #5
 80126de:	f7f5 f837 	bl	8007750 <memp_malloc>
 80126e2:	4603      	mov	r3, r0
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d106      	bne.n	8012704 <ip_frag_free_pbuf_custom_ref+0x1c>
 80126f6:	4b07      	ldr	r3, [pc, #28]	; (8012714 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80126f8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80126fc:	4906      	ldr	r1, [pc, #24]	; (8012718 <ip_frag_free_pbuf_custom_ref+0x30>)
 80126fe:	4807      	ldr	r0, [pc, #28]	; (801271c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012700:	f000 fc62 	bl	8012fc8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012704:	6879      	ldr	r1, [r7, #4]
 8012706:	2005      	movs	r0, #5
 8012708:	f7f5 f898 	bl	800783c <memp_free>
}
 801270c:	bf00      	nop
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}
 8012714:	08016ae4 	.word	0x08016ae4
 8012718:	08016c9c 	.word	0x08016c9c
 801271c:	08016b2c 	.word	0x08016b2c

08012720 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <ipfrag_free_pbuf_custom+0x20>
 8012732:	4b11      	ldr	r3, [pc, #68]	; (8012778 <ipfrag_free_pbuf_custom+0x58>)
 8012734:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012738:	4910      	ldr	r1, [pc, #64]	; (801277c <ipfrag_free_pbuf_custom+0x5c>)
 801273a:	4811      	ldr	r0, [pc, #68]	; (8012780 <ipfrag_free_pbuf_custom+0x60>)
 801273c:	f000 fc44 	bl	8012fc8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012740:	68fa      	ldr	r2, [r7, #12]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d006      	beq.n	8012756 <ipfrag_free_pbuf_custom+0x36>
 8012748:	4b0b      	ldr	r3, [pc, #44]	; (8012778 <ipfrag_free_pbuf_custom+0x58>)
 801274a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801274e:	490d      	ldr	r1, [pc, #52]	; (8012784 <ipfrag_free_pbuf_custom+0x64>)
 8012750:	480b      	ldr	r0, [pc, #44]	; (8012780 <ipfrag_free_pbuf_custom+0x60>)
 8012752:	f000 fc39 	bl	8012fc8 <iprintf>
  if (pcr->original != NULL) {
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	695b      	ldr	r3, [r3, #20]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d004      	beq.n	8012768 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	695b      	ldr	r3, [r3, #20]
 8012762:	4618      	mov	r0, r3
 8012764:	f7f5 feb2 	bl	80084cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f7ff ffbd 	bl	80126e8 <ip_frag_free_pbuf_custom_ref>
}
 801276e:	bf00      	nop
 8012770:	3710      	adds	r7, #16
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	08016ae4 	.word	0x08016ae4
 801277c:	08016ca8 	.word	0x08016ca8
 8012780:	08016b2c 	.word	0x08016b2c
 8012784:	08016cb4 	.word	0x08016cb4

08012788 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b094      	sub	sp, #80	; 0x50
 801278c:	af02      	add	r7, sp, #8
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012794:	2300      	movs	r3, #0
 8012796:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801279e:	3b14      	subs	r3, #20
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	da00      	bge.n	80127a6 <ip4_frag+0x1e>
 80127a4:	3307      	adds	r3, #7
 80127a6:	10db      	asrs	r3, r3, #3
 80127a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80127aa:	2314      	movs	r3, #20
 80127ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80127b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80127b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	f003 030f 	and.w	r3, r3, #15
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	2b14      	cmp	r3, #20
 80127c8:	d002      	beq.n	80127d0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80127ca:	f06f 0305 	mvn.w	r3, #5
 80127ce:	e110      	b.n	80129f2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	895b      	ldrh	r3, [r3, #10]
 80127d4:	2b13      	cmp	r3, #19
 80127d6:	d809      	bhi.n	80127ec <ip4_frag+0x64>
 80127d8:	4b88      	ldr	r3, [pc, #544]	; (80129fc <ip4_frag+0x274>)
 80127da:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80127de:	4988      	ldr	r1, [pc, #544]	; (8012a00 <ip4_frag+0x278>)
 80127e0:	4888      	ldr	r0, [pc, #544]	; (8012a04 <ip4_frag+0x27c>)
 80127e2:	f000 fbf1 	bl	8012fc8 <iprintf>
 80127e6:	f06f 0305 	mvn.w	r3, #5
 80127ea:	e102      	b.n	80129f2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80127ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ee:	88db      	ldrh	r3, [r3, #6]
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7f4 fad4 	bl	8006da0 <lwip_htons>
 80127f8:	4603      	mov	r3, r0
 80127fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80127fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012806:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801280c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	891b      	ldrh	r3, [r3, #8]
 8012812:	3b14      	subs	r3, #20
 8012814:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012818:	e0e1      	b.n	80129de <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801281a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801281c:	00db      	lsls	r3, r3, #3
 801281e:	b29b      	uxth	r3, r3
 8012820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012824:	4293      	cmp	r3, r2
 8012826:	bf28      	it	cs
 8012828:	4613      	movcs	r3, r2
 801282a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801282c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012830:	2114      	movs	r1, #20
 8012832:	200e      	movs	r0, #14
 8012834:	f7f5 fb66 	bl	8007f04 <pbuf_alloc>
 8012838:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	2b00      	cmp	r3, #0
 801283e:	f000 80d5 	beq.w	80129ec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012844:	895b      	ldrh	r3, [r3, #10]
 8012846:	2b13      	cmp	r3, #19
 8012848:	d806      	bhi.n	8012858 <ip4_frag+0xd0>
 801284a:	4b6c      	ldr	r3, [pc, #432]	; (80129fc <ip4_frag+0x274>)
 801284c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012850:	496d      	ldr	r1, [pc, #436]	; (8012a08 <ip4_frag+0x280>)
 8012852:	486c      	ldr	r0, [pc, #432]	; (8012a04 <ip4_frag+0x27c>)
 8012854:	f000 fbb8 	bl	8012fc8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285a:	685b      	ldr	r3, [r3, #4]
 801285c:	2214      	movs	r2, #20
 801285e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012860:	4618      	mov	r0, r3
 8012862:	f000 fce1 	bl	8013228 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801286c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801286e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012872:	e064      	b.n	801293e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	895a      	ldrh	r2, [r3, #10]
 8012878:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801287a:	1ad3      	subs	r3, r2, r3
 801287c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	895b      	ldrh	r3, [r3, #10]
 8012882:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012884:	429a      	cmp	r2, r3
 8012886:	d906      	bls.n	8012896 <ip4_frag+0x10e>
 8012888:	4b5c      	ldr	r3, [pc, #368]	; (80129fc <ip4_frag+0x274>)
 801288a:	f240 322d 	movw	r2, #813	; 0x32d
 801288e:	495f      	ldr	r1, [pc, #380]	; (8012a0c <ip4_frag+0x284>)
 8012890:	485c      	ldr	r0, [pc, #368]	; (8012a04 <ip4_frag+0x27c>)
 8012892:	f000 fb99 	bl	8012fc8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012896:	8bfa      	ldrh	r2, [r7, #30]
 8012898:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801289c:	4293      	cmp	r3, r2
 801289e:	bf28      	it	cs
 80128a0:	4613      	movcs	r3, r2
 80128a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80128a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d105      	bne.n	80128ba <ip4_frag+0x132>
        poff = 0;
 80128ae:	2300      	movs	r3, #0
 80128b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	60fb      	str	r3, [r7, #12]
        continue;
 80128b8:	e041      	b.n	801293e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80128ba:	f7ff ff0d 	bl	80126d8 <ip_frag_alloc_pbuf_custom_ref>
 80128be:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80128c0:	69bb      	ldr	r3, [r7, #24]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d103      	bne.n	80128ce <ip4_frag+0x146>
        pbuf_free(rambuf);
 80128c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128c8:	f7f5 fe00 	bl	80084cc <pbuf_free>
        goto memerr;
 80128cc:	e08f      	b.n	80129ee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128ce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80128d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80128d6:	4413      	add	r3, r2
 80128d8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80128dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80128e0:	9201      	str	r2, [sp, #4]
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	4603      	mov	r3, r0
 80128e6:	2241      	movs	r2, #65	; 0x41
 80128e8:	2000      	movs	r0, #0
 80128ea:	f7f5 fc35 	bl	8008158 <pbuf_alloced_custom>
 80128ee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d106      	bne.n	8012904 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80128f6:	69b8      	ldr	r0, [r7, #24]
 80128f8:	f7ff fef6 	bl	80126e8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80128fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80128fe:	f7f5 fde5 	bl	80084cc <pbuf_free>
        goto memerr;
 8012902:	e074      	b.n	80129ee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012904:	68f8      	ldr	r0, [r7, #12]
 8012906:	f7f5 fe87 	bl	8008618 <pbuf_ref>
      pcr->original = p;
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	4a3f      	ldr	r2, [pc, #252]	; (8012a10 <ip4_frag+0x288>)
 8012914:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012916:	6979      	ldr	r1, [r7, #20]
 8012918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801291a:	f7f5 fea5 	bl	8008668 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801291e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012922:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012926:	1ad3      	subs	r3, r2, r3
 8012928:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801292c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012930:	2b00      	cmp	r3, #0
 8012932:	d004      	beq.n	801293e <ip4_frag+0x1b6>
        poff = 0;
 8012934:	2300      	movs	r3, #0
 8012936:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801293e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012942:	2b00      	cmp	r3, #0
 8012944:	d196      	bne.n	8012874 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012946:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012948:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801294c:	4413      	add	r3, r2
 801294e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012954:	f1a3 0213 	sub.w	r2, r3, #19
 8012958:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801295c:	429a      	cmp	r2, r3
 801295e:	bfcc      	ite	gt
 8012960:	2301      	movgt	r3, #1
 8012962:	2300      	movle	r3, #0
 8012964:	b2db      	uxtb	r3, r3
 8012966:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012968:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801296c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012970:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012972:	6a3b      	ldr	r3, [r7, #32]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <ip4_frag+0x1f6>
 8012978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801297a:	2b00      	cmp	r3, #0
 801297c:	d003      	beq.n	8012986 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801297e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012980:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012984:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012986:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012988:	4618      	mov	r0, r3
 801298a:	f7f4 fa09 	bl	8006da0 <lwip_htons>
 801298e:	4603      	mov	r3, r0
 8012990:	461a      	mov	r2, r3
 8012992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012994:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012996:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012998:	3314      	adds	r3, #20
 801299a:	b29b      	uxth	r3, r3
 801299c:	4618      	mov	r0, r3
 801299e:	f7f4 f9ff 	bl	8006da0 <lwip_htons>
 80129a2:	4603      	mov	r3, r0
 80129a4:	461a      	mov	r2, r3
 80129a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80129aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ac:	2200      	movs	r2, #0
 80129ae:	729a      	strb	r2, [r3, #10]
 80129b0:	2200      	movs	r2, #0
 80129b2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	695b      	ldr	r3, [r3, #20]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80129c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129c2:	f7f5 fd83 	bl	80084cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 80129c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80129ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80129cc:	1ad3      	subs	r3, r2, r3
 80129ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80129d2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80129d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129d8:	4413      	add	r3, r2
 80129da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80129de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f47f af19 	bne.w	801281a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80129e8:	2300      	movs	r3, #0
 80129ea:	e002      	b.n	80129f2 <ip4_frag+0x26a>
      goto memerr;
 80129ec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80129ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3748      	adds	r7, #72	; 0x48
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
 80129fa:	bf00      	nop
 80129fc:	08016ae4 	.word	0x08016ae4
 8012a00:	08016cc0 	.word	0x08016cc0
 8012a04:	08016b2c 	.word	0x08016b2c
 8012a08:	08016cdc 	.word	0x08016cdc
 8012a0c:	08016cfc 	.word	0x08016cfc
 8012a10:	08012721 	.word	0x08012721

08012a14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012a1e:	230e      	movs	r3, #14
 8012a20:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	895b      	ldrh	r3, [r3, #10]
 8012a26:	2b0e      	cmp	r3, #14
 8012a28:	d96e      	bls.n	8012b08 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	7bdb      	ldrb	r3, [r3, #15]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a38:	3301      	adds	r3, #1
 8012a3a:	b2da      	uxtb	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	7b1a      	ldrb	r2, [r3, #12]
 8012a4a:	7b5b      	ldrb	r3, [r3, #13]
 8012a4c:	021b      	lsls	r3, r3, #8
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	f003 0301 	and.w	r3, r3, #1
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d023      	beq.n	8012aa6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	d10f      	bne.n	8012a86 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	785b      	ldrb	r3, [r3, #1]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d11b      	bne.n	8012aa6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012a72:	2b5e      	cmp	r3, #94	; 0x5e
 8012a74:	d117      	bne.n	8012aa6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	7b5b      	ldrb	r3, [r3, #13]
 8012a7a:	f043 0310 	orr.w	r3, r3, #16
 8012a7e:	b2da      	uxtb	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	735a      	strb	r2, [r3, #13]
 8012a84:	e00f      	b.n	8012aa6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	2206      	movs	r2, #6
 8012a8a:	4928      	ldr	r1, [pc, #160]	; (8012b2c <ethernet_input+0x118>)
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f000 faf0 	bl	8013072 <memcmp>
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d106      	bne.n	8012aa6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	7b5b      	ldrb	r3, [r3, #13]
 8012a9c:	f043 0308 	orr.w	r3, r3, #8
 8012aa0:	b2da      	uxtb	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012aa6:	89fb      	ldrh	r3, [r7, #14]
 8012aa8:	2b08      	cmp	r3, #8
 8012aaa:	d003      	beq.n	8012ab4 <ethernet_input+0xa0>
 8012aac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012ab0:	d014      	beq.n	8012adc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012ab2:	e032      	b.n	8012b1a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012aba:	f003 0308 	and.w	r3, r3, #8
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d024      	beq.n	8012b0c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012ac2:	8afb      	ldrh	r3, [r7, #22]
 8012ac4:	4619      	mov	r1, r3
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7f5 fc7a 	bl	80083c0 <pbuf_remove_header>
 8012acc:	4603      	mov	r3, r0
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d11e      	bne.n	8012b10 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012ad2:	6839      	ldr	r1, [r7, #0]
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7fe ff03 	bl	80118e0 <ip4_input>
      break;
 8012ada:	e013      	b.n	8012b04 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ae2:	f003 0308 	and.w	r3, r3, #8
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d014      	beq.n	8012b14 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012aea:	8afb      	ldrh	r3, [r7, #22]
 8012aec:	4619      	mov	r1, r3
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7f5 fc66 	bl	80083c0 <pbuf_remove_header>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10e      	bne.n	8012b18 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012afa:	6839      	ldr	r1, [r7, #0]
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7fe f89f 	bl	8010c40 <etharp_input>
      break;
 8012b02:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012b04:	2300      	movs	r3, #0
 8012b06:	e00c      	b.n	8012b22 <ethernet_input+0x10e>
    goto free_and_return;
 8012b08:	bf00      	nop
 8012b0a:	e006      	b.n	8012b1a <ethernet_input+0x106>
        goto free_and_return;
 8012b0c:	bf00      	nop
 8012b0e:	e004      	b.n	8012b1a <ethernet_input+0x106>
        goto free_and_return;
 8012b10:	bf00      	nop
 8012b12:	e002      	b.n	8012b1a <ethernet_input+0x106>
        goto free_and_return;
 8012b14:	bf00      	nop
 8012b16:	e000      	b.n	8012b1a <ethernet_input+0x106>
        goto free_and_return;
 8012b18:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f7f5 fcd6 	bl	80084cc <pbuf_free>
  return ERR_OK;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3718      	adds	r7, #24
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	08016eec 	.word	0x08016eec

08012b30 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b086      	sub	sp, #24
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
 8012b3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012b3e:	8c3b      	ldrh	r3, [r7, #32]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7f4 f92d 	bl	8006da0 <lwip_htons>
 8012b46:	4603      	mov	r3, r0
 8012b48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012b4a:	210e      	movs	r1, #14
 8012b4c:	68b8      	ldr	r0, [r7, #8]
 8012b4e:	f7f5 fc27 	bl	80083a0 <pbuf_add_header>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d125      	bne.n	8012ba4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	8afa      	ldrh	r2, [r7, #22]
 8012b62:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	2206      	movs	r2, #6
 8012b68:	6839      	ldr	r1, [r7, #0]
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f000 fb5c 	bl	8013228 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	3306      	adds	r3, #6
 8012b74:	2206      	movs	r2, #6
 8012b76:	6879      	ldr	r1, [r7, #4]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f000 fb55 	bl	8013228 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b84:	2b06      	cmp	r3, #6
 8012b86:	d006      	beq.n	8012b96 <ethernet_output+0x66>
 8012b88:	4b0a      	ldr	r3, [pc, #40]	; (8012bb4 <ethernet_output+0x84>)
 8012b8a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012b8e:	490a      	ldr	r1, [pc, #40]	; (8012bb8 <ethernet_output+0x88>)
 8012b90:	480a      	ldr	r0, [pc, #40]	; (8012bbc <ethernet_output+0x8c>)
 8012b92:	f000 fa19 	bl	8012fc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	699b      	ldr	r3, [r3, #24]
 8012b9a:	68b9      	ldr	r1, [r7, #8]
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	4798      	blx	r3
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	e002      	b.n	8012baa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012ba4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012ba6:	f06f 0301 	mvn.w	r3, #1
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3718      	adds	r7, #24
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	08016d0c 	.word	0x08016d0c
 8012bb8:	08016d44 	.word	0x08016d44
 8012bbc:	08016d78 	.word	0x08016d78

08012bc0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b086      	sub	sp, #24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	60bb      	str	r3, [r7, #8]
 8012bce:	2304      	movs	r3, #4
 8012bd0:	60fb      	str	r3, [r7, #12]
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	613b      	str	r3, [r7, #16]
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012bda:	f107 0308 	add.w	r3, r7, #8
 8012bde:	2100      	movs	r1, #0
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7f1 f9fd 	bl	8003fe0 <osMessageCreate>
 8012be6:	4602      	mov	r2, r0
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d102      	bne.n	8012bfa <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf8:	e000      	b.n	8012bfc <sys_mbox_new+0x3c>

  return ERR_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3718      	adds	r7, #24
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b084      	sub	sp, #16
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	6839      	ldr	r1, [r7, #0]
 8012c14:	2200      	movs	r2, #0
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7f1 fa0a 	bl	8004030 <osMessagePut>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d102      	bne.n	8012c28 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012c22:	2300      	movs	r3, #0
 8012c24:	73fb      	strb	r3, [r7, #15]
 8012c26:	e001      	b.n	8012c2c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012c28:	23ff      	movs	r3, #255	; 0xff
 8012c2a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3710      	adds	r7, #16
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08c      	sub	sp, #48	; 0x30
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	61f8      	str	r0, [r7, #28]
 8012c40:	61b9      	str	r1, [r7, #24]
 8012c42:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012c44:	f7f1 f83c 	bl	8003cc0 <osKernelSysTick>
 8012c48:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d017      	beq.n	8012c80 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	6819      	ldr	r1, [r3, #0]
 8012c54:	f107 0320 	add.w	r3, r7, #32
 8012c58:	697a      	ldr	r2, [r7, #20]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7f1 fa28 	bl	80040b0 <osMessageGet>

    if(event.status == osEventMessage)
 8012c60:	6a3b      	ldr	r3, [r7, #32]
 8012c62:	2b10      	cmp	r3, #16
 8012c64:	d109      	bne.n	8012c7a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c68:	461a      	mov	r2, r3
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012c6e:	f7f1 f827 	bl	8003cc0 <osKernelSysTick>
 8012c72:	4602      	mov	r2, r0
 8012c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c76:	1ad3      	subs	r3, r2, r3
 8012c78:	e019      	b.n	8012cae <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8012c7e:	e016      	b.n	8012cae <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	6819      	ldr	r1, [r3, #0]
 8012c84:	463b      	mov	r3, r7
 8012c86:	f04f 32ff 	mov.w	r2, #4294967295
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7f1 fa10 	bl	80040b0 <osMessageGet>
 8012c90:	f107 0320 	add.w	r3, r7, #32
 8012c94:	463a      	mov	r2, r7
 8012c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8012c98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	69bb      	ldr	r3, [r7, #24]
 8012ca2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012ca4:	f7f1 f80c 	bl	8003cc0 <osKernelSysTick>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cac:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012cae:	4618      	mov	r0, r3
 8012cb0:	3730      	adds	r7, #48	; 0x30
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012cb6:	b480      	push	{r7}
 8012cb8:	b083      	sub	sp, #12
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d101      	bne.n	8012cca <sys_mbox_valid+0x14>
    return 0;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	e000      	b.n	8012ccc <sys_mbox_valid+0x16>
  else
    return 1;
 8012cca:	2301      	movs	r3, #1
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	370c      	adds	r7, #12
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012cdc:	4803      	ldr	r0, [pc, #12]	; (8012cec <sys_init+0x14>)
 8012cde:	f7f1 f85f 	bl	8003da0 <osMutexCreate>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	4a02      	ldr	r2, [pc, #8]	; (8012cf0 <sys_init+0x18>)
 8012ce6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012ce8:	bf00      	nop
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	08016efc 	.word	0x08016efc
 8012cf0:	20010a38 	.word	0x20010a38

08012cf4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	60bb      	str	r3, [r7, #8]
 8012d00:	2300      	movs	r3, #0
 8012d02:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012d04:	f107 0308 	add.w	r3, r7, #8
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f7f1 f849 	bl	8003da0 <osMutexCreate>
 8012d0e:	4602      	mov	r2, r0
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d102      	bne.n	8012d22 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d20:	e000      	b.n	8012d24 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012d22:	2300      	movs	r3, #0
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3710      	adds	r7, #16
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	bd80      	pop	{r7, pc}

08012d2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f04f 31ff 	mov.w	r1, #4294967295
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f1 f847 	bl	8003dd0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012d42:	bf00      	nop
 8012d44:	3708      	adds	r7, #8
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012d4a:	b580      	push	{r7, lr}
 8012d4c:	b082      	sub	sp, #8
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f1 f888 	bl	8003e6c <osMutexRelease>
}
 8012d5c:	bf00      	nop
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b08c      	sub	sp, #48	; 0x30
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	607a      	str	r2, [r7, #4]
 8012d70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012d72:	f107 0314 	add.w	r3, r7, #20
 8012d76:	2200      	movs	r2, #0
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	605a      	str	r2, [r3, #4]
 8012d7c:	609a      	str	r2, [r3, #8]
 8012d7e:	60da      	str	r2, [r3, #12]
 8012d80:	611a      	str	r2, [r3, #16]
 8012d82:	615a      	str	r2, [r3, #20]
 8012d84:	619a      	str	r2, [r3, #24]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	617b      	str	r3, [r7, #20]
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	61bb      	str	r3, [r7, #24]
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	b21b      	sxth	r3, r3
 8012d92:	83bb      	strh	r3, [r7, #28]
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012d98:	f107 0314 	add.w	r3, r7, #20
 8012d9c:	6879      	ldr	r1, [r7, #4]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7f0 ff9e 	bl	8003ce0 <osThreadCreate>
 8012da4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3730      	adds	r7, #48	; 0x30
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
	...

08012db0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012db4:	4b04      	ldr	r3, [pc, #16]	; (8012dc8 <sys_arch_protect+0x18>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f04f 31ff 	mov.w	r1, #4294967295
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7f1 f807 	bl	8003dd0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012dc2:	2301      	movs	r3, #1
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	20010a38 	.word	0x20010a38

08012dcc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012dd4:	4b04      	ldr	r3, [pc, #16]	; (8012de8 <sys_arch_unprotect+0x1c>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7f1 f847 	bl	8003e6c <osMutexRelease>
}
 8012dde:	bf00      	nop
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	20010a38 	.word	0x20010a38

08012dec <rand>:
 8012dec:	4b16      	ldr	r3, [pc, #88]	; (8012e48 <rand+0x5c>)
 8012dee:	b510      	push	{r4, lr}
 8012df0:	681c      	ldr	r4, [r3, #0]
 8012df2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012df4:	b9b3      	cbnz	r3, 8012e24 <rand+0x38>
 8012df6:	2018      	movs	r0, #24
 8012df8:	f000 fa8e 	bl	8013318 <malloc>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	6320      	str	r0, [r4, #48]	; 0x30
 8012e00:	b920      	cbnz	r0, 8012e0c <rand+0x20>
 8012e02:	4b12      	ldr	r3, [pc, #72]	; (8012e4c <rand+0x60>)
 8012e04:	4812      	ldr	r0, [pc, #72]	; (8012e50 <rand+0x64>)
 8012e06:	2152      	movs	r1, #82	; 0x52
 8012e08:	f000 fa1c 	bl	8013244 <__assert_func>
 8012e0c:	4911      	ldr	r1, [pc, #68]	; (8012e54 <rand+0x68>)
 8012e0e:	4b12      	ldr	r3, [pc, #72]	; (8012e58 <rand+0x6c>)
 8012e10:	e9c0 1300 	strd	r1, r3, [r0]
 8012e14:	4b11      	ldr	r3, [pc, #68]	; (8012e5c <rand+0x70>)
 8012e16:	6083      	str	r3, [r0, #8]
 8012e18:	230b      	movs	r3, #11
 8012e1a:	8183      	strh	r3, [r0, #12]
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	2001      	movs	r0, #1
 8012e20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012e24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012e26:	480e      	ldr	r0, [pc, #56]	; (8012e60 <rand+0x74>)
 8012e28:	690b      	ldr	r3, [r1, #16]
 8012e2a:	694c      	ldr	r4, [r1, #20]
 8012e2c:	4a0d      	ldr	r2, [pc, #52]	; (8012e64 <rand+0x78>)
 8012e2e:	4358      	muls	r0, r3
 8012e30:	fb02 0004 	mla	r0, r2, r4, r0
 8012e34:	fba3 3202 	umull	r3, r2, r3, r2
 8012e38:	3301      	adds	r3, #1
 8012e3a:	eb40 0002 	adc.w	r0, r0, r2
 8012e3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012e42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012e46:	bd10      	pop	{r4, pc}
 8012e48:	20000078 	.word	0x20000078
 8012e4c:	08016f04 	.word	0x08016f04
 8012e50:	08016f1b 	.word	0x08016f1b
 8012e54:	abcd330e 	.word	0xabcd330e
 8012e58:	e66d1234 	.word	0xe66d1234
 8012e5c:	0005deec 	.word	0x0005deec
 8012e60:	5851f42d 	.word	0x5851f42d
 8012e64:	4c957f2d 	.word	0x4c957f2d

08012e68 <std>:
 8012e68:	2300      	movs	r3, #0
 8012e6a:	b510      	push	{r4, lr}
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8012e72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e76:	6083      	str	r3, [r0, #8]
 8012e78:	8181      	strh	r1, [r0, #12]
 8012e7a:	6643      	str	r3, [r0, #100]	; 0x64
 8012e7c:	81c2      	strh	r2, [r0, #14]
 8012e7e:	6183      	str	r3, [r0, #24]
 8012e80:	4619      	mov	r1, r3
 8012e82:	2208      	movs	r2, #8
 8012e84:	305c      	adds	r0, #92	; 0x5c
 8012e86:	f000 f904 	bl	8013092 <memset>
 8012e8a:	4b05      	ldr	r3, [pc, #20]	; (8012ea0 <std+0x38>)
 8012e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8012e8e:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <std+0x3c>)
 8012e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e92:	4b05      	ldr	r3, [pc, #20]	; (8012ea8 <std+0x40>)
 8012e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e96:	4b05      	ldr	r3, [pc, #20]	; (8012eac <std+0x44>)
 8012e98:	6224      	str	r4, [r4, #32]
 8012e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8012e9c:	bd10      	pop	{r4, pc}
 8012e9e:	bf00      	nop
 8012ea0:	08012fed 	.word	0x08012fed
 8012ea4:	0801300f 	.word	0x0801300f
 8012ea8:	08013047 	.word	0x08013047
 8012eac:	0801306b 	.word	0x0801306b

08012eb0 <stdio_exit_handler>:
 8012eb0:	4a02      	ldr	r2, [pc, #8]	; (8012ebc <stdio_exit_handler+0xc>)
 8012eb2:	4903      	ldr	r1, [pc, #12]	; (8012ec0 <stdio_exit_handler+0x10>)
 8012eb4:	4803      	ldr	r0, [pc, #12]	; (8012ec4 <stdio_exit_handler+0x14>)
 8012eb6:	f000 b869 	b.w	8012f8c <_fwalk_sglue>
 8012eba:	bf00      	nop
 8012ebc:	20000020 	.word	0x20000020
 8012ec0:	08013b35 	.word	0x08013b35
 8012ec4:	2000002c 	.word	0x2000002c

08012ec8 <cleanup_stdio>:
 8012ec8:	6841      	ldr	r1, [r0, #4]
 8012eca:	4b0c      	ldr	r3, [pc, #48]	; (8012efc <cleanup_stdio+0x34>)
 8012ecc:	4299      	cmp	r1, r3
 8012ece:	b510      	push	{r4, lr}
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	d001      	beq.n	8012ed8 <cleanup_stdio+0x10>
 8012ed4:	f000 fe2e 	bl	8013b34 <_fflush_r>
 8012ed8:	68a1      	ldr	r1, [r4, #8]
 8012eda:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <cleanup_stdio+0x38>)
 8012edc:	4299      	cmp	r1, r3
 8012ede:	d002      	beq.n	8012ee6 <cleanup_stdio+0x1e>
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fe27 	bl	8013b34 <_fflush_r>
 8012ee6:	68e1      	ldr	r1, [r4, #12]
 8012ee8:	4b06      	ldr	r3, [pc, #24]	; (8012f04 <cleanup_stdio+0x3c>)
 8012eea:	4299      	cmp	r1, r3
 8012eec:	d004      	beq.n	8012ef8 <cleanup_stdio+0x30>
 8012eee:	4620      	mov	r0, r4
 8012ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ef4:	f000 be1e 	b.w	8013b34 <_fflush_r>
 8012ef8:	bd10      	pop	{r4, pc}
 8012efa:	bf00      	nop
 8012efc:	20010a3c 	.word	0x20010a3c
 8012f00:	20010aa4 	.word	0x20010aa4
 8012f04:	20010b0c 	.word	0x20010b0c

08012f08 <global_stdio_init.part.0>:
 8012f08:	b510      	push	{r4, lr}
 8012f0a:	4b0b      	ldr	r3, [pc, #44]	; (8012f38 <global_stdio_init.part.0+0x30>)
 8012f0c:	4c0b      	ldr	r4, [pc, #44]	; (8012f3c <global_stdio_init.part.0+0x34>)
 8012f0e:	4a0c      	ldr	r2, [pc, #48]	; (8012f40 <global_stdio_init.part.0+0x38>)
 8012f10:	601a      	str	r2, [r3, #0]
 8012f12:	4620      	mov	r0, r4
 8012f14:	2200      	movs	r2, #0
 8012f16:	2104      	movs	r1, #4
 8012f18:	f7ff ffa6 	bl	8012e68 <std>
 8012f1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012f20:	2201      	movs	r2, #1
 8012f22:	2109      	movs	r1, #9
 8012f24:	f7ff ffa0 	bl	8012e68 <std>
 8012f28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012f2c:	2202      	movs	r2, #2
 8012f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f32:	2112      	movs	r1, #18
 8012f34:	f7ff bf98 	b.w	8012e68 <std>
 8012f38:	20010b74 	.word	0x20010b74
 8012f3c:	20010a3c 	.word	0x20010a3c
 8012f40:	08012eb1 	.word	0x08012eb1

08012f44 <__sfp_lock_acquire>:
 8012f44:	4801      	ldr	r0, [pc, #4]	; (8012f4c <__sfp_lock_acquire+0x8>)
 8012f46:	f000 b96d 	b.w	8013224 <__retarget_lock_acquire_recursive>
 8012f4a:	bf00      	nop
 8012f4c:	20010b7d 	.word	0x20010b7d

08012f50 <__sfp_lock_release>:
 8012f50:	4801      	ldr	r0, [pc, #4]	; (8012f58 <__sfp_lock_release+0x8>)
 8012f52:	f000 b968 	b.w	8013226 <__retarget_lock_release_recursive>
 8012f56:	bf00      	nop
 8012f58:	20010b7d 	.word	0x20010b7d

08012f5c <__sinit>:
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	4604      	mov	r4, r0
 8012f60:	f7ff fff0 	bl	8012f44 <__sfp_lock_acquire>
 8012f64:	6a23      	ldr	r3, [r4, #32]
 8012f66:	b11b      	cbz	r3, 8012f70 <__sinit+0x14>
 8012f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f6c:	f7ff bff0 	b.w	8012f50 <__sfp_lock_release>
 8012f70:	4b04      	ldr	r3, [pc, #16]	; (8012f84 <__sinit+0x28>)
 8012f72:	6223      	str	r3, [r4, #32]
 8012f74:	4b04      	ldr	r3, [pc, #16]	; (8012f88 <__sinit+0x2c>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d1f5      	bne.n	8012f68 <__sinit+0xc>
 8012f7c:	f7ff ffc4 	bl	8012f08 <global_stdio_init.part.0>
 8012f80:	e7f2      	b.n	8012f68 <__sinit+0xc>
 8012f82:	bf00      	nop
 8012f84:	08012ec9 	.word	0x08012ec9
 8012f88:	20010b74 	.word	0x20010b74

08012f8c <_fwalk_sglue>:
 8012f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f90:	4607      	mov	r7, r0
 8012f92:	4688      	mov	r8, r1
 8012f94:	4614      	mov	r4, r2
 8012f96:	2600      	movs	r6, #0
 8012f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8012fa0:	d505      	bpl.n	8012fae <_fwalk_sglue+0x22>
 8012fa2:	6824      	ldr	r4, [r4, #0]
 8012fa4:	2c00      	cmp	r4, #0
 8012fa6:	d1f7      	bne.n	8012f98 <_fwalk_sglue+0xc>
 8012fa8:	4630      	mov	r0, r6
 8012faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fae:	89ab      	ldrh	r3, [r5, #12]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d907      	bls.n	8012fc4 <_fwalk_sglue+0x38>
 8012fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fb8:	3301      	adds	r3, #1
 8012fba:	d003      	beq.n	8012fc4 <_fwalk_sglue+0x38>
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	47c0      	blx	r8
 8012fc2:	4306      	orrs	r6, r0
 8012fc4:	3568      	adds	r5, #104	; 0x68
 8012fc6:	e7e9      	b.n	8012f9c <_fwalk_sglue+0x10>

08012fc8 <iprintf>:
 8012fc8:	b40f      	push	{r0, r1, r2, r3}
 8012fca:	b507      	push	{r0, r1, r2, lr}
 8012fcc:	4906      	ldr	r1, [pc, #24]	; (8012fe8 <iprintf+0x20>)
 8012fce:	ab04      	add	r3, sp, #16
 8012fd0:	6808      	ldr	r0, [r1, #0]
 8012fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fd6:	6881      	ldr	r1, [r0, #8]
 8012fd8:	9301      	str	r3, [sp, #4]
 8012fda:	f000 fa7b 	bl	80134d4 <_vfiprintf_r>
 8012fde:	b003      	add	sp, #12
 8012fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fe4:	b004      	add	sp, #16
 8012fe6:	4770      	bx	lr
 8012fe8:	20000078 	.word	0x20000078

08012fec <__sread>:
 8012fec:	b510      	push	{r4, lr}
 8012fee:	460c      	mov	r4, r1
 8012ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ff4:	f000 f8ce 	bl	8013194 <_read_r>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	bfab      	itete	ge
 8012ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8013000:	181b      	addge	r3, r3, r0
 8013002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013006:	bfac      	ite	ge
 8013008:	6563      	strge	r3, [r4, #84]	; 0x54
 801300a:	81a3      	strhlt	r3, [r4, #12]
 801300c:	bd10      	pop	{r4, pc}

0801300e <__swrite>:
 801300e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013012:	461f      	mov	r7, r3
 8013014:	898b      	ldrh	r3, [r1, #12]
 8013016:	05db      	lsls	r3, r3, #23
 8013018:	4605      	mov	r5, r0
 801301a:	460c      	mov	r4, r1
 801301c:	4616      	mov	r6, r2
 801301e:	d505      	bpl.n	801302c <__swrite+0x1e>
 8013020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013024:	2302      	movs	r3, #2
 8013026:	2200      	movs	r2, #0
 8013028:	f000 f8a2 	bl	8013170 <_lseek_r>
 801302c:	89a3      	ldrh	r3, [r4, #12]
 801302e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013036:	81a3      	strh	r3, [r4, #12]
 8013038:	4632      	mov	r2, r6
 801303a:	463b      	mov	r3, r7
 801303c:	4628      	mov	r0, r5
 801303e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013042:	f000 b8b9 	b.w	80131b8 <_write_r>

08013046 <__sseek>:
 8013046:	b510      	push	{r4, lr}
 8013048:	460c      	mov	r4, r1
 801304a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801304e:	f000 f88f 	bl	8013170 <_lseek_r>
 8013052:	1c43      	adds	r3, r0, #1
 8013054:	89a3      	ldrh	r3, [r4, #12]
 8013056:	bf15      	itete	ne
 8013058:	6560      	strne	r0, [r4, #84]	; 0x54
 801305a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801305e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013062:	81a3      	strheq	r3, [r4, #12]
 8013064:	bf18      	it	ne
 8013066:	81a3      	strhne	r3, [r4, #12]
 8013068:	bd10      	pop	{r4, pc}

0801306a <__sclose>:
 801306a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801306e:	f000 b819 	b.w	80130a4 <_close_r>

08013072 <memcmp>:
 8013072:	b510      	push	{r4, lr}
 8013074:	3901      	subs	r1, #1
 8013076:	4402      	add	r2, r0
 8013078:	4290      	cmp	r0, r2
 801307a:	d101      	bne.n	8013080 <memcmp+0xe>
 801307c:	2000      	movs	r0, #0
 801307e:	e005      	b.n	801308c <memcmp+0x1a>
 8013080:	7803      	ldrb	r3, [r0, #0]
 8013082:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013086:	42a3      	cmp	r3, r4
 8013088:	d001      	beq.n	801308e <memcmp+0x1c>
 801308a:	1b18      	subs	r0, r3, r4
 801308c:	bd10      	pop	{r4, pc}
 801308e:	3001      	adds	r0, #1
 8013090:	e7f2      	b.n	8013078 <memcmp+0x6>

08013092 <memset>:
 8013092:	4402      	add	r2, r0
 8013094:	4603      	mov	r3, r0
 8013096:	4293      	cmp	r3, r2
 8013098:	d100      	bne.n	801309c <memset+0xa>
 801309a:	4770      	bx	lr
 801309c:	f803 1b01 	strb.w	r1, [r3], #1
 80130a0:	e7f9      	b.n	8013096 <memset+0x4>
	...

080130a4 <_close_r>:
 80130a4:	b538      	push	{r3, r4, r5, lr}
 80130a6:	4d06      	ldr	r5, [pc, #24]	; (80130c0 <_close_r+0x1c>)
 80130a8:	2300      	movs	r3, #0
 80130aa:	4604      	mov	r4, r0
 80130ac:	4608      	mov	r0, r1
 80130ae:	602b      	str	r3, [r5, #0]
 80130b0:	f7ed fda5 	bl	8000bfe <_close>
 80130b4:	1c43      	adds	r3, r0, #1
 80130b6:	d102      	bne.n	80130be <_close_r+0x1a>
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	b103      	cbz	r3, 80130be <_close_r+0x1a>
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	bd38      	pop	{r3, r4, r5, pc}
 80130c0:	20010b78 	.word	0x20010b78

080130c4 <_reclaim_reent>:
 80130c4:	4b29      	ldr	r3, [pc, #164]	; (801316c <_reclaim_reent+0xa8>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	4283      	cmp	r3, r0
 80130ca:	b570      	push	{r4, r5, r6, lr}
 80130cc:	4604      	mov	r4, r0
 80130ce:	d04b      	beq.n	8013168 <_reclaim_reent+0xa4>
 80130d0:	69c3      	ldr	r3, [r0, #28]
 80130d2:	b143      	cbz	r3, 80130e6 <_reclaim_reent+0x22>
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d144      	bne.n	8013164 <_reclaim_reent+0xa0>
 80130da:	69e3      	ldr	r3, [r4, #28]
 80130dc:	6819      	ldr	r1, [r3, #0]
 80130de:	b111      	cbz	r1, 80130e6 <_reclaim_reent+0x22>
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 f8cd 	bl	8013280 <_free_r>
 80130e6:	6961      	ldr	r1, [r4, #20]
 80130e8:	b111      	cbz	r1, 80130f0 <_reclaim_reent+0x2c>
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 f8c8 	bl	8013280 <_free_r>
 80130f0:	69e1      	ldr	r1, [r4, #28]
 80130f2:	b111      	cbz	r1, 80130fa <_reclaim_reent+0x36>
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 f8c3 	bl	8013280 <_free_r>
 80130fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80130fc:	b111      	cbz	r1, 8013104 <_reclaim_reent+0x40>
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 f8be 	bl	8013280 <_free_r>
 8013104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013106:	b111      	cbz	r1, 801310e <_reclaim_reent+0x4a>
 8013108:	4620      	mov	r0, r4
 801310a:	f000 f8b9 	bl	8013280 <_free_r>
 801310e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013110:	b111      	cbz	r1, 8013118 <_reclaim_reent+0x54>
 8013112:	4620      	mov	r0, r4
 8013114:	f000 f8b4 	bl	8013280 <_free_r>
 8013118:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801311a:	b111      	cbz	r1, 8013122 <_reclaim_reent+0x5e>
 801311c:	4620      	mov	r0, r4
 801311e:	f000 f8af 	bl	8013280 <_free_r>
 8013122:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013124:	b111      	cbz	r1, 801312c <_reclaim_reent+0x68>
 8013126:	4620      	mov	r0, r4
 8013128:	f000 f8aa 	bl	8013280 <_free_r>
 801312c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801312e:	b111      	cbz	r1, 8013136 <_reclaim_reent+0x72>
 8013130:	4620      	mov	r0, r4
 8013132:	f000 f8a5 	bl	8013280 <_free_r>
 8013136:	6a23      	ldr	r3, [r4, #32]
 8013138:	b1b3      	cbz	r3, 8013168 <_reclaim_reent+0xa4>
 801313a:	4620      	mov	r0, r4
 801313c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013140:	4718      	bx	r3
 8013142:	5949      	ldr	r1, [r1, r5]
 8013144:	b941      	cbnz	r1, 8013158 <_reclaim_reent+0x94>
 8013146:	3504      	adds	r5, #4
 8013148:	69e3      	ldr	r3, [r4, #28]
 801314a:	2d80      	cmp	r5, #128	; 0x80
 801314c:	68d9      	ldr	r1, [r3, #12]
 801314e:	d1f8      	bne.n	8013142 <_reclaim_reent+0x7e>
 8013150:	4620      	mov	r0, r4
 8013152:	f000 f895 	bl	8013280 <_free_r>
 8013156:	e7c0      	b.n	80130da <_reclaim_reent+0x16>
 8013158:	680e      	ldr	r6, [r1, #0]
 801315a:	4620      	mov	r0, r4
 801315c:	f000 f890 	bl	8013280 <_free_r>
 8013160:	4631      	mov	r1, r6
 8013162:	e7ef      	b.n	8013144 <_reclaim_reent+0x80>
 8013164:	2500      	movs	r5, #0
 8013166:	e7ef      	b.n	8013148 <_reclaim_reent+0x84>
 8013168:	bd70      	pop	{r4, r5, r6, pc}
 801316a:	bf00      	nop
 801316c:	20000078 	.word	0x20000078

08013170 <_lseek_r>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4d07      	ldr	r5, [pc, #28]	; (8013190 <_lseek_r+0x20>)
 8013174:	4604      	mov	r4, r0
 8013176:	4608      	mov	r0, r1
 8013178:	4611      	mov	r1, r2
 801317a:	2200      	movs	r2, #0
 801317c:	602a      	str	r2, [r5, #0]
 801317e:	461a      	mov	r2, r3
 8013180:	f7ed fd64 	bl	8000c4c <_lseek>
 8013184:	1c43      	adds	r3, r0, #1
 8013186:	d102      	bne.n	801318e <_lseek_r+0x1e>
 8013188:	682b      	ldr	r3, [r5, #0]
 801318a:	b103      	cbz	r3, 801318e <_lseek_r+0x1e>
 801318c:	6023      	str	r3, [r4, #0]
 801318e:	bd38      	pop	{r3, r4, r5, pc}
 8013190:	20010b78 	.word	0x20010b78

08013194 <_read_r>:
 8013194:	b538      	push	{r3, r4, r5, lr}
 8013196:	4d07      	ldr	r5, [pc, #28]	; (80131b4 <_read_r+0x20>)
 8013198:	4604      	mov	r4, r0
 801319a:	4608      	mov	r0, r1
 801319c:	4611      	mov	r1, r2
 801319e:	2200      	movs	r2, #0
 80131a0:	602a      	str	r2, [r5, #0]
 80131a2:	461a      	mov	r2, r3
 80131a4:	f7ed fcf2 	bl	8000b8c <_read>
 80131a8:	1c43      	adds	r3, r0, #1
 80131aa:	d102      	bne.n	80131b2 <_read_r+0x1e>
 80131ac:	682b      	ldr	r3, [r5, #0]
 80131ae:	b103      	cbz	r3, 80131b2 <_read_r+0x1e>
 80131b0:	6023      	str	r3, [r4, #0]
 80131b2:	bd38      	pop	{r3, r4, r5, pc}
 80131b4:	20010b78 	.word	0x20010b78

080131b8 <_write_r>:
 80131b8:	b538      	push	{r3, r4, r5, lr}
 80131ba:	4d07      	ldr	r5, [pc, #28]	; (80131d8 <_write_r+0x20>)
 80131bc:	4604      	mov	r4, r0
 80131be:	4608      	mov	r0, r1
 80131c0:	4611      	mov	r1, r2
 80131c2:	2200      	movs	r2, #0
 80131c4:	602a      	str	r2, [r5, #0]
 80131c6:	461a      	mov	r2, r3
 80131c8:	f7ed fcfd 	bl	8000bc6 <_write>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d102      	bne.n	80131d6 <_write_r+0x1e>
 80131d0:	682b      	ldr	r3, [r5, #0]
 80131d2:	b103      	cbz	r3, 80131d6 <_write_r+0x1e>
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	bd38      	pop	{r3, r4, r5, pc}
 80131d8:	20010b78 	.word	0x20010b78

080131dc <__libc_init_array>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	4d0d      	ldr	r5, [pc, #52]	; (8013214 <__libc_init_array+0x38>)
 80131e0:	4c0d      	ldr	r4, [pc, #52]	; (8013218 <__libc_init_array+0x3c>)
 80131e2:	1b64      	subs	r4, r4, r5
 80131e4:	10a4      	asrs	r4, r4, #2
 80131e6:	2600      	movs	r6, #0
 80131e8:	42a6      	cmp	r6, r4
 80131ea:	d109      	bne.n	8013200 <__libc_init_array+0x24>
 80131ec:	4d0b      	ldr	r5, [pc, #44]	; (801321c <__libc_init_array+0x40>)
 80131ee:	4c0c      	ldr	r4, [pc, #48]	; (8013220 <__libc_init_array+0x44>)
 80131f0:	f000 fe50 	bl	8013e94 <_init>
 80131f4:	1b64      	subs	r4, r4, r5
 80131f6:	10a4      	asrs	r4, r4, #2
 80131f8:	2600      	movs	r6, #0
 80131fa:	42a6      	cmp	r6, r4
 80131fc:	d105      	bne.n	801320a <__libc_init_array+0x2e>
 80131fe:	bd70      	pop	{r4, r5, r6, pc}
 8013200:	f855 3b04 	ldr.w	r3, [r5], #4
 8013204:	4798      	blx	r3
 8013206:	3601      	adds	r6, #1
 8013208:	e7ee      	b.n	80131e8 <__libc_init_array+0xc>
 801320a:	f855 3b04 	ldr.w	r3, [r5], #4
 801320e:	4798      	blx	r3
 8013210:	3601      	adds	r6, #1
 8013212:	e7f2      	b.n	80131fa <__libc_init_array+0x1e>
 8013214:	08016fec 	.word	0x08016fec
 8013218:	08016fec 	.word	0x08016fec
 801321c:	08016fec 	.word	0x08016fec
 8013220:	08016ff0 	.word	0x08016ff0

08013224 <__retarget_lock_acquire_recursive>:
 8013224:	4770      	bx	lr

08013226 <__retarget_lock_release_recursive>:
 8013226:	4770      	bx	lr

08013228 <memcpy>:
 8013228:	440a      	add	r2, r1
 801322a:	4291      	cmp	r1, r2
 801322c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013230:	d100      	bne.n	8013234 <memcpy+0xc>
 8013232:	4770      	bx	lr
 8013234:	b510      	push	{r4, lr}
 8013236:	f811 4b01 	ldrb.w	r4, [r1], #1
 801323a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801323e:	4291      	cmp	r1, r2
 8013240:	d1f9      	bne.n	8013236 <memcpy+0xe>
 8013242:	bd10      	pop	{r4, pc}

08013244 <__assert_func>:
 8013244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013246:	4614      	mov	r4, r2
 8013248:	461a      	mov	r2, r3
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <__assert_func+0x2c>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	4605      	mov	r5, r0
 8013250:	68d8      	ldr	r0, [r3, #12]
 8013252:	b14c      	cbz	r4, 8013268 <__assert_func+0x24>
 8013254:	4b07      	ldr	r3, [pc, #28]	; (8013274 <__assert_func+0x30>)
 8013256:	9100      	str	r1, [sp, #0]
 8013258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801325c:	4906      	ldr	r1, [pc, #24]	; (8013278 <__assert_func+0x34>)
 801325e:	462b      	mov	r3, r5
 8013260:	f000 fc90 	bl	8013b84 <fiprintf>
 8013264:	f000 fd46 	bl	8013cf4 <abort>
 8013268:	4b04      	ldr	r3, [pc, #16]	; (801327c <__assert_func+0x38>)
 801326a:	461c      	mov	r4, r3
 801326c:	e7f3      	b.n	8013256 <__assert_func+0x12>
 801326e:	bf00      	nop
 8013270:	20000078 	.word	0x20000078
 8013274:	08016f73 	.word	0x08016f73
 8013278:	08016f80 	.word	0x08016f80
 801327c:	08016fae 	.word	0x08016fae

08013280 <_free_r>:
 8013280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013282:	2900      	cmp	r1, #0
 8013284:	d044      	beq.n	8013310 <_free_r+0x90>
 8013286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801328a:	9001      	str	r0, [sp, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	f1a1 0404 	sub.w	r4, r1, #4
 8013292:	bfb8      	it	lt
 8013294:	18e4      	addlt	r4, r4, r3
 8013296:	f000 f8e7 	bl	8013468 <__malloc_lock>
 801329a:	4a1e      	ldr	r2, [pc, #120]	; (8013314 <_free_r+0x94>)
 801329c:	9801      	ldr	r0, [sp, #4]
 801329e:	6813      	ldr	r3, [r2, #0]
 80132a0:	b933      	cbnz	r3, 80132b0 <_free_r+0x30>
 80132a2:	6063      	str	r3, [r4, #4]
 80132a4:	6014      	str	r4, [r2, #0]
 80132a6:	b003      	add	sp, #12
 80132a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132ac:	f000 b8e2 	b.w	8013474 <__malloc_unlock>
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	d908      	bls.n	80132c6 <_free_r+0x46>
 80132b4:	6825      	ldr	r5, [r4, #0]
 80132b6:	1961      	adds	r1, r4, r5
 80132b8:	428b      	cmp	r3, r1
 80132ba:	bf01      	itttt	eq
 80132bc:	6819      	ldreq	r1, [r3, #0]
 80132be:	685b      	ldreq	r3, [r3, #4]
 80132c0:	1949      	addeq	r1, r1, r5
 80132c2:	6021      	streq	r1, [r4, #0]
 80132c4:	e7ed      	b.n	80132a2 <_free_r+0x22>
 80132c6:	461a      	mov	r2, r3
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	b10b      	cbz	r3, 80132d0 <_free_r+0x50>
 80132cc:	42a3      	cmp	r3, r4
 80132ce:	d9fa      	bls.n	80132c6 <_free_r+0x46>
 80132d0:	6811      	ldr	r1, [r2, #0]
 80132d2:	1855      	adds	r5, r2, r1
 80132d4:	42a5      	cmp	r5, r4
 80132d6:	d10b      	bne.n	80132f0 <_free_r+0x70>
 80132d8:	6824      	ldr	r4, [r4, #0]
 80132da:	4421      	add	r1, r4
 80132dc:	1854      	adds	r4, r2, r1
 80132de:	42a3      	cmp	r3, r4
 80132e0:	6011      	str	r1, [r2, #0]
 80132e2:	d1e0      	bne.n	80132a6 <_free_r+0x26>
 80132e4:	681c      	ldr	r4, [r3, #0]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	6053      	str	r3, [r2, #4]
 80132ea:	440c      	add	r4, r1
 80132ec:	6014      	str	r4, [r2, #0]
 80132ee:	e7da      	b.n	80132a6 <_free_r+0x26>
 80132f0:	d902      	bls.n	80132f8 <_free_r+0x78>
 80132f2:	230c      	movs	r3, #12
 80132f4:	6003      	str	r3, [r0, #0]
 80132f6:	e7d6      	b.n	80132a6 <_free_r+0x26>
 80132f8:	6825      	ldr	r5, [r4, #0]
 80132fa:	1961      	adds	r1, r4, r5
 80132fc:	428b      	cmp	r3, r1
 80132fe:	bf04      	itt	eq
 8013300:	6819      	ldreq	r1, [r3, #0]
 8013302:	685b      	ldreq	r3, [r3, #4]
 8013304:	6063      	str	r3, [r4, #4]
 8013306:	bf04      	itt	eq
 8013308:	1949      	addeq	r1, r1, r5
 801330a:	6021      	streq	r1, [r4, #0]
 801330c:	6054      	str	r4, [r2, #4]
 801330e:	e7ca      	b.n	80132a6 <_free_r+0x26>
 8013310:	b003      	add	sp, #12
 8013312:	bd30      	pop	{r4, r5, pc}
 8013314:	20010b80 	.word	0x20010b80

08013318 <malloc>:
 8013318:	4b02      	ldr	r3, [pc, #8]	; (8013324 <malloc+0xc>)
 801331a:	4601      	mov	r1, r0
 801331c:	6818      	ldr	r0, [r3, #0]
 801331e:	f000 b823 	b.w	8013368 <_malloc_r>
 8013322:	bf00      	nop
 8013324:	20000078 	.word	0x20000078

08013328 <sbrk_aligned>:
 8013328:	b570      	push	{r4, r5, r6, lr}
 801332a:	4e0e      	ldr	r6, [pc, #56]	; (8013364 <sbrk_aligned+0x3c>)
 801332c:	460c      	mov	r4, r1
 801332e:	6831      	ldr	r1, [r6, #0]
 8013330:	4605      	mov	r5, r0
 8013332:	b911      	cbnz	r1, 801333a <sbrk_aligned+0x12>
 8013334:	f000 fcce 	bl	8013cd4 <_sbrk_r>
 8013338:	6030      	str	r0, [r6, #0]
 801333a:	4621      	mov	r1, r4
 801333c:	4628      	mov	r0, r5
 801333e:	f000 fcc9 	bl	8013cd4 <_sbrk_r>
 8013342:	1c43      	adds	r3, r0, #1
 8013344:	d00a      	beq.n	801335c <sbrk_aligned+0x34>
 8013346:	1cc4      	adds	r4, r0, #3
 8013348:	f024 0403 	bic.w	r4, r4, #3
 801334c:	42a0      	cmp	r0, r4
 801334e:	d007      	beq.n	8013360 <sbrk_aligned+0x38>
 8013350:	1a21      	subs	r1, r4, r0
 8013352:	4628      	mov	r0, r5
 8013354:	f000 fcbe 	bl	8013cd4 <_sbrk_r>
 8013358:	3001      	adds	r0, #1
 801335a:	d101      	bne.n	8013360 <sbrk_aligned+0x38>
 801335c:	f04f 34ff 	mov.w	r4, #4294967295
 8013360:	4620      	mov	r0, r4
 8013362:	bd70      	pop	{r4, r5, r6, pc}
 8013364:	20010b84 	.word	0x20010b84

08013368 <_malloc_r>:
 8013368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801336c:	1ccd      	adds	r5, r1, #3
 801336e:	f025 0503 	bic.w	r5, r5, #3
 8013372:	3508      	adds	r5, #8
 8013374:	2d0c      	cmp	r5, #12
 8013376:	bf38      	it	cc
 8013378:	250c      	movcc	r5, #12
 801337a:	2d00      	cmp	r5, #0
 801337c:	4607      	mov	r7, r0
 801337e:	db01      	blt.n	8013384 <_malloc_r+0x1c>
 8013380:	42a9      	cmp	r1, r5
 8013382:	d905      	bls.n	8013390 <_malloc_r+0x28>
 8013384:	230c      	movs	r3, #12
 8013386:	603b      	str	r3, [r7, #0]
 8013388:	2600      	movs	r6, #0
 801338a:	4630      	mov	r0, r6
 801338c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013390:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013464 <_malloc_r+0xfc>
 8013394:	f000 f868 	bl	8013468 <__malloc_lock>
 8013398:	f8d8 3000 	ldr.w	r3, [r8]
 801339c:	461c      	mov	r4, r3
 801339e:	bb5c      	cbnz	r4, 80133f8 <_malloc_r+0x90>
 80133a0:	4629      	mov	r1, r5
 80133a2:	4638      	mov	r0, r7
 80133a4:	f7ff ffc0 	bl	8013328 <sbrk_aligned>
 80133a8:	1c43      	adds	r3, r0, #1
 80133aa:	4604      	mov	r4, r0
 80133ac:	d155      	bne.n	801345a <_malloc_r+0xf2>
 80133ae:	f8d8 4000 	ldr.w	r4, [r8]
 80133b2:	4626      	mov	r6, r4
 80133b4:	2e00      	cmp	r6, #0
 80133b6:	d145      	bne.n	8013444 <_malloc_r+0xdc>
 80133b8:	2c00      	cmp	r4, #0
 80133ba:	d048      	beq.n	801344e <_malloc_r+0xe6>
 80133bc:	6823      	ldr	r3, [r4, #0]
 80133be:	4631      	mov	r1, r6
 80133c0:	4638      	mov	r0, r7
 80133c2:	eb04 0903 	add.w	r9, r4, r3
 80133c6:	f000 fc85 	bl	8013cd4 <_sbrk_r>
 80133ca:	4581      	cmp	r9, r0
 80133cc:	d13f      	bne.n	801344e <_malloc_r+0xe6>
 80133ce:	6821      	ldr	r1, [r4, #0]
 80133d0:	1a6d      	subs	r5, r5, r1
 80133d2:	4629      	mov	r1, r5
 80133d4:	4638      	mov	r0, r7
 80133d6:	f7ff ffa7 	bl	8013328 <sbrk_aligned>
 80133da:	3001      	adds	r0, #1
 80133dc:	d037      	beq.n	801344e <_malloc_r+0xe6>
 80133de:	6823      	ldr	r3, [r4, #0]
 80133e0:	442b      	add	r3, r5
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	f8d8 3000 	ldr.w	r3, [r8]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d038      	beq.n	801345e <_malloc_r+0xf6>
 80133ec:	685a      	ldr	r2, [r3, #4]
 80133ee:	42a2      	cmp	r2, r4
 80133f0:	d12b      	bne.n	801344a <_malloc_r+0xe2>
 80133f2:	2200      	movs	r2, #0
 80133f4:	605a      	str	r2, [r3, #4]
 80133f6:	e00f      	b.n	8013418 <_malloc_r+0xb0>
 80133f8:	6822      	ldr	r2, [r4, #0]
 80133fa:	1b52      	subs	r2, r2, r5
 80133fc:	d41f      	bmi.n	801343e <_malloc_r+0xd6>
 80133fe:	2a0b      	cmp	r2, #11
 8013400:	d917      	bls.n	8013432 <_malloc_r+0xca>
 8013402:	1961      	adds	r1, r4, r5
 8013404:	42a3      	cmp	r3, r4
 8013406:	6025      	str	r5, [r4, #0]
 8013408:	bf18      	it	ne
 801340a:	6059      	strne	r1, [r3, #4]
 801340c:	6863      	ldr	r3, [r4, #4]
 801340e:	bf08      	it	eq
 8013410:	f8c8 1000 	streq.w	r1, [r8]
 8013414:	5162      	str	r2, [r4, r5]
 8013416:	604b      	str	r3, [r1, #4]
 8013418:	4638      	mov	r0, r7
 801341a:	f104 060b 	add.w	r6, r4, #11
 801341e:	f000 f829 	bl	8013474 <__malloc_unlock>
 8013422:	f026 0607 	bic.w	r6, r6, #7
 8013426:	1d23      	adds	r3, r4, #4
 8013428:	1af2      	subs	r2, r6, r3
 801342a:	d0ae      	beq.n	801338a <_malloc_r+0x22>
 801342c:	1b9b      	subs	r3, r3, r6
 801342e:	50a3      	str	r3, [r4, r2]
 8013430:	e7ab      	b.n	801338a <_malloc_r+0x22>
 8013432:	42a3      	cmp	r3, r4
 8013434:	6862      	ldr	r2, [r4, #4]
 8013436:	d1dd      	bne.n	80133f4 <_malloc_r+0x8c>
 8013438:	f8c8 2000 	str.w	r2, [r8]
 801343c:	e7ec      	b.n	8013418 <_malloc_r+0xb0>
 801343e:	4623      	mov	r3, r4
 8013440:	6864      	ldr	r4, [r4, #4]
 8013442:	e7ac      	b.n	801339e <_malloc_r+0x36>
 8013444:	4634      	mov	r4, r6
 8013446:	6876      	ldr	r6, [r6, #4]
 8013448:	e7b4      	b.n	80133b4 <_malloc_r+0x4c>
 801344a:	4613      	mov	r3, r2
 801344c:	e7cc      	b.n	80133e8 <_malloc_r+0x80>
 801344e:	230c      	movs	r3, #12
 8013450:	603b      	str	r3, [r7, #0]
 8013452:	4638      	mov	r0, r7
 8013454:	f000 f80e 	bl	8013474 <__malloc_unlock>
 8013458:	e797      	b.n	801338a <_malloc_r+0x22>
 801345a:	6025      	str	r5, [r4, #0]
 801345c:	e7dc      	b.n	8013418 <_malloc_r+0xb0>
 801345e:	605b      	str	r3, [r3, #4]
 8013460:	deff      	udf	#255	; 0xff
 8013462:	bf00      	nop
 8013464:	20010b80 	.word	0x20010b80

08013468 <__malloc_lock>:
 8013468:	4801      	ldr	r0, [pc, #4]	; (8013470 <__malloc_lock+0x8>)
 801346a:	f7ff bedb 	b.w	8013224 <__retarget_lock_acquire_recursive>
 801346e:	bf00      	nop
 8013470:	20010b7c 	.word	0x20010b7c

08013474 <__malloc_unlock>:
 8013474:	4801      	ldr	r0, [pc, #4]	; (801347c <__malloc_unlock+0x8>)
 8013476:	f7ff bed6 	b.w	8013226 <__retarget_lock_release_recursive>
 801347a:	bf00      	nop
 801347c:	20010b7c 	.word	0x20010b7c

08013480 <__sfputc_r>:
 8013480:	6893      	ldr	r3, [r2, #8]
 8013482:	3b01      	subs	r3, #1
 8013484:	2b00      	cmp	r3, #0
 8013486:	b410      	push	{r4}
 8013488:	6093      	str	r3, [r2, #8]
 801348a:	da08      	bge.n	801349e <__sfputc_r+0x1e>
 801348c:	6994      	ldr	r4, [r2, #24]
 801348e:	42a3      	cmp	r3, r4
 8013490:	db01      	blt.n	8013496 <__sfputc_r+0x16>
 8013492:	290a      	cmp	r1, #10
 8013494:	d103      	bne.n	801349e <__sfputc_r+0x1e>
 8013496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801349a:	f000 bb85 	b.w	8013ba8 <__swbuf_r>
 801349e:	6813      	ldr	r3, [r2, #0]
 80134a0:	1c58      	adds	r0, r3, #1
 80134a2:	6010      	str	r0, [r2, #0]
 80134a4:	7019      	strb	r1, [r3, #0]
 80134a6:	4608      	mov	r0, r1
 80134a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134ac:	4770      	bx	lr

080134ae <__sfputs_r>:
 80134ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134b0:	4606      	mov	r6, r0
 80134b2:	460f      	mov	r7, r1
 80134b4:	4614      	mov	r4, r2
 80134b6:	18d5      	adds	r5, r2, r3
 80134b8:	42ac      	cmp	r4, r5
 80134ba:	d101      	bne.n	80134c0 <__sfputs_r+0x12>
 80134bc:	2000      	movs	r0, #0
 80134be:	e007      	b.n	80134d0 <__sfputs_r+0x22>
 80134c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c4:	463a      	mov	r2, r7
 80134c6:	4630      	mov	r0, r6
 80134c8:	f7ff ffda 	bl	8013480 <__sfputc_r>
 80134cc:	1c43      	adds	r3, r0, #1
 80134ce:	d1f3      	bne.n	80134b8 <__sfputs_r+0xa>
 80134d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080134d4 <_vfiprintf_r>:
 80134d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d8:	460d      	mov	r5, r1
 80134da:	b09d      	sub	sp, #116	; 0x74
 80134dc:	4614      	mov	r4, r2
 80134de:	4698      	mov	r8, r3
 80134e0:	4606      	mov	r6, r0
 80134e2:	b118      	cbz	r0, 80134ec <_vfiprintf_r+0x18>
 80134e4:	6a03      	ldr	r3, [r0, #32]
 80134e6:	b90b      	cbnz	r3, 80134ec <_vfiprintf_r+0x18>
 80134e8:	f7ff fd38 	bl	8012f5c <__sinit>
 80134ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134ee:	07d9      	lsls	r1, r3, #31
 80134f0:	d405      	bmi.n	80134fe <_vfiprintf_r+0x2a>
 80134f2:	89ab      	ldrh	r3, [r5, #12]
 80134f4:	059a      	lsls	r2, r3, #22
 80134f6:	d402      	bmi.n	80134fe <_vfiprintf_r+0x2a>
 80134f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134fa:	f7ff fe93 	bl	8013224 <__retarget_lock_acquire_recursive>
 80134fe:	89ab      	ldrh	r3, [r5, #12]
 8013500:	071b      	lsls	r3, r3, #28
 8013502:	d501      	bpl.n	8013508 <_vfiprintf_r+0x34>
 8013504:	692b      	ldr	r3, [r5, #16]
 8013506:	b99b      	cbnz	r3, 8013530 <_vfiprintf_r+0x5c>
 8013508:	4629      	mov	r1, r5
 801350a:	4630      	mov	r0, r6
 801350c:	f000 fb8a 	bl	8013c24 <__swsetup_r>
 8013510:	b170      	cbz	r0, 8013530 <_vfiprintf_r+0x5c>
 8013512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013514:	07dc      	lsls	r4, r3, #31
 8013516:	d504      	bpl.n	8013522 <_vfiprintf_r+0x4e>
 8013518:	f04f 30ff 	mov.w	r0, #4294967295
 801351c:	b01d      	add	sp, #116	; 0x74
 801351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013522:	89ab      	ldrh	r3, [r5, #12]
 8013524:	0598      	lsls	r0, r3, #22
 8013526:	d4f7      	bmi.n	8013518 <_vfiprintf_r+0x44>
 8013528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801352a:	f7ff fe7c 	bl	8013226 <__retarget_lock_release_recursive>
 801352e:	e7f3      	b.n	8013518 <_vfiprintf_r+0x44>
 8013530:	2300      	movs	r3, #0
 8013532:	9309      	str	r3, [sp, #36]	; 0x24
 8013534:	2320      	movs	r3, #32
 8013536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801353a:	f8cd 800c 	str.w	r8, [sp, #12]
 801353e:	2330      	movs	r3, #48	; 0x30
 8013540:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80136f4 <_vfiprintf_r+0x220>
 8013544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013548:	f04f 0901 	mov.w	r9, #1
 801354c:	4623      	mov	r3, r4
 801354e:	469a      	mov	sl, r3
 8013550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013554:	b10a      	cbz	r2, 801355a <_vfiprintf_r+0x86>
 8013556:	2a25      	cmp	r2, #37	; 0x25
 8013558:	d1f9      	bne.n	801354e <_vfiprintf_r+0x7a>
 801355a:	ebba 0b04 	subs.w	fp, sl, r4
 801355e:	d00b      	beq.n	8013578 <_vfiprintf_r+0xa4>
 8013560:	465b      	mov	r3, fp
 8013562:	4622      	mov	r2, r4
 8013564:	4629      	mov	r1, r5
 8013566:	4630      	mov	r0, r6
 8013568:	f7ff ffa1 	bl	80134ae <__sfputs_r>
 801356c:	3001      	adds	r0, #1
 801356e:	f000 80a9 	beq.w	80136c4 <_vfiprintf_r+0x1f0>
 8013572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013574:	445a      	add	r2, fp
 8013576:	9209      	str	r2, [sp, #36]	; 0x24
 8013578:	f89a 3000 	ldrb.w	r3, [sl]
 801357c:	2b00      	cmp	r3, #0
 801357e:	f000 80a1 	beq.w	80136c4 <_vfiprintf_r+0x1f0>
 8013582:	2300      	movs	r3, #0
 8013584:	f04f 32ff 	mov.w	r2, #4294967295
 8013588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801358c:	f10a 0a01 	add.w	sl, sl, #1
 8013590:	9304      	str	r3, [sp, #16]
 8013592:	9307      	str	r3, [sp, #28]
 8013594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013598:	931a      	str	r3, [sp, #104]	; 0x68
 801359a:	4654      	mov	r4, sl
 801359c:	2205      	movs	r2, #5
 801359e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135a2:	4854      	ldr	r0, [pc, #336]	; (80136f4 <_vfiprintf_r+0x220>)
 80135a4:	f7ec fe24 	bl	80001f0 <memchr>
 80135a8:	9a04      	ldr	r2, [sp, #16]
 80135aa:	b9d8      	cbnz	r0, 80135e4 <_vfiprintf_r+0x110>
 80135ac:	06d1      	lsls	r1, r2, #27
 80135ae:	bf44      	itt	mi
 80135b0:	2320      	movmi	r3, #32
 80135b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135b6:	0713      	lsls	r3, r2, #28
 80135b8:	bf44      	itt	mi
 80135ba:	232b      	movmi	r3, #43	; 0x2b
 80135bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135c0:	f89a 3000 	ldrb.w	r3, [sl]
 80135c4:	2b2a      	cmp	r3, #42	; 0x2a
 80135c6:	d015      	beq.n	80135f4 <_vfiprintf_r+0x120>
 80135c8:	9a07      	ldr	r2, [sp, #28]
 80135ca:	4654      	mov	r4, sl
 80135cc:	2000      	movs	r0, #0
 80135ce:	f04f 0c0a 	mov.w	ip, #10
 80135d2:	4621      	mov	r1, r4
 80135d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135d8:	3b30      	subs	r3, #48	; 0x30
 80135da:	2b09      	cmp	r3, #9
 80135dc:	d94d      	bls.n	801367a <_vfiprintf_r+0x1a6>
 80135de:	b1b0      	cbz	r0, 801360e <_vfiprintf_r+0x13a>
 80135e0:	9207      	str	r2, [sp, #28]
 80135e2:	e014      	b.n	801360e <_vfiprintf_r+0x13a>
 80135e4:	eba0 0308 	sub.w	r3, r0, r8
 80135e8:	fa09 f303 	lsl.w	r3, r9, r3
 80135ec:	4313      	orrs	r3, r2
 80135ee:	9304      	str	r3, [sp, #16]
 80135f0:	46a2      	mov	sl, r4
 80135f2:	e7d2      	b.n	801359a <_vfiprintf_r+0xc6>
 80135f4:	9b03      	ldr	r3, [sp, #12]
 80135f6:	1d19      	adds	r1, r3, #4
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	9103      	str	r1, [sp, #12]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	bfbb      	ittet	lt
 8013600:	425b      	neglt	r3, r3
 8013602:	f042 0202 	orrlt.w	r2, r2, #2
 8013606:	9307      	strge	r3, [sp, #28]
 8013608:	9307      	strlt	r3, [sp, #28]
 801360a:	bfb8      	it	lt
 801360c:	9204      	strlt	r2, [sp, #16]
 801360e:	7823      	ldrb	r3, [r4, #0]
 8013610:	2b2e      	cmp	r3, #46	; 0x2e
 8013612:	d10c      	bne.n	801362e <_vfiprintf_r+0x15a>
 8013614:	7863      	ldrb	r3, [r4, #1]
 8013616:	2b2a      	cmp	r3, #42	; 0x2a
 8013618:	d134      	bne.n	8013684 <_vfiprintf_r+0x1b0>
 801361a:	9b03      	ldr	r3, [sp, #12]
 801361c:	1d1a      	adds	r2, r3, #4
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	9203      	str	r2, [sp, #12]
 8013622:	2b00      	cmp	r3, #0
 8013624:	bfb8      	it	lt
 8013626:	f04f 33ff 	movlt.w	r3, #4294967295
 801362a:	3402      	adds	r4, #2
 801362c:	9305      	str	r3, [sp, #20]
 801362e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013704 <_vfiprintf_r+0x230>
 8013632:	7821      	ldrb	r1, [r4, #0]
 8013634:	2203      	movs	r2, #3
 8013636:	4650      	mov	r0, sl
 8013638:	f7ec fdda 	bl	80001f0 <memchr>
 801363c:	b138      	cbz	r0, 801364e <_vfiprintf_r+0x17a>
 801363e:	9b04      	ldr	r3, [sp, #16]
 8013640:	eba0 000a 	sub.w	r0, r0, sl
 8013644:	2240      	movs	r2, #64	; 0x40
 8013646:	4082      	lsls	r2, r0
 8013648:	4313      	orrs	r3, r2
 801364a:	3401      	adds	r4, #1
 801364c:	9304      	str	r3, [sp, #16]
 801364e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013652:	4829      	ldr	r0, [pc, #164]	; (80136f8 <_vfiprintf_r+0x224>)
 8013654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013658:	2206      	movs	r2, #6
 801365a:	f7ec fdc9 	bl	80001f0 <memchr>
 801365e:	2800      	cmp	r0, #0
 8013660:	d03f      	beq.n	80136e2 <_vfiprintf_r+0x20e>
 8013662:	4b26      	ldr	r3, [pc, #152]	; (80136fc <_vfiprintf_r+0x228>)
 8013664:	bb1b      	cbnz	r3, 80136ae <_vfiprintf_r+0x1da>
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	3307      	adds	r3, #7
 801366a:	f023 0307 	bic.w	r3, r3, #7
 801366e:	3308      	adds	r3, #8
 8013670:	9303      	str	r3, [sp, #12]
 8013672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013674:	443b      	add	r3, r7
 8013676:	9309      	str	r3, [sp, #36]	; 0x24
 8013678:	e768      	b.n	801354c <_vfiprintf_r+0x78>
 801367a:	fb0c 3202 	mla	r2, ip, r2, r3
 801367e:	460c      	mov	r4, r1
 8013680:	2001      	movs	r0, #1
 8013682:	e7a6      	b.n	80135d2 <_vfiprintf_r+0xfe>
 8013684:	2300      	movs	r3, #0
 8013686:	3401      	adds	r4, #1
 8013688:	9305      	str	r3, [sp, #20]
 801368a:	4619      	mov	r1, r3
 801368c:	f04f 0c0a 	mov.w	ip, #10
 8013690:	4620      	mov	r0, r4
 8013692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013696:	3a30      	subs	r2, #48	; 0x30
 8013698:	2a09      	cmp	r2, #9
 801369a:	d903      	bls.n	80136a4 <_vfiprintf_r+0x1d0>
 801369c:	2b00      	cmp	r3, #0
 801369e:	d0c6      	beq.n	801362e <_vfiprintf_r+0x15a>
 80136a0:	9105      	str	r1, [sp, #20]
 80136a2:	e7c4      	b.n	801362e <_vfiprintf_r+0x15a>
 80136a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80136a8:	4604      	mov	r4, r0
 80136aa:	2301      	movs	r3, #1
 80136ac:	e7f0      	b.n	8013690 <_vfiprintf_r+0x1bc>
 80136ae:	ab03      	add	r3, sp, #12
 80136b0:	9300      	str	r3, [sp, #0]
 80136b2:	462a      	mov	r2, r5
 80136b4:	4b12      	ldr	r3, [pc, #72]	; (8013700 <_vfiprintf_r+0x22c>)
 80136b6:	a904      	add	r1, sp, #16
 80136b8:	4630      	mov	r0, r6
 80136ba:	f3af 8000 	nop.w
 80136be:	4607      	mov	r7, r0
 80136c0:	1c78      	adds	r0, r7, #1
 80136c2:	d1d6      	bne.n	8013672 <_vfiprintf_r+0x19e>
 80136c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136c6:	07d9      	lsls	r1, r3, #31
 80136c8:	d405      	bmi.n	80136d6 <_vfiprintf_r+0x202>
 80136ca:	89ab      	ldrh	r3, [r5, #12]
 80136cc:	059a      	lsls	r2, r3, #22
 80136ce:	d402      	bmi.n	80136d6 <_vfiprintf_r+0x202>
 80136d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136d2:	f7ff fda8 	bl	8013226 <__retarget_lock_release_recursive>
 80136d6:	89ab      	ldrh	r3, [r5, #12]
 80136d8:	065b      	lsls	r3, r3, #25
 80136da:	f53f af1d 	bmi.w	8013518 <_vfiprintf_r+0x44>
 80136de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136e0:	e71c      	b.n	801351c <_vfiprintf_r+0x48>
 80136e2:	ab03      	add	r3, sp, #12
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	462a      	mov	r2, r5
 80136e8:	4b05      	ldr	r3, [pc, #20]	; (8013700 <_vfiprintf_r+0x22c>)
 80136ea:	a904      	add	r1, sp, #16
 80136ec:	4630      	mov	r0, r6
 80136ee:	f000 f879 	bl	80137e4 <_printf_i>
 80136f2:	e7e4      	b.n	80136be <_vfiprintf_r+0x1ea>
 80136f4:	08016faf 	.word	0x08016faf
 80136f8:	08016fb9 	.word	0x08016fb9
 80136fc:	00000000 	.word	0x00000000
 8013700:	080134af 	.word	0x080134af
 8013704:	08016fb5 	.word	0x08016fb5

08013708 <_printf_common>:
 8013708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801370c:	4616      	mov	r6, r2
 801370e:	4699      	mov	r9, r3
 8013710:	688a      	ldr	r2, [r1, #8]
 8013712:	690b      	ldr	r3, [r1, #16]
 8013714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013718:	4293      	cmp	r3, r2
 801371a:	bfb8      	it	lt
 801371c:	4613      	movlt	r3, r2
 801371e:	6033      	str	r3, [r6, #0]
 8013720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013724:	4607      	mov	r7, r0
 8013726:	460c      	mov	r4, r1
 8013728:	b10a      	cbz	r2, 801372e <_printf_common+0x26>
 801372a:	3301      	adds	r3, #1
 801372c:	6033      	str	r3, [r6, #0]
 801372e:	6823      	ldr	r3, [r4, #0]
 8013730:	0699      	lsls	r1, r3, #26
 8013732:	bf42      	ittt	mi
 8013734:	6833      	ldrmi	r3, [r6, #0]
 8013736:	3302      	addmi	r3, #2
 8013738:	6033      	strmi	r3, [r6, #0]
 801373a:	6825      	ldr	r5, [r4, #0]
 801373c:	f015 0506 	ands.w	r5, r5, #6
 8013740:	d106      	bne.n	8013750 <_printf_common+0x48>
 8013742:	f104 0a19 	add.w	sl, r4, #25
 8013746:	68e3      	ldr	r3, [r4, #12]
 8013748:	6832      	ldr	r2, [r6, #0]
 801374a:	1a9b      	subs	r3, r3, r2
 801374c:	42ab      	cmp	r3, r5
 801374e:	dc26      	bgt.n	801379e <_printf_common+0x96>
 8013750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013754:	1e13      	subs	r3, r2, #0
 8013756:	6822      	ldr	r2, [r4, #0]
 8013758:	bf18      	it	ne
 801375a:	2301      	movne	r3, #1
 801375c:	0692      	lsls	r2, r2, #26
 801375e:	d42b      	bmi.n	80137b8 <_printf_common+0xb0>
 8013760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013764:	4649      	mov	r1, r9
 8013766:	4638      	mov	r0, r7
 8013768:	47c0      	blx	r8
 801376a:	3001      	adds	r0, #1
 801376c:	d01e      	beq.n	80137ac <_printf_common+0xa4>
 801376e:	6823      	ldr	r3, [r4, #0]
 8013770:	6922      	ldr	r2, [r4, #16]
 8013772:	f003 0306 	and.w	r3, r3, #6
 8013776:	2b04      	cmp	r3, #4
 8013778:	bf02      	ittt	eq
 801377a:	68e5      	ldreq	r5, [r4, #12]
 801377c:	6833      	ldreq	r3, [r6, #0]
 801377e:	1aed      	subeq	r5, r5, r3
 8013780:	68a3      	ldr	r3, [r4, #8]
 8013782:	bf0c      	ite	eq
 8013784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013788:	2500      	movne	r5, #0
 801378a:	4293      	cmp	r3, r2
 801378c:	bfc4      	itt	gt
 801378e:	1a9b      	subgt	r3, r3, r2
 8013790:	18ed      	addgt	r5, r5, r3
 8013792:	2600      	movs	r6, #0
 8013794:	341a      	adds	r4, #26
 8013796:	42b5      	cmp	r5, r6
 8013798:	d11a      	bne.n	80137d0 <_printf_common+0xc8>
 801379a:	2000      	movs	r0, #0
 801379c:	e008      	b.n	80137b0 <_printf_common+0xa8>
 801379e:	2301      	movs	r3, #1
 80137a0:	4652      	mov	r2, sl
 80137a2:	4649      	mov	r1, r9
 80137a4:	4638      	mov	r0, r7
 80137a6:	47c0      	blx	r8
 80137a8:	3001      	adds	r0, #1
 80137aa:	d103      	bne.n	80137b4 <_printf_common+0xac>
 80137ac:	f04f 30ff 	mov.w	r0, #4294967295
 80137b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b4:	3501      	adds	r5, #1
 80137b6:	e7c6      	b.n	8013746 <_printf_common+0x3e>
 80137b8:	18e1      	adds	r1, r4, r3
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	2030      	movs	r0, #48	; 0x30
 80137be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80137c2:	4422      	add	r2, r4
 80137c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80137c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80137cc:	3302      	adds	r3, #2
 80137ce:	e7c7      	b.n	8013760 <_printf_common+0x58>
 80137d0:	2301      	movs	r3, #1
 80137d2:	4622      	mov	r2, r4
 80137d4:	4649      	mov	r1, r9
 80137d6:	4638      	mov	r0, r7
 80137d8:	47c0      	blx	r8
 80137da:	3001      	adds	r0, #1
 80137dc:	d0e6      	beq.n	80137ac <_printf_common+0xa4>
 80137de:	3601      	adds	r6, #1
 80137e0:	e7d9      	b.n	8013796 <_printf_common+0x8e>
	...

080137e4 <_printf_i>:
 80137e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137e8:	7e0f      	ldrb	r7, [r1, #24]
 80137ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80137ec:	2f78      	cmp	r7, #120	; 0x78
 80137ee:	4691      	mov	r9, r2
 80137f0:	4680      	mov	r8, r0
 80137f2:	460c      	mov	r4, r1
 80137f4:	469a      	mov	sl, r3
 80137f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80137fa:	d807      	bhi.n	801380c <_printf_i+0x28>
 80137fc:	2f62      	cmp	r7, #98	; 0x62
 80137fe:	d80a      	bhi.n	8013816 <_printf_i+0x32>
 8013800:	2f00      	cmp	r7, #0
 8013802:	f000 80d4 	beq.w	80139ae <_printf_i+0x1ca>
 8013806:	2f58      	cmp	r7, #88	; 0x58
 8013808:	f000 80c0 	beq.w	801398c <_printf_i+0x1a8>
 801380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013814:	e03a      	b.n	801388c <_printf_i+0xa8>
 8013816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801381a:	2b15      	cmp	r3, #21
 801381c:	d8f6      	bhi.n	801380c <_printf_i+0x28>
 801381e:	a101      	add	r1, pc, #4	; (adr r1, 8013824 <_printf_i+0x40>)
 8013820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013824:	0801387d 	.word	0x0801387d
 8013828:	08013891 	.word	0x08013891
 801382c:	0801380d 	.word	0x0801380d
 8013830:	0801380d 	.word	0x0801380d
 8013834:	0801380d 	.word	0x0801380d
 8013838:	0801380d 	.word	0x0801380d
 801383c:	08013891 	.word	0x08013891
 8013840:	0801380d 	.word	0x0801380d
 8013844:	0801380d 	.word	0x0801380d
 8013848:	0801380d 	.word	0x0801380d
 801384c:	0801380d 	.word	0x0801380d
 8013850:	08013995 	.word	0x08013995
 8013854:	080138bd 	.word	0x080138bd
 8013858:	0801394f 	.word	0x0801394f
 801385c:	0801380d 	.word	0x0801380d
 8013860:	0801380d 	.word	0x0801380d
 8013864:	080139b7 	.word	0x080139b7
 8013868:	0801380d 	.word	0x0801380d
 801386c:	080138bd 	.word	0x080138bd
 8013870:	0801380d 	.word	0x0801380d
 8013874:	0801380d 	.word	0x0801380d
 8013878:	08013957 	.word	0x08013957
 801387c:	682b      	ldr	r3, [r5, #0]
 801387e:	1d1a      	adds	r2, r3, #4
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	602a      	str	r2, [r5, #0]
 8013884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801388c:	2301      	movs	r3, #1
 801388e:	e09f      	b.n	80139d0 <_printf_i+0x1ec>
 8013890:	6820      	ldr	r0, [r4, #0]
 8013892:	682b      	ldr	r3, [r5, #0]
 8013894:	0607      	lsls	r7, r0, #24
 8013896:	f103 0104 	add.w	r1, r3, #4
 801389a:	6029      	str	r1, [r5, #0]
 801389c:	d501      	bpl.n	80138a2 <_printf_i+0xbe>
 801389e:	681e      	ldr	r6, [r3, #0]
 80138a0:	e003      	b.n	80138aa <_printf_i+0xc6>
 80138a2:	0646      	lsls	r6, r0, #25
 80138a4:	d5fb      	bpl.n	801389e <_printf_i+0xba>
 80138a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80138aa:	2e00      	cmp	r6, #0
 80138ac:	da03      	bge.n	80138b6 <_printf_i+0xd2>
 80138ae:	232d      	movs	r3, #45	; 0x2d
 80138b0:	4276      	negs	r6, r6
 80138b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138b6:	485a      	ldr	r0, [pc, #360]	; (8013a20 <_printf_i+0x23c>)
 80138b8:	230a      	movs	r3, #10
 80138ba:	e012      	b.n	80138e2 <_printf_i+0xfe>
 80138bc:	682b      	ldr	r3, [r5, #0]
 80138be:	6820      	ldr	r0, [r4, #0]
 80138c0:	1d19      	adds	r1, r3, #4
 80138c2:	6029      	str	r1, [r5, #0]
 80138c4:	0605      	lsls	r5, r0, #24
 80138c6:	d501      	bpl.n	80138cc <_printf_i+0xe8>
 80138c8:	681e      	ldr	r6, [r3, #0]
 80138ca:	e002      	b.n	80138d2 <_printf_i+0xee>
 80138cc:	0641      	lsls	r1, r0, #25
 80138ce:	d5fb      	bpl.n	80138c8 <_printf_i+0xe4>
 80138d0:	881e      	ldrh	r6, [r3, #0]
 80138d2:	4853      	ldr	r0, [pc, #332]	; (8013a20 <_printf_i+0x23c>)
 80138d4:	2f6f      	cmp	r7, #111	; 0x6f
 80138d6:	bf0c      	ite	eq
 80138d8:	2308      	moveq	r3, #8
 80138da:	230a      	movne	r3, #10
 80138dc:	2100      	movs	r1, #0
 80138de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138e2:	6865      	ldr	r5, [r4, #4]
 80138e4:	60a5      	str	r5, [r4, #8]
 80138e6:	2d00      	cmp	r5, #0
 80138e8:	bfa2      	ittt	ge
 80138ea:	6821      	ldrge	r1, [r4, #0]
 80138ec:	f021 0104 	bicge.w	r1, r1, #4
 80138f0:	6021      	strge	r1, [r4, #0]
 80138f2:	b90e      	cbnz	r6, 80138f8 <_printf_i+0x114>
 80138f4:	2d00      	cmp	r5, #0
 80138f6:	d04b      	beq.n	8013990 <_printf_i+0x1ac>
 80138f8:	4615      	mov	r5, r2
 80138fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80138fe:	fb03 6711 	mls	r7, r3, r1, r6
 8013902:	5dc7      	ldrb	r7, [r0, r7]
 8013904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013908:	4637      	mov	r7, r6
 801390a:	42bb      	cmp	r3, r7
 801390c:	460e      	mov	r6, r1
 801390e:	d9f4      	bls.n	80138fa <_printf_i+0x116>
 8013910:	2b08      	cmp	r3, #8
 8013912:	d10b      	bne.n	801392c <_printf_i+0x148>
 8013914:	6823      	ldr	r3, [r4, #0]
 8013916:	07de      	lsls	r6, r3, #31
 8013918:	d508      	bpl.n	801392c <_printf_i+0x148>
 801391a:	6923      	ldr	r3, [r4, #16]
 801391c:	6861      	ldr	r1, [r4, #4]
 801391e:	4299      	cmp	r1, r3
 8013920:	bfde      	ittt	le
 8013922:	2330      	movle	r3, #48	; 0x30
 8013924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013928:	f105 35ff 	addle.w	r5, r5, #4294967295
 801392c:	1b52      	subs	r2, r2, r5
 801392e:	6122      	str	r2, [r4, #16]
 8013930:	f8cd a000 	str.w	sl, [sp]
 8013934:	464b      	mov	r3, r9
 8013936:	aa03      	add	r2, sp, #12
 8013938:	4621      	mov	r1, r4
 801393a:	4640      	mov	r0, r8
 801393c:	f7ff fee4 	bl	8013708 <_printf_common>
 8013940:	3001      	adds	r0, #1
 8013942:	d14a      	bne.n	80139da <_printf_i+0x1f6>
 8013944:	f04f 30ff 	mov.w	r0, #4294967295
 8013948:	b004      	add	sp, #16
 801394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801394e:	6823      	ldr	r3, [r4, #0]
 8013950:	f043 0320 	orr.w	r3, r3, #32
 8013954:	6023      	str	r3, [r4, #0]
 8013956:	4833      	ldr	r0, [pc, #204]	; (8013a24 <_printf_i+0x240>)
 8013958:	2778      	movs	r7, #120	; 0x78
 801395a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	6829      	ldr	r1, [r5, #0]
 8013962:	061f      	lsls	r7, r3, #24
 8013964:	f851 6b04 	ldr.w	r6, [r1], #4
 8013968:	d402      	bmi.n	8013970 <_printf_i+0x18c>
 801396a:	065f      	lsls	r7, r3, #25
 801396c:	bf48      	it	mi
 801396e:	b2b6      	uxthmi	r6, r6
 8013970:	07df      	lsls	r7, r3, #31
 8013972:	bf48      	it	mi
 8013974:	f043 0320 	orrmi.w	r3, r3, #32
 8013978:	6029      	str	r1, [r5, #0]
 801397a:	bf48      	it	mi
 801397c:	6023      	strmi	r3, [r4, #0]
 801397e:	b91e      	cbnz	r6, 8013988 <_printf_i+0x1a4>
 8013980:	6823      	ldr	r3, [r4, #0]
 8013982:	f023 0320 	bic.w	r3, r3, #32
 8013986:	6023      	str	r3, [r4, #0]
 8013988:	2310      	movs	r3, #16
 801398a:	e7a7      	b.n	80138dc <_printf_i+0xf8>
 801398c:	4824      	ldr	r0, [pc, #144]	; (8013a20 <_printf_i+0x23c>)
 801398e:	e7e4      	b.n	801395a <_printf_i+0x176>
 8013990:	4615      	mov	r5, r2
 8013992:	e7bd      	b.n	8013910 <_printf_i+0x12c>
 8013994:	682b      	ldr	r3, [r5, #0]
 8013996:	6826      	ldr	r6, [r4, #0]
 8013998:	6961      	ldr	r1, [r4, #20]
 801399a:	1d18      	adds	r0, r3, #4
 801399c:	6028      	str	r0, [r5, #0]
 801399e:	0635      	lsls	r5, r6, #24
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	d501      	bpl.n	80139a8 <_printf_i+0x1c4>
 80139a4:	6019      	str	r1, [r3, #0]
 80139a6:	e002      	b.n	80139ae <_printf_i+0x1ca>
 80139a8:	0670      	lsls	r0, r6, #25
 80139aa:	d5fb      	bpl.n	80139a4 <_printf_i+0x1c0>
 80139ac:	8019      	strh	r1, [r3, #0]
 80139ae:	2300      	movs	r3, #0
 80139b0:	6123      	str	r3, [r4, #16]
 80139b2:	4615      	mov	r5, r2
 80139b4:	e7bc      	b.n	8013930 <_printf_i+0x14c>
 80139b6:	682b      	ldr	r3, [r5, #0]
 80139b8:	1d1a      	adds	r2, r3, #4
 80139ba:	602a      	str	r2, [r5, #0]
 80139bc:	681d      	ldr	r5, [r3, #0]
 80139be:	6862      	ldr	r2, [r4, #4]
 80139c0:	2100      	movs	r1, #0
 80139c2:	4628      	mov	r0, r5
 80139c4:	f7ec fc14 	bl	80001f0 <memchr>
 80139c8:	b108      	cbz	r0, 80139ce <_printf_i+0x1ea>
 80139ca:	1b40      	subs	r0, r0, r5
 80139cc:	6060      	str	r0, [r4, #4]
 80139ce:	6863      	ldr	r3, [r4, #4]
 80139d0:	6123      	str	r3, [r4, #16]
 80139d2:	2300      	movs	r3, #0
 80139d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139d8:	e7aa      	b.n	8013930 <_printf_i+0x14c>
 80139da:	6923      	ldr	r3, [r4, #16]
 80139dc:	462a      	mov	r2, r5
 80139de:	4649      	mov	r1, r9
 80139e0:	4640      	mov	r0, r8
 80139e2:	47d0      	blx	sl
 80139e4:	3001      	adds	r0, #1
 80139e6:	d0ad      	beq.n	8013944 <_printf_i+0x160>
 80139e8:	6823      	ldr	r3, [r4, #0]
 80139ea:	079b      	lsls	r3, r3, #30
 80139ec:	d413      	bmi.n	8013a16 <_printf_i+0x232>
 80139ee:	68e0      	ldr	r0, [r4, #12]
 80139f0:	9b03      	ldr	r3, [sp, #12]
 80139f2:	4298      	cmp	r0, r3
 80139f4:	bfb8      	it	lt
 80139f6:	4618      	movlt	r0, r3
 80139f8:	e7a6      	b.n	8013948 <_printf_i+0x164>
 80139fa:	2301      	movs	r3, #1
 80139fc:	4632      	mov	r2, r6
 80139fe:	4649      	mov	r1, r9
 8013a00:	4640      	mov	r0, r8
 8013a02:	47d0      	blx	sl
 8013a04:	3001      	adds	r0, #1
 8013a06:	d09d      	beq.n	8013944 <_printf_i+0x160>
 8013a08:	3501      	adds	r5, #1
 8013a0a:	68e3      	ldr	r3, [r4, #12]
 8013a0c:	9903      	ldr	r1, [sp, #12]
 8013a0e:	1a5b      	subs	r3, r3, r1
 8013a10:	42ab      	cmp	r3, r5
 8013a12:	dcf2      	bgt.n	80139fa <_printf_i+0x216>
 8013a14:	e7eb      	b.n	80139ee <_printf_i+0x20a>
 8013a16:	2500      	movs	r5, #0
 8013a18:	f104 0619 	add.w	r6, r4, #25
 8013a1c:	e7f5      	b.n	8013a0a <_printf_i+0x226>
 8013a1e:	bf00      	nop
 8013a20:	08016fc0 	.word	0x08016fc0
 8013a24:	08016fd1 	.word	0x08016fd1

08013a28 <__sflush_r>:
 8013a28:	898a      	ldrh	r2, [r1, #12]
 8013a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2e:	4605      	mov	r5, r0
 8013a30:	0710      	lsls	r0, r2, #28
 8013a32:	460c      	mov	r4, r1
 8013a34:	d458      	bmi.n	8013ae8 <__sflush_r+0xc0>
 8013a36:	684b      	ldr	r3, [r1, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	dc05      	bgt.n	8013a48 <__sflush_r+0x20>
 8013a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	dc02      	bgt.n	8013a48 <__sflush_r+0x20>
 8013a42:	2000      	movs	r0, #0
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a4a:	2e00      	cmp	r6, #0
 8013a4c:	d0f9      	beq.n	8013a42 <__sflush_r+0x1a>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a54:	682f      	ldr	r7, [r5, #0]
 8013a56:	6a21      	ldr	r1, [r4, #32]
 8013a58:	602b      	str	r3, [r5, #0]
 8013a5a:	d032      	beq.n	8013ac2 <__sflush_r+0x9a>
 8013a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a5e:	89a3      	ldrh	r3, [r4, #12]
 8013a60:	075a      	lsls	r2, r3, #29
 8013a62:	d505      	bpl.n	8013a70 <__sflush_r+0x48>
 8013a64:	6863      	ldr	r3, [r4, #4]
 8013a66:	1ac0      	subs	r0, r0, r3
 8013a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a6a:	b10b      	cbz	r3, 8013a70 <__sflush_r+0x48>
 8013a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a6e:	1ac0      	subs	r0, r0, r3
 8013a70:	2300      	movs	r3, #0
 8013a72:	4602      	mov	r2, r0
 8013a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a76:	6a21      	ldr	r1, [r4, #32]
 8013a78:	4628      	mov	r0, r5
 8013a7a:	47b0      	blx	r6
 8013a7c:	1c43      	adds	r3, r0, #1
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	d106      	bne.n	8013a90 <__sflush_r+0x68>
 8013a82:	6829      	ldr	r1, [r5, #0]
 8013a84:	291d      	cmp	r1, #29
 8013a86:	d82b      	bhi.n	8013ae0 <__sflush_r+0xb8>
 8013a88:	4a29      	ldr	r2, [pc, #164]	; (8013b30 <__sflush_r+0x108>)
 8013a8a:	410a      	asrs	r2, r1
 8013a8c:	07d6      	lsls	r6, r2, #31
 8013a8e:	d427      	bmi.n	8013ae0 <__sflush_r+0xb8>
 8013a90:	2200      	movs	r2, #0
 8013a92:	6062      	str	r2, [r4, #4]
 8013a94:	04d9      	lsls	r1, r3, #19
 8013a96:	6922      	ldr	r2, [r4, #16]
 8013a98:	6022      	str	r2, [r4, #0]
 8013a9a:	d504      	bpl.n	8013aa6 <__sflush_r+0x7e>
 8013a9c:	1c42      	adds	r2, r0, #1
 8013a9e:	d101      	bne.n	8013aa4 <__sflush_r+0x7c>
 8013aa0:	682b      	ldr	r3, [r5, #0]
 8013aa2:	b903      	cbnz	r3, 8013aa6 <__sflush_r+0x7e>
 8013aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8013aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013aa8:	602f      	str	r7, [r5, #0]
 8013aaa:	2900      	cmp	r1, #0
 8013aac:	d0c9      	beq.n	8013a42 <__sflush_r+0x1a>
 8013aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ab2:	4299      	cmp	r1, r3
 8013ab4:	d002      	beq.n	8013abc <__sflush_r+0x94>
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f7ff fbe2 	bl	8013280 <_free_r>
 8013abc:	2000      	movs	r0, #0
 8013abe:	6360      	str	r0, [r4, #52]	; 0x34
 8013ac0:	e7c0      	b.n	8013a44 <__sflush_r+0x1c>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	4628      	mov	r0, r5
 8013ac6:	47b0      	blx	r6
 8013ac8:	1c41      	adds	r1, r0, #1
 8013aca:	d1c8      	bne.n	8013a5e <__sflush_r+0x36>
 8013acc:	682b      	ldr	r3, [r5, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d0c5      	beq.n	8013a5e <__sflush_r+0x36>
 8013ad2:	2b1d      	cmp	r3, #29
 8013ad4:	d001      	beq.n	8013ada <__sflush_r+0xb2>
 8013ad6:	2b16      	cmp	r3, #22
 8013ad8:	d101      	bne.n	8013ade <__sflush_r+0xb6>
 8013ada:	602f      	str	r7, [r5, #0]
 8013adc:	e7b1      	b.n	8013a42 <__sflush_r+0x1a>
 8013ade:	89a3      	ldrh	r3, [r4, #12]
 8013ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ae4:	81a3      	strh	r3, [r4, #12]
 8013ae6:	e7ad      	b.n	8013a44 <__sflush_r+0x1c>
 8013ae8:	690f      	ldr	r7, [r1, #16]
 8013aea:	2f00      	cmp	r7, #0
 8013aec:	d0a9      	beq.n	8013a42 <__sflush_r+0x1a>
 8013aee:	0793      	lsls	r3, r2, #30
 8013af0:	680e      	ldr	r6, [r1, #0]
 8013af2:	bf08      	it	eq
 8013af4:	694b      	ldreq	r3, [r1, #20]
 8013af6:	600f      	str	r7, [r1, #0]
 8013af8:	bf18      	it	ne
 8013afa:	2300      	movne	r3, #0
 8013afc:	eba6 0807 	sub.w	r8, r6, r7
 8013b00:	608b      	str	r3, [r1, #8]
 8013b02:	f1b8 0f00 	cmp.w	r8, #0
 8013b06:	dd9c      	ble.n	8013a42 <__sflush_r+0x1a>
 8013b08:	6a21      	ldr	r1, [r4, #32]
 8013b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b0c:	4643      	mov	r3, r8
 8013b0e:	463a      	mov	r2, r7
 8013b10:	4628      	mov	r0, r5
 8013b12:	47b0      	blx	r6
 8013b14:	2800      	cmp	r0, #0
 8013b16:	dc06      	bgt.n	8013b26 <__sflush_r+0xfe>
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b1e:	81a3      	strh	r3, [r4, #12]
 8013b20:	f04f 30ff 	mov.w	r0, #4294967295
 8013b24:	e78e      	b.n	8013a44 <__sflush_r+0x1c>
 8013b26:	4407      	add	r7, r0
 8013b28:	eba8 0800 	sub.w	r8, r8, r0
 8013b2c:	e7e9      	b.n	8013b02 <__sflush_r+0xda>
 8013b2e:	bf00      	nop
 8013b30:	dfbffffe 	.word	0xdfbffffe

08013b34 <_fflush_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	690b      	ldr	r3, [r1, #16]
 8013b38:	4605      	mov	r5, r0
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	b913      	cbnz	r3, 8013b44 <_fflush_r+0x10>
 8013b3e:	2500      	movs	r5, #0
 8013b40:	4628      	mov	r0, r5
 8013b42:	bd38      	pop	{r3, r4, r5, pc}
 8013b44:	b118      	cbz	r0, 8013b4e <_fflush_r+0x1a>
 8013b46:	6a03      	ldr	r3, [r0, #32]
 8013b48:	b90b      	cbnz	r3, 8013b4e <_fflush_r+0x1a>
 8013b4a:	f7ff fa07 	bl	8012f5c <__sinit>
 8013b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d0f3      	beq.n	8013b3e <_fflush_r+0xa>
 8013b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b58:	07d0      	lsls	r0, r2, #31
 8013b5a:	d404      	bmi.n	8013b66 <_fflush_r+0x32>
 8013b5c:	0599      	lsls	r1, r3, #22
 8013b5e:	d402      	bmi.n	8013b66 <_fflush_r+0x32>
 8013b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b62:	f7ff fb5f 	bl	8013224 <__retarget_lock_acquire_recursive>
 8013b66:	4628      	mov	r0, r5
 8013b68:	4621      	mov	r1, r4
 8013b6a:	f7ff ff5d 	bl	8013a28 <__sflush_r>
 8013b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b70:	07da      	lsls	r2, r3, #31
 8013b72:	4605      	mov	r5, r0
 8013b74:	d4e4      	bmi.n	8013b40 <_fflush_r+0xc>
 8013b76:	89a3      	ldrh	r3, [r4, #12]
 8013b78:	059b      	lsls	r3, r3, #22
 8013b7a:	d4e1      	bmi.n	8013b40 <_fflush_r+0xc>
 8013b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b7e:	f7ff fb52 	bl	8013226 <__retarget_lock_release_recursive>
 8013b82:	e7dd      	b.n	8013b40 <_fflush_r+0xc>

08013b84 <fiprintf>:
 8013b84:	b40e      	push	{r1, r2, r3}
 8013b86:	b503      	push	{r0, r1, lr}
 8013b88:	4601      	mov	r1, r0
 8013b8a:	ab03      	add	r3, sp, #12
 8013b8c:	4805      	ldr	r0, [pc, #20]	; (8013ba4 <fiprintf+0x20>)
 8013b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b92:	6800      	ldr	r0, [r0, #0]
 8013b94:	9301      	str	r3, [sp, #4]
 8013b96:	f7ff fc9d 	bl	80134d4 <_vfiprintf_r>
 8013b9a:	b002      	add	sp, #8
 8013b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ba0:	b003      	add	sp, #12
 8013ba2:	4770      	bx	lr
 8013ba4:	20000078 	.word	0x20000078

08013ba8 <__swbuf_r>:
 8013ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013baa:	460e      	mov	r6, r1
 8013bac:	4614      	mov	r4, r2
 8013bae:	4605      	mov	r5, r0
 8013bb0:	b118      	cbz	r0, 8013bba <__swbuf_r+0x12>
 8013bb2:	6a03      	ldr	r3, [r0, #32]
 8013bb4:	b90b      	cbnz	r3, 8013bba <__swbuf_r+0x12>
 8013bb6:	f7ff f9d1 	bl	8012f5c <__sinit>
 8013bba:	69a3      	ldr	r3, [r4, #24]
 8013bbc:	60a3      	str	r3, [r4, #8]
 8013bbe:	89a3      	ldrh	r3, [r4, #12]
 8013bc0:	071a      	lsls	r2, r3, #28
 8013bc2:	d525      	bpl.n	8013c10 <__swbuf_r+0x68>
 8013bc4:	6923      	ldr	r3, [r4, #16]
 8013bc6:	b31b      	cbz	r3, 8013c10 <__swbuf_r+0x68>
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	6922      	ldr	r2, [r4, #16]
 8013bcc:	1a98      	subs	r0, r3, r2
 8013bce:	6963      	ldr	r3, [r4, #20]
 8013bd0:	b2f6      	uxtb	r6, r6
 8013bd2:	4283      	cmp	r3, r0
 8013bd4:	4637      	mov	r7, r6
 8013bd6:	dc04      	bgt.n	8013be2 <__swbuf_r+0x3a>
 8013bd8:	4621      	mov	r1, r4
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7ff ffaa 	bl	8013b34 <_fflush_r>
 8013be0:	b9e0      	cbnz	r0, 8013c1c <__swbuf_r+0x74>
 8013be2:	68a3      	ldr	r3, [r4, #8]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	60a3      	str	r3, [r4, #8]
 8013be8:	6823      	ldr	r3, [r4, #0]
 8013bea:	1c5a      	adds	r2, r3, #1
 8013bec:	6022      	str	r2, [r4, #0]
 8013bee:	701e      	strb	r6, [r3, #0]
 8013bf0:	6962      	ldr	r2, [r4, #20]
 8013bf2:	1c43      	adds	r3, r0, #1
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d004      	beq.n	8013c02 <__swbuf_r+0x5a>
 8013bf8:	89a3      	ldrh	r3, [r4, #12]
 8013bfa:	07db      	lsls	r3, r3, #31
 8013bfc:	d506      	bpl.n	8013c0c <__swbuf_r+0x64>
 8013bfe:	2e0a      	cmp	r6, #10
 8013c00:	d104      	bne.n	8013c0c <__swbuf_r+0x64>
 8013c02:	4621      	mov	r1, r4
 8013c04:	4628      	mov	r0, r5
 8013c06:	f7ff ff95 	bl	8013b34 <_fflush_r>
 8013c0a:	b938      	cbnz	r0, 8013c1c <__swbuf_r+0x74>
 8013c0c:	4638      	mov	r0, r7
 8013c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c10:	4621      	mov	r1, r4
 8013c12:	4628      	mov	r0, r5
 8013c14:	f000 f806 	bl	8013c24 <__swsetup_r>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d0d5      	beq.n	8013bc8 <__swbuf_r+0x20>
 8013c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8013c20:	e7f4      	b.n	8013c0c <__swbuf_r+0x64>
	...

08013c24 <__swsetup_r>:
 8013c24:	b538      	push	{r3, r4, r5, lr}
 8013c26:	4b2a      	ldr	r3, [pc, #168]	; (8013cd0 <__swsetup_r+0xac>)
 8013c28:	4605      	mov	r5, r0
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	b118      	cbz	r0, 8013c38 <__swsetup_r+0x14>
 8013c30:	6a03      	ldr	r3, [r0, #32]
 8013c32:	b90b      	cbnz	r3, 8013c38 <__swsetup_r+0x14>
 8013c34:	f7ff f992 	bl	8012f5c <__sinit>
 8013c38:	89a3      	ldrh	r3, [r4, #12]
 8013c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c3e:	0718      	lsls	r0, r3, #28
 8013c40:	d422      	bmi.n	8013c88 <__swsetup_r+0x64>
 8013c42:	06d9      	lsls	r1, r3, #27
 8013c44:	d407      	bmi.n	8013c56 <__swsetup_r+0x32>
 8013c46:	2309      	movs	r3, #9
 8013c48:	602b      	str	r3, [r5, #0]
 8013c4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c4e:	81a3      	strh	r3, [r4, #12]
 8013c50:	f04f 30ff 	mov.w	r0, #4294967295
 8013c54:	e034      	b.n	8013cc0 <__swsetup_r+0x9c>
 8013c56:	0758      	lsls	r0, r3, #29
 8013c58:	d512      	bpl.n	8013c80 <__swsetup_r+0x5c>
 8013c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c5c:	b141      	cbz	r1, 8013c70 <__swsetup_r+0x4c>
 8013c5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c62:	4299      	cmp	r1, r3
 8013c64:	d002      	beq.n	8013c6c <__swsetup_r+0x48>
 8013c66:	4628      	mov	r0, r5
 8013c68:	f7ff fb0a 	bl	8013280 <_free_r>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	6363      	str	r3, [r4, #52]	; 0x34
 8013c70:	89a3      	ldrh	r3, [r4, #12]
 8013c72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c76:	81a3      	strh	r3, [r4, #12]
 8013c78:	2300      	movs	r3, #0
 8013c7a:	6063      	str	r3, [r4, #4]
 8013c7c:	6923      	ldr	r3, [r4, #16]
 8013c7e:	6023      	str	r3, [r4, #0]
 8013c80:	89a3      	ldrh	r3, [r4, #12]
 8013c82:	f043 0308 	orr.w	r3, r3, #8
 8013c86:	81a3      	strh	r3, [r4, #12]
 8013c88:	6923      	ldr	r3, [r4, #16]
 8013c8a:	b94b      	cbnz	r3, 8013ca0 <__swsetup_r+0x7c>
 8013c8c:	89a3      	ldrh	r3, [r4, #12]
 8013c8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c96:	d003      	beq.n	8013ca0 <__swsetup_r+0x7c>
 8013c98:	4621      	mov	r1, r4
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	f000 f857 	bl	8013d4e <__smakebuf_r>
 8013ca0:	89a0      	ldrh	r0, [r4, #12]
 8013ca2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ca6:	f010 0301 	ands.w	r3, r0, #1
 8013caa:	d00a      	beq.n	8013cc2 <__swsetup_r+0x9e>
 8013cac:	2300      	movs	r3, #0
 8013cae:	60a3      	str	r3, [r4, #8]
 8013cb0:	6963      	ldr	r3, [r4, #20]
 8013cb2:	425b      	negs	r3, r3
 8013cb4:	61a3      	str	r3, [r4, #24]
 8013cb6:	6923      	ldr	r3, [r4, #16]
 8013cb8:	b943      	cbnz	r3, 8013ccc <__swsetup_r+0xa8>
 8013cba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cbe:	d1c4      	bne.n	8013c4a <__swsetup_r+0x26>
 8013cc0:	bd38      	pop	{r3, r4, r5, pc}
 8013cc2:	0781      	lsls	r1, r0, #30
 8013cc4:	bf58      	it	pl
 8013cc6:	6963      	ldrpl	r3, [r4, #20]
 8013cc8:	60a3      	str	r3, [r4, #8]
 8013cca:	e7f4      	b.n	8013cb6 <__swsetup_r+0x92>
 8013ccc:	2000      	movs	r0, #0
 8013cce:	e7f7      	b.n	8013cc0 <__swsetup_r+0x9c>
 8013cd0:	20000078 	.word	0x20000078

08013cd4 <_sbrk_r>:
 8013cd4:	b538      	push	{r3, r4, r5, lr}
 8013cd6:	4d06      	ldr	r5, [pc, #24]	; (8013cf0 <_sbrk_r+0x1c>)
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4604      	mov	r4, r0
 8013cdc:	4608      	mov	r0, r1
 8013cde:	602b      	str	r3, [r5, #0]
 8013ce0:	f7ec ffc2 	bl	8000c68 <_sbrk>
 8013ce4:	1c43      	adds	r3, r0, #1
 8013ce6:	d102      	bne.n	8013cee <_sbrk_r+0x1a>
 8013ce8:	682b      	ldr	r3, [r5, #0]
 8013cea:	b103      	cbz	r3, 8013cee <_sbrk_r+0x1a>
 8013cec:	6023      	str	r3, [r4, #0]
 8013cee:	bd38      	pop	{r3, r4, r5, pc}
 8013cf0:	20010b78 	.word	0x20010b78

08013cf4 <abort>:
 8013cf4:	b508      	push	{r3, lr}
 8013cf6:	2006      	movs	r0, #6
 8013cf8:	f000 f88e 	bl	8013e18 <raise>
 8013cfc:	2001      	movs	r0, #1
 8013cfe:	f7ec ff3b 	bl	8000b78 <_exit>

08013d02 <__swhatbuf_r>:
 8013d02:	b570      	push	{r4, r5, r6, lr}
 8013d04:	460c      	mov	r4, r1
 8013d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d0a:	2900      	cmp	r1, #0
 8013d0c:	b096      	sub	sp, #88	; 0x58
 8013d0e:	4615      	mov	r5, r2
 8013d10:	461e      	mov	r6, r3
 8013d12:	da0d      	bge.n	8013d30 <__swhatbuf_r+0x2e>
 8013d14:	89a3      	ldrh	r3, [r4, #12]
 8013d16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013d1a:	f04f 0100 	mov.w	r1, #0
 8013d1e:	bf0c      	ite	eq
 8013d20:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013d24:	2340      	movne	r3, #64	; 0x40
 8013d26:	2000      	movs	r0, #0
 8013d28:	6031      	str	r1, [r6, #0]
 8013d2a:	602b      	str	r3, [r5, #0]
 8013d2c:	b016      	add	sp, #88	; 0x58
 8013d2e:	bd70      	pop	{r4, r5, r6, pc}
 8013d30:	466a      	mov	r2, sp
 8013d32:	f000 f879 	bl	8013e28 <_fstat_r>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	dbec      	blt.n	8013d14 <__swhatbuf_r+0x12>
 8013d3a:	9901      	ldr	r1, [sp, #4]
 8013d3c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013d40:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013d44:	4259      	negs	r1, r3
 8013d46:	4159      	adcs	r1, r3
 8013d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d4c:	e7eb      	b.n	8013d26 <__swhatbuf_r+0x24>

08013d4e <__smakebuf_r>:
 8013d4e:	898b      	ldrh	r3, [r1, #12]
 8013d50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d52:	079d      	lsls	r5, r3, #30
 8013d54:	4606      	mov	r6, r0
 8013d56:	460c      	mov	r4, r1
 8013d58:	d507      	bpl.n	8013d6a <__smakebuf_r+0x1c>
 8013d5a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d5e:	6023      	str	r3, [r4, #0]
 8013d60:	6123      	str	r3, [r4, #16]
 8013d62:	2301      	movs	r3, #1
 8013d64:	6163      	str	r3, [r4, #20]
 8013d66:	b002      	add	sp, #8
 8013d68:	bd70      	pop	{r4, r5, r6, pc}
 8013d6a:	ab01      	add	r3, sp, #4
 8013d6c:	466a      	mov	r2, sp
 8013d6e:	f7ff ffc8 	bl	8013d02 <__swhatbuf_r>
 8013d72:	9900      	ldr	r1, [sp, #0]
 8013d74:	4605      	mov	r5, r0
 8013d76:	4630      	mov	r0, r6
 8013d78:	f7ff faf6 	bl	8013368 <_malloc_r>
 8013d7c:	b948      	cbnz	r0, 8013d92 <__smakebuf_r+0x44>
 8013d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d82:	059a      	lsls	r2, r3, #22
 8013d84:	d4ef      	bmi.n	8013d66 <__smakebuf_r+0x18>
 8013d86:	f023 0303 	bic.w	r3, r3, #3
 8013d8a:	f043 0302 	orr.w	r3, r3, #2
 8013d8e:	81a3      	strh	r3, [r4, #12]
 8013d90:	e7e3      	b.n	8013d5a <__smakebuf_r+0xc>
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	6020      	str	r0, [r4, #0]
 8013d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d9a:	81a3      	strh	r3, [r4, #12]
 8013d9c:	9b00      	ldr	r3, [sp, #0]
 8013d9e:	6163      	str	r3, [r4, #20]
 8013da0:	9b01      	ldr	r3, [sp, #4]
 8013da2:	6120      	str	r0, [r4, #16]
 8013da4:	b15b      	cbz	r3, 8013dbe <__smakebuf_r+0x70>
 8013da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013daa:	4630      	mov	r0, r6
 8013dac:	f000 f84e 	bl	8013e4c <_isatty_r>
 8013db0:	b128      	cbz	r0, 8013dbe <__smakebuf_r+0x70>
 8013db2:	89a3      	ldrh	r3, [r4, #12]
 8013db4:	f023 0303 	bic.w	r3, r3, #3
 8013db8:	f043 0301 	orr.w	r3, r3, #1
 8013dbc:	81a3      	strh	r3, [r4, #12]
 8013dbe:	89a3      	ldrh	r3, [r4, #12]
 8013dc0:	431d      	orrs	r5, r3
 8013dc2:	81a5      	strh	r5, [r4, #12]
 8013dc4:	e7cf      	b.n	8013d66 <__smakebuf_r+0x18>

08013dc6 <_raise_r>:
 8013dc6:	291f      	cmp	r1, #31
 8013dc8:	b538      	push	{r3, r4, r5, lr}
 8013dca:	4604      	mov	r4, r0
 8013dcc:	460d      	mov	r5, r1
 8013dce:	d904      	bls.n	8013dda <_raise_r+0x14>
 8013dd0:	2316      	movs	r3, #22
 8013dd2:	6003      	str	r3, [r0, #0]
 8013dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd8:	bd38      	pop	{r3, r4, r5, pc}
 8013dda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013ddc:	b112      	cbz	r2, 8013de4 <_raise_r+0x1e>
 8013dde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013de2:	b94b      	cbnz	r3, 8013df8 <_raise_r+0x32>
 8013de4:	4620      	mov	r0, r4
 8013de6:	f000 f853 	bl	8013e90 <_getpid_r>
 8013dea:	462a      	mov	r2, r5
 8013dec:	4601      	mov	r1, r0
 8013dee:	4620      	mov	r0, r4
 8013df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013df4:	f000 b83a 	b.w	8013e6c <_kill_r>
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d00a      	beq.n	8013e12 <_raise_r+0x4c>
 8013dfc:	1c59      	adds	r1, r3, #1
 8013dfe:	d103      	bne.n	8013e08 <_raise_r+0x42>
 8013e00:	2316      	movs	r3, #22
 8013e02:	6003      	str	r3, [r0, #0]
 8013e04:	2001      	movs	r0, #1
 8013e06:	e7e7      	b.n	8013dd8 <_raise_r+0x12>
 8013e08:	2400      	movs	r4, #0
 8013e0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013e0e:	4628      	mov	r0, r5
 8013e10:	4798      	blx	r3
 8013e12:	2000      	movs	r0, #0
 8013e14:	e7e0      	b.n	8013dd8 <_raise_r+0x12>
	...

08013e18 <raise>:
 8013e18:	4b02      	ldr	r3, [pc, #8]	; (8013e24 <raise+0xc>)
 8013e1a:	4601      	mov	r1, r0
 8013e1c:	6818      	ldr	r0, [r3, #0]
 8013e1e:	f7ff bfd2 	b.w	8013dc6 <_raise_r>
 8013e22:	bf00      	nop
 8013e24:	20000078 	.word	0x20000078

08013e28 <_fstat_r>:
 8013e28:	b538      	push	{r3, r4, r5, lr}
 8013e2a:	4d07      	ldr	r5, [pc, #28]	; (8013e48 <_fstat_r+0x20>)
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	4604      	mov	r4, r0
 8013e30:	4608      	mov	r0, r1
 8013e32:	4611      	mov	r1, r2
 8013e34:	602b      	str	r3, [r5, #0]
 8013e36:	f7ec feee 	bl	8000c16 <_fstat>
 8013e3a:	1c43      	adds	r3, r0, #1
 8013e3c:	d102      	bne.n	8013e44 <_fstat_r+0x1c>
 8013e3e:	682b      	ldr	r3, [r5, #0]
 8013e40:	b103      	cbz	r3, 8013e44 <_fstat_r+0x1c>
 8013e42:	6023      	str	r3, [r4, #0]
 8013e44:	bd38      	pop	{r3, r4, r5, pc}
 8013e46:	bf00      	nop
 8013e48:	20010b78 	.word	0x20010b78

08013e4c <_isatty_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	4d06      	ldr	r5, [pc, #24]	; (8013e68 <_isatty_r+0x1c>)
 8013e50:	2300      	movs	r3, #0
 8013e52:	4604      	mov	r4, r0
 8013e54:	4608      	mov	r0, r1
 8013e56:	602b      	str	r3, [r5, #0]
 8013e58:	f7ec feed 	bl	8000c36 <_isatty>
 8013e5c:	1c43      	adds	r3, r0, #1
 8013e5e:	d102      	bne.n	8013e66 <_isatty_r+0x1a>
 8013e60:	682b      	ldr	r3, [r5, #0]
 8013e62:	b103      	cbz	r3, 8013e66 <_isatty_r+0x1a>
 8013e64:	6023      	str	r3, [r4, #0]
 8013e66:	bd38      	pop	{r3, r4, r5, pc}
 8013e68:	20010b78 	.word	0x20010b78

08013e6c <_kill_r>:
 8013e6c:	b538      	push	{r3, r4, r5, lr}
 8013e6e:	4d07      	ldr	r5, [pc, #28]	; (8013e8c <_kill_r+0x20>)
 8013e70:	2300      	movs	r3, #0
 8013e72:	4604      	mov	r4, r0
 8013e74:	4608      	mov	r0, r1
 8013e76:	4611      	mov	r1, r2
 8013e78:	602b      	str	r3, [r5, #0]
 8013e7a:	f7ec fe6b 	bl	8000b54 <_kill>
 8013e7e:	1c43      	adds	r3, r0, #1
 8013e80:	d102      	bne.n	8013e88 <_kill_r+0x1c>
 8013e82:	682b      	ldr	r3, [r5, #0]
 8013e84:	b103      	cbz	r3, 8013e88 <_kill_r+0x1c>
 8013e86:	6023      	str	r3, [r4, #0]
 8013e88:	bd38      	pop	{r3, r4, r5, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20010b78 	.word	0x20010b78

08013e90 <_getpid_r>:
 8013e90:	f7ec be58 	b.w	8000b44 <_getpid>

08013e94 <_init>:
 8013e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e96:	bf00      	nop
 8013e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e9a:	bc08      	pop	{r3}
 8013e9c:	469e      	mov	lr, r3
 8013e9e:	4770      	bx	lr

08013ea0 <_fini>:
 8013ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea2:	bf00      	nop
 8013ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ea6:	bc08      	pop	{r3}
 8013ea8:	469e      	mov	lr, r3
 8013eaa:	4770      	bx	lr
