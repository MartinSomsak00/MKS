
ZK1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c4  080039c4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080039c4  080039c4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039c4  080039c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  08003a34  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003a34  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e16  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c1  00000000  00000000  00028ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  0002a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005cd  00000000  00000000  0002af48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010b69  00000000  00000000  0002b515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a55f  00000000  00000000  0003c07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000613f4  00000000  00000000  000465dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000236c  00000000  00000000  000a79d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000a9d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800386c 	.word	0x0800386c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800386c 	.word	0x0800386c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046a:	f000 fc1d 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046e:	f000 f86b 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000472:	f000 f943 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000476:	f000 f911 	bl	800069c <MX_USART2_UART_Init>
  MX_ADC_Init();
 800047a:	f000 f8b5 	bl	80005e8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
sct_init();
 800047e:	f000 f9e4 	bl	800084a <sct_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   uint8_t last_S1_state = GPIO_PIN_SET;
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
   uint8_t last_S2_state = GPIO_PIN_SET;
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	2201      	movs	r2, #1
 800048c:	701a      	strb	r2, [r3, #0]

   while (1)
   {
       uint8_t current_S1_state = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 800048e:	1d3c      	adds	r4, r7, #4
 8000490:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <main+0xe0>)
 8000492:	2102      	movs	r1, #2
 8000494:	0018      	movs	r0, r3
 8000496:	f001 f9e3 	bl	8001860 <HAL_GPIO_ReadPin>
 800049a:	0003      	movs	r3, r0
 800049c:	7023      	strb	r3, [r4, #0]
       uint8_t current_S2_state = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 800049e:	1cfc      	adds	r4, r7, #3
 80004a0:	4b28      	ldr	r3, [pc, #160]	; (8000544 <main+0xe0>)
 80004a2:	2101      	movs	r1, #1
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 f9db 	bl	8001860 <HAL_GPIO_ReadPin>
 80004aa:	0003      	movs	r3, r0
 80004ac:	7023      	strb	r3, [r4, #0]

       if (current_S1_state == GPIO_PIN_SET && last_S1_state == GPIO_PIN_RESET)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d124      	bne.n	8000500 <main+0x9c>
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d120      	bne.n	8000500 <main+0x9c>
       {
           // Simulate rolling the dice
           for (uint8_t i = 0; i < 15; ++i)
 80004be:	1d7b      	adds	r3, r7, #5
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e018      	b.n	80004f8 <main+0x94>
           {
               // Display a random number between 1 and 6
               uint8_t random_number = (rand() % 6) + 1;
 80004c6:	f002 f9c5 	bl	8002854 <rand>
 80004ca:	0003      	movs	r3, r0
 80004cc:	2106      	movs	r1, #6
 80004ce:	0018      	movs	r0, r3
 80004d0:	f7ff ff94 	bl	80003fc <__aeabi_idivmod>
 80004d4:	000b      	movs	r3, r1
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	1cbb      	adds	r3, r7, #2
 80004da:	3201      	adds	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
               sct_value(random_number);
 80004de:	1cbb      	adds	r3, r7, #2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f9f2 	bl	80008cc <sct_value>

               HAL_Delay(100); // Adjust delay for the rolling effect
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f000 fc41 	bl	8000d70 <HAL_Delay>
           for (uint8_t i = 0; i < 15; ++i)
 80004ee:	1d7b      	adds	r3, r7, #5
 80004f0:	1d7a      	adds	r2, r7, #5
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	3201      	adds	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1d7b      	adds	r3, r7, #5
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b0e      	cmp	r3, #14
 80004fe:	d9e2      	bls.n	80004c6 <main+0x62>
           }
       }

       if (current_S2_state == GPIO_PIN_SET && last_S2_state == GPIO_PIN_RESET)
 8000500:	1cfb      	adds	r3, r7, #3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d114      	bne.n	8000532 <main+0xce>
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d110      	bne.n	8000532 <main+0xce>
       {
           // Generate a random number between 1 and 6
           uint8_t random_number = (rand() % 6) + 1;
 8000510:	f002 f9a0 	bl	8002854 <rand>
 8000514:	0003      	movs	r3, r0
 8000516:	2106      	movs	r1, #6
 8000518:	0018      	movs	r0, r3
 800051a:	f7ff ff6f 	bl	80003fc <__aeabi_idivmod>
 800051e:	000b      	movs	r3, r1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	1c7b      	adds	r3, r7, #1
 8000524:	3201      	adds	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]

           // Display the random number on the 7-segment display
           sct_value(random_number);
 8000528:	1c7b      	adds	r3, r7, #1
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	0018      	movs	r0, r3
 800052e:	f000 f9cd 	bl	80008cc <sct_value>
       }

       last_S1_state = current_S1_state;
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	1d3a      	adds	r2, r7, #4
 8000536:	7812      	ldrb	r2, [r2, #0]
 8000538:	701a      	strb	r2, [r3, #0]
       last_S2_state = current_S2_state;
 800053a:	1dbb      	adds	r3, r7, #6
 800053c:	1cfa      	adds	r2, r7, #3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
   {
 8000542:	e7a4      	b.n	800048e <main+0x2a>
 8000544:	48000800 	.word	0x48000800

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b091      	sub	sp, #68	; 0x44
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	2410      	movs	r4, #16
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2330      	movs	r3, #48	; 0x30
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 fab7 	bl	8002acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	003b      	movs	r3, r7
 8000560:	0018      	movs	r0, r3
 8000562:	2310      	movs	r3, #16
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f002 fab0 	bl	8002acc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2212      	movs	r2, #18
 8000572:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2201      	movs	r2, #1
 8000578:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2210      	movs	r2, #16
 8000584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2210      	movs	r2, #16
 800058a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	22a0      	movs	r2, #160	; 0xa0
 800059c:	0392      	lsls	r2, r2, #14
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f993 	bl	80018d4 <HAL_RCC_OscConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b2:	f000 f945 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	003b      	movs	r3, r7
 80005b8:	2207      	movs	r2, #7
 80005ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	003b      	movs	r3, r7
 80005be:	2202      	movs	r2, #2
 80005c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ce:	003b      	movs	r3, r7
 80005d0:	2101      	movs	r1, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fc98 	bl	8001f08 <HAL_RCC_ClockConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005dc:	f000 f930 	bl	8000840 <Error_Handler>
  }
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b011      	add	sp, #68	; 0x44
 80005e6:	bd90      	pop	{r4, r7, pc}

080005e8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	0018      	movs	r0, r3
 80005f2:	230c      	movs	r3, #12
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f002 fa68 	bl	8002acc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_ADC_Init+0xac>)
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <MX_ADC_Init+0xb0>)
 8000600:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_ADC_Init+0xac>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_ADC_Init+0xac>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC_Init+0xac>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC_Init+0xac>)
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ADC_Init+0xac>)
 800061c:	2204      	movs	r2, #4
 800061e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC_Init+0xac>)
 8000622:	2200      	movs	r2, #0
 8000624:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_ADC_Init+0xac>)
 8000628:	2200      	movs	r2, #0
 800062a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC_Init+0xac>)
 800062e:	2200      	movs	r2, #0
 8000630:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_ADC_Init+0xac>)
 8000634:	2200      	movs	r2, #0
 8000636:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_ADC_Init+0xac>)
 800063a:	22c2      	movs	r2, #194	; 0xc2
 800063c:	32ff      	adds	r2, #255	; 0xff
 800063e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC_Init+0xac>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_ADC_Init+0xac>)
 8000648:	2224      	movs	r2, #36	; 0x24
 800064a:	2100      	movs	r1, #0
 800064c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC_Init+0xac>)
 8000650:	2200      	movs	r2, #0
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC_Init+0xac>)
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fbae 	bl	8000db8 <HAL_ADC_Init>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000660:	f000 f8ee 	bl	8000840 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0152      	lsls	r2, r2, #5
 8000670:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2207      	movs	r2, #7
 8000676:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000678:	1d3a      	adds	r2, r7, #4
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_ADC_Init+0xac>)
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 fdaa 	bl	80011d8 <HAL_ADC_ConfigChannel>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000688:	f000 f8da 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b004      	add	sp, #16
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000084 	.word	0x20000084
 8000698:	40012400 	.word	0x40012400

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	2296      	movs	r2, #150	; 0x96
 80006aa:	0212      	lsls	r2, r2, #8
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fd63 	bl	80021ac <HAL_UART_Init>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f8a9 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000c4 	.word	0x200000c4
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b08b      	sub	sp, #44	; 0x2c
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	2414      	movs	r4, #20
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f002 f9dd 	bl	8002acc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <MX_GPIO_Init+0x138>)
 8000714:	695a      	ldr	r2, [r3, #20]
 8000716:	4b47      	ldr	r3, [pc, #284]	; (8000834 <MX_GPIO_Init+0x138>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0309      	lsls	r1, r1, #12
 800071c:	430a      	orrs	r2, r1
 800071e:	615a      	str	r2, [r3, #20]
 8000720:	4b44      	ldr	r3, [pc, #272]	; (8000834 <MX_GPIO_Init+0x138>)
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	031b      	lsls	r3, r3, #12
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <MX_GPIO_Init+0x138>)
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	4b40      	ldr	r3, [pc, #256]	; (8000834 <MX_GPIO_Init+0x138>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	03c9      	lsls	r1, r1, #15
 8000738:	430a      	orrs	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <MX_GPIO_Init+0x138>)
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	4013      	ands	r3, r2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <MX_GPIO_Init+0x138>)
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_GPIO_Init+0x138>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	0289      	lsls	r1, r1, #10
 8000754:	430a      	orrs	r2, r1
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_GPIO_Init+0x138>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	029b      	lsls	r3, r3, #10
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <MX_GPIO_Init+0x138>)
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	4b32      	ldr	r3, [pc, #200]	; (8000834 <MX_GPIO_Init+0x138>)
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	02c9      	lsls	r1, r1, #11
 8000770:	430a      	orrs	r2, r1
 8000772:	615a      	str	r2, [r3, #20]
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <MX_GPIO_Init+0x138>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	02db      	lsls	r3, r3, #11
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000782:	2390      	movs	r3, #144	; 0x90
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	0018      	movs	r0, r3
 800078c:	f001 f885 	bl	800189a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8000790:	2387      	movs	r3, #135	; 0x87
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4828      	ldr	r0, [pc, #160]	; (8000838 <MX_GPIO_Init+0x13c>)
 8000796:	2200      	movs	r2, #0
 8000798:	0019      	movs	r1, r3
 800079a:	f001 f87e 	bl	800189a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0192      	lsls	r2, r2, #6
 80007a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2284      	movs	r2, #132	; 0x84
 80007aa:	0392      	lsls	r2, r2, #14
 80007ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	4a21      	ldr	r2, [pc, #132]	; (800083c <MX_GPIO_Init+0x140>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	0010      	movs	r0, r2
 80007bc:	f000 fee0 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2203      	movs	r2, #3
 80007c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2201      	movs	r2, #1
 80007d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	4a19      	ldr	r2, [pc, #100]	; (800083c <MX_GPIO_Init+0x140>)
 80007d6:	0019      	movs	r1, r3
 80007d8:	0010      	movs	r0, r2
 80007da:	f000 fed1 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007de:	193b      	adds	r3, r7, r4
 80007e0:	2220      	movs	r2, #32
 80007e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	2201      	movs	r2, #1
 80007e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f6:	193a      	adds	r2, r7, r4
 80007f8:	2390      	movs	r3, #144	; 0x90
 80007fa:	05db      	lsls	r3, r3, #23
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 febe 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2287      	movs	r2, #135	; 0x87
 800080a:	00d2      	lsls	r2, r2, #3
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	187b      	adds	r3, r7, r1
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <MX_GPIO_Init+0x13c>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f000 feaa 	bl	8001580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b00b      	add	sp, #44	; 0x2c
 8000832:	bd90      	pop	{r4, r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>

0800084a <sct_init>:
		0b0100000000000011 << 16, // 7
		0b0111000000001111 << 16, // 8
		0b0110000000001111 << 16  // 9
};

void sct_init(void) {
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
	sct_led(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f804 	bl	800085c <sct_led>
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <sct_led>:

void sct_led(uint32_t value) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < 32; i++) {
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e01b      	b.n	80008a2 <sct_led+0x46>
		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, (value >> i) & 1);
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	40da      	lsrs	r2, r3
 8000870:	0013      	movs	r3, r2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2201      	movs	r2, #1
 8000876:	4013      	ands	r3, r2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <sct_led+0x6c>)
 800087c:	001a      	movs	r2, r3
 800087e:	2110      	movs	r1, #16
 8000880:	f001 f80b 	bl	800189a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <sct_led+0x6c>)
 8000886:	2201      	movs	r2, #1
 8000888:	2108      	movs	r1, #8
 800088a:	0018      	movs	r0, r3
 800088c:	f001 f805 	bl	800189a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <sct_led+0x6c>)
 8000892:	2200      	movs	r2, #0
 8000894:	2108      	movs	r1, #8
 8000896:	0018      	movs	r0, r3
 8000898:	f000 ffff 	bl	800189a <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < 32; i++) {
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	3301      	adds	r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b1f      	cmp	r3, #31
 80008a6:	d9e0      	bls.n	800086a <sct_led+0xe>
	}
		HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <sct_led+0x6c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	2120      	movs	r1, #32
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fff3 	bl	800189a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <sct_led+0x6c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 ffed 	bl	800189a <HAL_GPIO_WritePin>
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48000400 	.word	0x48000400

080008cc <sct_value>:

void sct_value(uint8_t value) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	0002      	movs	r2, r0
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	701a      	strb	r2, [r3, #0]
	uint32_t reg = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]

	// Check if the value is within the valid range (0-9)
	if (value <= 9) {
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b09      	cmp	r3, #9
 80008e2:	d807      	bhi.n	80008f4 <sct_value+0x28>
		// Display the 7-segment pattern for the value
		reg |= reg_values[value];
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <sct_value+0x38>)
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	58d3      	ldr	r3, [r2, r3]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
	}

	sct_led(reg);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff ffb0 	bl	800085c <sct_led>
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}
 8000904:	080038a4 	.word	0x080038a4

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x44>)
 8000910:	699a      	ldr	r2, [r3, #24]
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_MspInit+0x44>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <HAL_MspInit+0x44>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x44>)
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x44>)
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0549      	lsls	r1, r1, #21
 8000930:	430a      	orrs	r2, r1
 8000932:	61da      	str	r2, [r3, #28]
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_MspInit+0x44>)
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	055b      	lsls	r3, r3, #21
 800093c:	4013      	ands	r3, r2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b08b      	sub	sp, #44	; 0x2c
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	2414      	movs	r4, #20
 800095a:	193b      	adds	r3, r7, r4
 800095c:	0018      	movs	r0, r3
 800095e:	2314      	movs	r3, #20
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f002 f8b2 	bl	8002acc <memset>
  if(hadc->Instance==ADC1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <HAL_ADC_MspInit+0x94>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d133      	bne.n	80009da <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_ADC_MspInit+0x98>)
 8000974:	699a      	ldr	r2, [r3, #24]
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_ADC_MspInit+0x98>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0089      	lsls	r1, r1, #2
 800097c:	430a      	orrs	r2, r1
 800097e:	619a      	str	r2, [r3, #24]
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <HAL_ADC_MspInit+0x98>)
 8000982:	699a      	ldr	r2, [r3, #24]
 8000984:	2380      	movs	r3, #128	; 0x80
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4013      	ands	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_ADC_MspInit+0x98>)
 8000990:	695a      	ldr	r2, [r3, #20]
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_ADC_MspInit+0x98>)
 8000994:	2180      	movs	r1, #128	; 0x80
 8000996:	0289      	lsls	r1, r1, #10
 8000998:	430a      	orrs	r2, r1
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_ADC_MspInit+0x98>)
 800099e:	695a      	ldr	r2, [r3, #20]
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	029b      	lsls	r3, r3, #10
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2203      	movs	r2, #3
 80009b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	193a      	adds	r2, r7, r4
 80009be:	2390      	movs	r3, #144	; 0x90
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fddb 	bl	8001580 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	200c      	movs	r0, #12
 80009d0:	f000 fda4 	bl	800151c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009d4:	200c      	movs	r0, #12
 80009d6:	f000 fdb6 	bl	8001546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b00b      	add	sp, #44	; 0x2c
 80009e0:	bd90      	pop	{r4, r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40012400 	.word	0x40012400
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	2414      	movs	r4, #20
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	2314      	movs	r3, #20
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f002 f864 	bl	8002acc <memset>
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d132      	bne.n	8000a74 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a10:	69da      	ldr	r2, [r3, #28]
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0289      	lsls	r1, r1, #10
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	61da      	str	r2, [r3, #28]
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	029b      	lsls	r3, r3, #10
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0289      	lsls	r1, r1, #10
 8000a34:	430a      	orrs	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_UART_MspInit+0x94>)
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	029b      	lsls	r3, r3, #10
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a46:	0021      	movs	r1, r4
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2202      	movs	r2, #2
 8000a52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2201      	movs	r2, #1
 8000a64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	187a      	adds	r2, r7, r1
 8000a68:	2390      	movs	r3, #144	; 0x90
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fd86 	bl	8001580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00b      	add	sp, #44	; 0x2c
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40021000 	.word	0x40021000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f946 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <ADC1_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fabc 	bl	8001038 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000084 	.word	0x20000084

08000acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <_kill>:

int _kill(int pid, int sig)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ae2:	f002 f849 	bl	8002b78 <__errno>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	2216      	movs	r2, #22
 8000aea:	601a      	str	r2, [r3, #0]
  return -1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_exit>:

void _exit (int status)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b00:	2301      	movs	r3, #1
 8000b02:	425a      	negs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ffe5 	bl	8000ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b0e:	e7fe      	b.n	8000b0e <_exit+0x16>

08000b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b22:	e000      	b.n	8000b26 <_read+0x16>
 8000b24:	bf00      	nop
 8000b26:	0001      	movs	r1, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	b2ca      	uxtb	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf0      	blt.n	8000b22 <_read+0x12>
  }

  return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b006      	add	sp, #24
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e009      	b.n	8000b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	0018      	movs	r0, r3
 8000b66:	e000      	b.n	8000b6a <_write+0x20>
 8000b68:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf1      	blt.n	8000b5c <_write+0x12>
  }
  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b006      	add	sp, #24
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_close>:

int _close(int file)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	425b      	negs	r3, r3
}
 8000b8e:	0018      	movs	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0192      	lsls	r2, r2, #6
 8000ba6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	0018      	movs	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	18d3      	adds	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f001 ffb4 	bl	8002b78 <__errno>
 8000c10:	0003      	movs	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	425b      	negs	r3, r3
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	18d2      	adds	r2, r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b006      	add	sp, #24
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20002000 	.word	0x20002000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000148 	.word	0x20000148
 8000c44:	200002a0 	.word	0x200002a0

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c7e:	f7ff ffe3 	bl	8000c48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c82:	f001 ff7f 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff fbed 	bl	8000464 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c98:	080039cc 	.word	0x080039cc
  ldr r2, =_sbss
 8000c9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca0:	2000029c 	.word	0x2000029c

08000ca4 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <DMA1_Channel1_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_Init+0x24>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_Init+0x24>)
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f809 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbe:	f7ff fe23 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_InitTick+0x5c>)
 8000cda:	681c      	ldr	r4, [r3, #0]
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_InitTick+0x60>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	23fa      	movs	r3, #250	; 0xfa
 8000ce4:	0098      	lsls	r0, r3, #2
 8000ce6:	f7ff fa19 	bl	800011c <__udivsi3>
 8000cea:	0003      	movs	r3, r0
 8000cec:	0019      	movs	r1, r3
 8000cee:	0020      	movs	r0, r4
 8000cf0:	f7ff fa14 	bl	800011c <__udivsi3>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fc35 	bl	8001566 <HAL_SYSTICK_Config>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e00f      	b.n	8000d24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d80b      	bhi.n	8000d22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	425b      	negs	r3, r3
 8000d10:	2200      	movs	r2, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fc02 	bl	800151c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_InitTick+0x64>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b003      	add	sp, #12
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_IncTick+0x1c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	001a      	movs	r2, r3
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x20>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	18d2      	adds	r2, r2, r3
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_IncTick+0x20>)
 8000d4a:	601a      	str	r2, [r3, #0]
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000008 	.word	0x20000008
 8000d58:	2000014c 	.word	0x2000014c

08000d5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <HAL_GetTick+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	2000014c 	.word	0x2000014c

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff fff0 	bl	8000d5c <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3301      	adds	r3, #1
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001a      	movs	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	189b      	adds	r3, r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	f7ff ffe0 	bl	8000d5c <HAL_GetTick>
 8000d9c:	0002      	movs	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e125      	b.n	8001022 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10a      	bne.n	8000df4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2234      	movs	r2, #52	; 0x34
 8000de8:	2100      	movs	r1, #0
 8000dea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff fdae 	bl	8000950 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df8:	2210      	movs	r2, #16
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d000      	beq.n	8000e00 <HAL_ADC_Init+0x48>
 8000dfe:	e103      	b.n	8001008 <HAL_ADC_Init+0x250>
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d000      	beq.n	8000e0c <HAL_ADC_Init+0x54>
 8000e0a:	e0fd      	b.n	8001008 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2204      	movs	r2, #4
 8000e14:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e16:	d000      	beq.n	8000e1a <HAL_ADC_Init+0x62>
 8000e18:	e0f6      	b.n	8001008 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	4a83      	ldr	r2, [pc, #524]	; (800102c <HAL_ADC_Init+0x274>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	2202      	movs	r2, #2
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d112      	bne.n	8000e5e <HAL_ADC_Init+0xa6>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d009      	beq.n	8000e5a <HAL_ADC_Init+0xa2>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	2380      	movs	r3, #128	; 0x80
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	401a      	ands	r2, r3
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d101      	bne.n	8000e5e <HAL_ADC_Init+0xa6>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <HAL_ADC_Init+0xa8>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d116      	bne.n	8000e92 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2218      	movs	r2, #24
 8000e6c:	4393      	bics	r3, r2
 8000e6e:	0019      	movs	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	0899      	lsrs	r1, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4964      	ldr	r1, [pc, #400]	; (8001030 <HAL_ADC_Init+0x278>)
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7e1b      	ldrb	r3, [r3, #24]
 8000ea6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7e5b      	ldrb	r3, [r3, #25]
 8000eac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	7e9b      	ldrb	r3, [r3, #26]
 8000eb4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000eb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d002      	beq.n	8000ec6 <HAL_ADC_Init+0x10e>
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	e000      	b.n	8000ec8 <HAL_ADC_Init+0x110>
 8000ec6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ec8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ece:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d101      	bne.n	8000edc <HAL_ADC_Init+0x124>
 8000ed8:	2304      	movs	r3, #4
 8000eda:	e000      	b.n	8000ede <HAL_ADC_Init+0x126>
 8000edc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000ede:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2124      	movs	r1, #36	; 0x24
 8000ee4:	5c5b      	ldrb	r3, [r3, r1]
 8000ee6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ee8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7edb      	ldrb	r3, [r3, #27]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d115      	bne.n	8000f24 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7e9b      	ldrb	r3, [r3, #26]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0252      	lsls	r2, r2, #9
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	e00b      	b.n	8000f24 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f10:	2220      	movs	r2, #32
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	23c2      	movs	r3, #194	; 0xc2
 8000f2a:	33ff      	adds	r3, #255	; 0xff
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d007      	beq.n	8000f40 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68d9      	ldr	r1, [r3, #12]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	055b      	lsls	r3, r3, #21
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d01b      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d017      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d013      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d00f      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	d00b      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d007      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	2b06      	cmp	r3, #6
 8000f8a:	d003      	beq.n	8000f94 <HAL_ADC_Init+0x1dc>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d112      	bne.n	8000fba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2107      	movs	r1, #7
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6959      	ldr	r1, [r3, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	2207      	movs	r2, #7
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <HAL_ADC_Init+0x27c>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4393      	bics	r3, r2
 8000fd8:	2201      	movs	r2, #1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fe0:	e01c      	b.n	800101c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe6:	2212      	movs	r2, #18
 8000fe8:	4393      	bics	r3, r2
 8000fea:	2210      	movs	r2, #16
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001006:	e009      	b.n	800101c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100c:	2210      	movs	r2, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001014:	230f      	movs	r3, #15
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800101c:	230f      	movs	r3, #15
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	781b      	ldrb	r3, [r3, #0]
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	fffffefd 	.word	0xfffffefd
 8001030:	fffe0219 	.word	0xfffe0219
 8001034:	833fffe7 	.word	0x833fffe7

08001038 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
 800104a:	2b04      	cmp	r3, #4
 800104c:	d106      	bne.n	800105c <HAL_ADC_IRQHandler+0x24>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2204      	movs	r2, #4
 8001056:	4013      	ands	r3, r2
 8001058:	2b04      	cmp	r3, #4
 800105a:	d00d      	beq.n	8001078 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2208      	movs	r2, #8
 8001064:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001066:	2b08      	cmp	r3, #8
 8001068:	d14f      	bne.n	800110a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2208      	movs	r2, #8
 8001072:	4013      	ands	r3, r2
 8001074:	2b08      	cmp	r3, #8
 8001076:	d148      	bne.n	800110a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107c:	2210      	movs	r2, #16
 800107e:	4013      	ands	r3, r2
 8001080:	d106      	bne.n	8001090 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d12d      	bne.n	80010fa <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d129      	bne.n	80010fa <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2208      	movs	r2, #8
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d122      	bne.n	80010fa <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2204      	movs	r2, #4
 80010bc:	4013      	ands	r3, r2
 80010be:	d110      	bne.n	80010e2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	210c      	movs	r1, #12
 80010cc:	438a      	bics	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d4:	4a33      	ldr	r2, [pc, #204]	; (80011a4 <HAL_ADC_IRQHandler+0x16c>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
 80010e0:	e00b      	b.n	80010fa <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	2220      	movs	r2, #32
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f2:	2201      	movs	r2, #1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 f853 	bl	80011a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	4013      	ands	r3, r2
 8001114:	2b80      	cmp	r3, #128	; 0x80
 8001116:	d115      	bne.n	8001144 <HAL_ADC_IRQHandler+0x10c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	4013      	ands	r3, r2
 8001122:	2b80      	cmp	r3, #128	; 0x80
 8001124:	d10e      	bne.n	8001144 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0252      	lsls	r2, r2, #9
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f83e 	bl	80011b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2210      	movs	r2, #16
 800114c:	4013      	ands	r3, r2
 800114e:	2b10      	cmp	r3, #16
 8001150:	d123      	bne.n	800119a <HAL_ADC_IRQHandler+0x162>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2210      	movs	r2, #16
 800115a:	4013      	ands	r3, r2
 800115c:	2b10      	cmp	r3, #16
 800115e:	d11c      	bne.n	800119a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	2b01      	cmp	r3, #1
 8001166:	d006      	beq.n	8001176 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001172:	2b01      	cmp	r3, #1
 8001174:	d10d      	bne.n	8001192 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117a:	2202      	movs	r2, #2
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2210      	movs	r2, #16
 8001188:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	0018      	movs	r0, r3
 800118e:	f000 f81b 	bl	80011c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2210      	movs	r2, #16
 8001198:	601a      	str	r2, [r3, #0]
  }

}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	fffffefe 	.word	0xfffffefe

080011a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b002      	add	sp, #8
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e2:	230f      	movs	r3, #15
 80011e4:	18fb      	adds	r3, r7, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	055b      	lsls	r3, r3, #21
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d011      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d00d      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	2b02      	cmp	r3, #2
 8001208:	d009      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	2b03      	cmp	r3, #3
 8001210:	d005      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2b04      	cmp	r3, #4
 8001218:	d001      	beq.n	800121e <HAL_ADC_ConfigChannel+0x46>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2234      	movs	r2, #52	; 0x34
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_ConfigChannel+0x54>
 8001228:	2302      	movs	r3, #2
 800122a:	e0bb      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x1cc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2234      	movs	r2, #52	; 0x34
 8001230:	2101      	movs	r1, #1
 8001232:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2204      	movs	r2, #4
 800123c:	4013      	ands	r3, r2
 800123e:	d000      	beq.n	8001242 <HAL_ADC_ConfigChannel+0x6a>
 8001240:	e09f      	b.n	8001382 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a59      	ldr	r2, [pc, #356]	; (80013ac <HAL_ADC_ConfigChannel+0x1d4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_ADC_ConfigChannel+0x76>
 800124c:	e077      	b.n	800133e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	409a      	lsls	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	055b      	lsls	r3, r3, #21
 800126c:	429a      	cmp	r2, r3
 800126e:	d037      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	2b01      	cmp	r3, #1
 8001276:	d033      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b02      	cmp	r3, #2
 800127e:	d02f      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b03      	cmp	r3, #3
 8001286:	d02b      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	2b04      	cmp	r3, #4
 800128e:	d027      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	2b05      	cmp	r3, #5
 8001296:	d023      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	2b06      	cmp	r3, #6
 800129e:	d01f      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	d01b      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2107      	movs	r1, #7
 80012b4:	400b      	ands	r3, r1
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d012      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695a      	ldr	r2, [r3, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2107      	movs	r1, #7
 80012c6:	438a      	bics	r2, r1
 80012c8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6959      	ldr	r1, [r3, #20]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2207      	movs	r2, #7
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d003      	beq.n	80012f0 <HAL_ADC_ConfigChannel+0x118>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b11      	cmp	r3, #17
 80012ee:	d152      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012f0:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_ADC_ConfigChannel+0x1d8>)
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d102      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x12a>
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	041b      	lsls	r3, r3, #16
 8001300:	e001      	b.n	8001306 <HAL_ADC_ConfigChannel+0x12e>
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	03db      	lsls	r3, r3, #15
 8001306:	4a2a      	ldr	r2, [pc, #168]	; (80013b0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001308:	430b      	orrs	r3, r1
 800130a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b10      	cmp	r3, #16
 8001312:	d140      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_ADC_ConfigChannel+0x1dc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4927      	ldr	r1, [pc, #156]	; (80013b8 <HAL_ADC_ConfigChannel+0x1e0>)
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe fefe 	bl	800011c <__udivsi3>
 8001320:	0003      	movs	r3, r0
 8001322:	001a      	movs	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	189b      	adds	r3, r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800132e:	e002      	b.n	8001336 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	3b01      	subs	r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f9      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x158>
 800133c:	e02b      	b.n	8001396 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d003      	beq.n	8001368 <HAL_ADC_ConfigChannel+0x190>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b11      	cmp	r3, #17
 8001366:	d116      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_ADC_ConfigChannel+0x1d8>)
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b10      	cmp	r3, #16
 8001372:	d101      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x1a0>
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001376:	e000      	b.n	800137a <HAL_ADC_ConfigChannel+0x1a2>
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_ADC_ConfigChannel+0x1e8>)
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_ADC_ConfigChannel+0x1d8>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e009      	b.n	8001396 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	2220      	movs	r2, #32
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800138e:	230f      	movs	r3, #15
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2234      	movs	r2, #52	; 0x34
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	00001001 	.word	0x00001001
 80013b0:	40012708 	.word	0x40012708
 80013b4:	20000000 	.word	0x20000000
 80013b8:	000f4240 	.word	0x000f4240
 80013bc:	ff7fffff 	.word	0xff7fffff
 80013c0:	ffbfffff 	.word	0xffbfffff

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	0002      	movs	r2, r0
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b7f      	cmp	r3, #127	; 0x7f
 80013d6:	d809      	bhi.n	80013ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	001a      	movs	r2, r3
 80013de:	231f      	movs	r3, #31
 80013e0:	401a      	ands	r2, r3
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_EnableIRQ+0x30>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	4091      	lsls	r1, r2
 80013e8:	000a      	movs	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
  }
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	0002      	movs	r2, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b7f      	cmp	r3, #127	; 0x7f
 800140c:	d828      	bhi.n	8001460 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140e:	4a2f      	ldr	r2, [pc, #188]	; (80014cc <__NVIC_SetPriority+0xd4>)
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b25b      	sxtb	r3, r3
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	33c0      	adds	r3, #192	; 0xc0
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	589b      	ldr	r3, [r3, r2]
 800141e:	1dfa      	adds	r2, r7, #7
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	0011      	movs	r1, r2
 8001424:	2203      	movs	r2, #3
 8001426:	400a      	ands	r2, r1
 8001428:	00d2      	lsls	r2, r2, #3
 800142a:	21ff      	movs	r1, #255	; 0xff
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	43d2      	mvns	r2, r2
 8001432:	401a      	ands	r2, r3
 8001434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	019b      	lsls	r3, r3, #6
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	401a      	ands	r2, r3
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	0018      	movs	r0, r3
 8001444:	2303      	movs	r3, #3
 8001446:	4003      	ands	r3, r0
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800144c:	481f      	ldr	r0, [pc, #124]	; (80014cc <__NVIC_SetPriority+0xd4>)
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b25b      	sxtb	r3, r3
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	430a      	orrs	r2, r1
 8001458:	33c0      	adds	r3, #192	; 0xc0
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800145e:	e031      	b.n	80014c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <__NVIC_SetPriority+0xd8>)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0019      	movs	r1, r3
 8001468:	230f      	movs	r3, #15
 800146a:	400b      	ands	r3, r1
 800146c:	3b08      	subs	r3, #8
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3306      	adds	r3, #6
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	18d3      	adds	r3, r2, r3
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1dfa      	adds	r2, r7, #7
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	0011      	movs	r1, r2
 8001480:	2203      	movs	r2, #3
 8001482:	400a      	ands	r2, r1
 8001484:	00d2      	lsls	r2, r2, #3
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	43d2      	mvns	r2, r2
 800148e:	401a      	ands	r2, r3
 8001490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	401a      	ands	r2, r3
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	2303      	movs	r3, #3
 80014a2:	4003      	ands	r3, r0
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <__NVIC_SetPriority+0xd8>)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	001c      	movs	r4, r3
 80014b0:	230f      	movs	r3, #15
 80014b2:	4023      	ands	r3, r4
 80014b4:	3b08      	subs	r3, #8
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	430a      	orrs	r2, r1
 80014ba:	3306      	adds	r3, #6
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	18c3      	adds	r3, r0, r3
 80014c0:	3304      	adds	r3, #4
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b003      	add	sp, #12
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	045b      	lsls	r3, r3, #17
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d301      	bcc.n	80014ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e8:	2301      	movs	r3, #1
 80014ea:	e010      	b.n	800150e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <SysTick_Config+0x44>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	3a01      	subs	r2, #1
 80014f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f4:	2301      	movs	r3, #1
 80014f6:	425b      	negs	r3, r3
 80014f8:	2103      	movs	r1, #3
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ff7c 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x44>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x44>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	210f      	movs	r1, #15
 8001528:	187b      	adds	r3, r7, r1
 800152a:	1c02      	adds	r2, r0, #0
 800152c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	187b      	adds	r3, r7, r1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b25b      	sxtb	r3, r3
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	0002      	movs	r2, r0
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001552:	1dfb      	adds	r3, r7, #7
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25b      	sxtb	r3, r3
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff ff33 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ffaf 	bl	80014d4 <SysTick_Config>
 8001576:	0003      	movs	r3, r0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b002      	add	sp, #8
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e14f      	b.n	8001830 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4091      	lsls	r1, r2
 800159a:	000a      	movs	r2, r1
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d100      	bne.n	80015a8 <HAL_GPIO_Init+0x28>
 80015a6:	e140      	b.n	800182a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2203      	movs	r2, #3
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	409a      	lsls	r2, r3
 80015e2:	0013      	movs	r3, r2
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	2201      	movs	r2, #1
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	4013      	ands	r3, r2
 800162a:	2b03      	cmp	r3, #3
 800162c:	d017      	beq.n	800165e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	409a      	lsls	r2, r3
 8001650:	0013      	movs	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	4013      	ands	r3, r2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d123      	bne.n	80016b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	08da      	lsrs	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3208      	adds	r2, #8
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	58d3      	ldr	r3, [r2, r3]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2207      	movs	r2, #7
 800167c:	4013      	ands	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	409a      	lsls	r2, r3
 8001684:	0013      	movs	r3, r2
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2107      	movs	r1, #7
 8001696:	400b      	ands	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	6939      	ldr	r1, [r7, #16]
 80016b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	409a      	lsls	r2, r3
 80016c0:	0013      	movs	r3, r2
 80016c2:	43da      	mvns	r2, r3
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2203      	movs	r2, #3
 80016d0:	401a      	ands	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	23c0      	movs	r3, #192	; 0xc0
 80016ec:	029b      	lsls	r3, r3, #10
 80016ee:	4013      	ands	r3, r2
 80016f0:	d100      	bne.n	80016f4 <HAL_GPIO_Init+0x174>
 80016f2:	e09a      	b.n	800182a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <HAL_GPIO_Init+0x2c8>)
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_GPIO_Init+0x2c8>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	619a      	str	r2, [r3, #24]
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_GPIO_Init+0x2c8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800170c:	4a4f      	ldr	r2, [pc, #316]	; (800184c <HAL_GPIO_Init+0x2cc>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	589b      	ldr	r3, [r3, r2]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2203      	movs	r2, #3
 800171e:	4013      	ands	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	43da      	mvns	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	2390      	movs	r3, #144	; 0x90
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	429a      	cmp	r2, r3
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x1e2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a44      	ldr	r2, [pc, #272]	; (8001850 <HAL_GPIO_Init+0x2d0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x1de>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a43      	ldr	r2, [pc, #268]	; (8001854 <HAL_GPIO_Init+0x2d4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x1da>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_GPIO_Init+0x2d8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x1d6>
 8001752:	2303      	movs	r3, #3
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x1e4>
 8001756:	2305      	movs	r3, #5
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x1e4>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x1e4>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x1e4>
 8001762:	2300      	movs	r3, #0
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	2103      	movs	r1, #3
 8001768:	400a      	ands	r2, r1
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x2cc>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_GPIO_Init+0x2dc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	4013      	ands	r3, r2
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_GPIO_Init+0x2dc>)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_GPIO_Init+0x2dc>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	029b      	lsls	r3, r3, #10
 80017c4:	4013      	ands	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_GPIO_Init+0x2dc>)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_GPIO_Init+0x2dc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43da      	mvns	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	035b      	lsls	r3, r3, #13
 80017ee:	4013      	ands	r3, r2
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_GPIO_Init+0x2dc>)
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_GPIO_Init+0x2dc>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43da      	mvns	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	039b      	lsls	r3, r3, #14
 8001818:	4013      	ands	r3, r2
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_GPIO_Init+0x2dc>)
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	40da      	lsrs	r2, r3
 8001838:	1e13      	subs	r3, r2, #0
 800183a:	d000      	beq.n	800183e <HAL_GPIO_Init+0x2be>
 800183c:	e6a8      	b.n	8001590 <HAL_GPIO_Init+0x10>
  } 
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b006      	add	sp, #24
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000
 8001850:	48000400 	.word	0x48000400
 8001854:	48000800 	.word	0x48000800
 8001858:	48000c00 	.word	0x48000c00
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	000a      	movs	r2, r1
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	1cba      	adds	r2, r7, #2
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	4013      	ands	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800187a:	230f      	movs	r3, #15
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e003      	b.n	800188c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001884:	230f      	movs	r3, #15
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	781b      	ldrb	r3, [r3, #0]
  }
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	0008      	movs	r0, r1
 80018a4:	0011      	movs	r1, r2
 80018a6:	1cbb      	adds	r3, r7, #2
 80018a8:	1c02      	adds	r2, r0, #0
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	1c7b      	adds	r3, r7, #1
 80018ae:	1c0a      	adds	r2, r1, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b2:	1c7b      	adds	r3, r7, #1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ba:	1cbb      	adds	r3, r7, #2
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c2:	e003      	b.n	80018cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c4:	1cbb      	adds	r3, r7, #2
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e301      	b.n	8001eea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d100      	bne.n	80018f2 <HAL_RCC_OscConfig+0x1e>
 80018f0:	e08d      	b.n	8001a0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018f2:	4bc3      	ldr	r3, [pc, #780]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	220c      	movs	r2, #12
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d00e      	beq.n	800191c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fe:	4bc0      	ldr	r3, [pc, #768]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	220c      	movs	r2, #12
 8001904:	4013      	ands	r3, r2
 8001906:	2b08      	cmp	r3, #8
 8001908:	d116      	bne.n	8001938 <HAL_RCC_OscConfig+0x64>
 800190a:	4bbd      	ldr	r3, [pc, #756]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	025b      	lsls	r3, r3, #9
 8001912:	401a      	ands	r2, r3
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	429a      	cmp	r2, r3
 800191a:	d10d      	bne.n	8001938 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	4bb8      	ldr	r3, [pc, #736]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	029b      	lsls	r3, r3, #10
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x56>
 8001928:	e070      	b.n	8001a0c <HAL_RCC_OscConfig+0x138>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d000      	beq.n	8001934 <HAL_RCC_OscConfig+0x60>
 8001932:	e06b      	b.n	8001a0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e2d8      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x7c>
 8001940:	4baf      	ldr	r3, [pc, #700]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4bae      	ldr	r3, [pc, #696]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0249      	lsls	r1, r1, #9
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e02f      	b.n	80019b0 <HAL_RCC_OscConfig+0xdc>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x9e>
 8001958:	4ba9      	ldr	r3, [pc, #676]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4ba8      	ldr	r3, [pc, #672]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800195e:	49a9      	ldr	r1, [pc, #676]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	4ba6      	ldr	r3, [pc, #664]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4ba5      	ldr	r3, [pc, #660]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800196a:	49a7      	ldr	r1, [pc, #668]	; (8001c08 <HAL_RCC_OscConfig+0x334>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e01e      	b.n	80019b0 <HAL_RCC_OscConfig+0xdc>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d10e      	bne.n	8001998 <HAL_RCC_OscConfig+0xc4>
 800197a:	4ba1      	ldr	r3, [pc, #644]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4ba0      	ldr	r3, [pc, #640]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	02c9      	lsls	r1, r1, #11
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	4b9d      	ldr	r3, [pc, #628]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b9c      	ldr	r3, [pc, #624]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0249      	lsls	r1, r1, #9
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xdc>
 8001998:	4b99      	ldr	r3, [pc, #612]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b98      	ldr	r3, [pc, #608]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 800199e:	4999      	ldr	r1, [pc, #612]	; (8001c04 <HAL_RCC_OscConfig+0x330>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4b96      	ldr	r3, [pc, #600]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b95      	ldr	r3, [pc, #596]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	4997      	ldr	r1, [pc, #604]	; (8001c08 <HAL_RCC_OscConfig+0x334>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d014      	beq.n	80019e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f9d0 	bl	8000d5c <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c2:	f7ff f9cb 	bl	8000d5c <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e28a      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d4:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0xee>
 80019e0:	e015      	b.n	8001a0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f9bb 	bl	8000d5c <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f9b6 	bl	8000d5c <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e275      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	029b      	lsls	r3, r3, #10
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x118>
 8001a0a:	e000      	b.n	8001a0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d100      	bne.n	8001a1a <HAL_RCC_OscConfig+0x146>
 8001a18:	e069      	b.n	8001aee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a1a:	4b79      	ldr	r3, [pc, #484]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	d00b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a24:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d11c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x196>
 8001a30:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d116      	bne.n	8001a6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3c:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x17e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e24b      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b6b      	ldr	r3, [pc, #428]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	22f8      	movs	r2, #248	; 0xf8
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00da      	lsls	r2, r3, #3
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a68:	e041      	b.n	8001aee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f96d 	bl	8000d5c <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff f968 	bl	8000d5c <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e227      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d0f1      	beq.n	8001a88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	22f8      	movs	r2, #248	; 0xf8
 8001aaa:	4393      	bics	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00da      	lsls	r2, r3, #3
 8001ab4:	4b52      	ldr	r3, [pc, #328]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e018      	b.n	8001aee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001abc:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f948 	bl	8000d5c <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f943 	bl	8000d5c <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e202      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae4:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f1      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2208      	movs	r2, #8
 8001af4:	4013      	ands	r3, r2
 8001af6:	d036      	beq.n	8001b66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d019      	beq.n	8001b34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b00:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b04:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0c:	f7ff f926 	bl	8000d5c <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f921 	bl	8000d5c <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1e0      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d0f1      	beq.n	8001b16 <HAL_RCC_OscConfig+0x242>
 8001b32:	e018      	b.n	8001b66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b38:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7ff f90c 	bl	8000d5c <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f907 	bl	8000d5c <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1c6      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f1      	bne.n	8001b4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x29e>
 8001b70:	e0b4      	b.n	8001cdc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b72:	201f      	movs	r0, #31
 8001b74:	183b      	adds	r3, r7, r0
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	055b      	lsls	r3, r3, #21
 8001b82:	4013      	ands	r3, r2
 8001b84:	d110      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0549      	lsls	r1, r1, #21
 8001b90:	430a      	orrs	r2, r1
 8001b92:	61da      	str	r2, [r3, #28]
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	055b      	lsls	r3, r3, #21
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ba2:	183b      	adds	r3, r7, r0
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d11a      	bne.n	8001bea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_RCC_OscConfig+0x338>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_RCC_OscConfig+0x338>)
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	0049      	lsls	r1, r1, #1
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f8cb 	bl	8000d5c <HAL_GetTick>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bcc:	f7ff f8c6 	bl	8000d5c <HAL_GetTick>
 8001bd0:	0002      	movs	r2, r0
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e185      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x338>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10e      	bne.n	8001c10 <HAL_RCC_OscConfig+0x33c>
 8001bf2:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	6a1a      	ldr	r2, [r3, #32]
 8001bf6:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	621a      	str	r2, [r3, #32]
 8001bfe:	e035      	b.n	8001c6c <HAL_RCC_OscConfig+0x398>
 8001c00:	40021000 	.word	0x40021000
 8001c04:	fffeffff 	.word	0xfffeffff
 8001c08:	fffbffff 	.word	0xfffbffff
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x35e>
 8001c18:	4bb6      	ldr	r3, [pc, #728]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	4bb5      	ldr	r3, [pc, #724]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	621a      	str	r2, [r3, #32]
 8001c24:	4bb3      	ldr	r3, [pc, #716]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	4bb2      	ldr	r3, [pc, #712]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	621a      	str	r2, [r3, #32]
 8001c30:	e01c      	b.n	8001c6c <HAL_RCC_OscConfig+0x398>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x380>
 8001c3a:	4bae      	ldr	r3, [pc, #696]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	4bad      	ldr	r3, [pc, #692]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c40:	2104      	movs	r1, #4
 8001c42:	430a      	orrs	r2, r1
 8001c44:	621a      	str	r2, [r3, #32]
 8001c46:	4bab      	ldr	r3, [pc, #684]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c48:	6a1a      	ldr	r2, [r3, #32]
 8001c4a:	4baa      	ldr	r3, [pc, #680]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	621a      	str	r2, [r3, #32]
 8001c52:	e00b      	b.n	8001c6c <HAL_RCC_OscConfig+0x398>
 8001c54:	4ba7      	ldr	r3, [pc, #668]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	4ba6      	ldr	r3, [pc, #664]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	438a      	bics	r2, r1
 8001c5e:	621a      	str	r2, [r3, #32]
 8001c60:	4ba4      	ldr	r3, [pc, #656]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	4ba3      	ldr	r3, [pc, #652]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c66:	2104      	movs	r1, #4
 8001c68:	438a      	bics	r2, r1
 8001c6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d014      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff f872 	bl	8000d5c <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff f86d 	bl	8000d5c <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a9b      	ldr	r2, [pc, #620]	; (8001ef8 <HAL_RCC_OscConfig+0x624>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e12b      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	4b98      	ldr	r3, [pc, #608]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3aa>
 8001c9c:	e013      	b.n	8001cc6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f85d 	bl	8000d5c <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca6:	e009      	b.n	8001cbc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f858 	bl	8000d5c <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	4a91      	ldr	r2, [pc, #580]	; (8001ef8 <HAL_RCC_OscConfig+0x624>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e116      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cc6:	231f      	movs	r3, #31
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	4b87      	ldr	r3, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001cd6:	4989      	ldr	r1, [pc, #548]	; (8001efc <HAL_RCC_OscConfig+0x628>)
 8001cd8:	400a      	ands	r2, r1
 8001cda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d063      	beq.n	8001dae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d12a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cee:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf2:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001cfa:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff f829 	bl	8000d5c <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d10:	f7ff f824 	bl	8000d5c <HAL_GetTick>
 8001d14:	0002      	movs	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0e3      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d22:	4b74      	ldr	r3, [pc, #464]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	2202      	movs	r2, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d0f1      	beq.n	8001d10 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d2c:	4b71      	ldr	r3, [pc, #452]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	22f8      	movs	r2, #248	; 0xf8
 8001d32:	4393      	bics	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	00da      	lsls	r2, r3, #3
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
 8001d42:	e034      	b.n	8001dae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	3305      	adds	r3, #5
 8001d4a:	d111      	bne.n	8001d70 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d50:	4b68      	ldr	r3, [pc, #416]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d52:	2104      	movs	r1, #4
 8001d54:	438a      	bics	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d58:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	22f8      	movs	r2, #248	; 0xf8
 8001d5e:	4393      	bics	r3, r2
 8001d60:	0019      	movs	r1, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	00da      	lsls	r2, r3, #3
 8001d68:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d6e:	e01e      	b.n	8001dae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d70:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d74:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d76:	2104      	movs	r1, #4
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d7c:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d80:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7fe ffe8 	bl	8000d5c <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d92:	f7fe ffe3 	bl	8000d5c <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0a2      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d1f1      	bne.n	8001d92 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d100      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4e4>
 8001db6:	e097      	b.n	8001ee8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d100      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4f2>
 8001dc4:	e06b      	b.n	8001e9e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d14c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b48      	ldr	r3, [pc, #288]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001dd4:	494a      	ldr	r1, [pc, #296]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe ffbf 	bl	8000d5c <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe ffba 	bl	8000d5c <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e079      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	049b      	lsls	r3, r3, #18
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	220f      	movs	r2, #15
 8001e08:	4393      	bics	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x630>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	0449      	lsls	r1, r1, #17
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ff8d 	bl	8000d5c <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe ff88 	bl	8000d5c <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e047      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	049b      	lsls	r3, r3, #18
 8001e62:	4013      	ands	r3, r2
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x574>
 8001e66:	e03f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e6e:	4924      	ldr	r1, [pc, #144]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001e70:	400a      	ands	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ff72 	bl	8000d5c <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7fe ff6d 	bl	8000d5c <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e02c      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	049b      	lsls	r3, r3, #18
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5aa>
 8001e9c:	e024      	b.n	8001ee8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e01f      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	220f      	movs	r2, #15
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	23f0      	movs	r3, #240	; 0xf0
 8001ed8:	039b      	lsls	r3, r3, #14
 8001eda:	401a      	ands	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b008      	add	sp, #32
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	efffffff 	.word	0xefffffff
 8001f00:	feffffff 	.word	0xfeffffff
 8001f04:	ffc2ffff 	.word	0xffc2ffff

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b3      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d911      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4393      	bics	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	4b55      	ldr	r3, [pc, #340]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e09a      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d015      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d006      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f62:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4b4a      	ldr	r3, [pc, #296]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001f68:	21e0      	movs	r1, #224	; 0xe0
 8001f6a:	00c9      	lsls	r1, r1, #3
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	22f0      	movs	r2, #240	; 0xf0
 8001f76:	4393      	bics	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d114      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06e      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	049b      	lsls	r3, r3, #18
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d108      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e062      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b34      	ldr	r3, [pc, #208]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e05b      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fcc:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	4393      	bics	r3, r2
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe febc 	bl	8000d5c <HAL_GetTick>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe8:	e009      	b.n	8001ffe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fea:	f7fe feb7 	bl	8000d5c <HAL_GetTick>
 8001fee:	0002      	movs	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_RCC_ClockConfig+0x18c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e042      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	220c      	movs	r2, #12
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1ec      	bne.n	8001fea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2201      	movs	r2, #1
 8002016:	4013      	ands	r3, r2
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d211      	bcs.n	8002042 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	4393      	bics	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x184>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e020      	b.n	8002084 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2204      	movs	r2, #4
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a11      	ldr	r2, [pc, #68]	; (8002098 <HAL_RCC_ClockConfig+0x190>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002060:	f000 f820 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002064:	0001      	movs	r1, r0
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x188>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	220f      	movs	r2, #15
 800206e:	4013      	ands	r3, r2
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_RCC_ClockConfig+0x194>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	000a      	movs	r2, r1
 8002076:	40da      	lsrs	r2, r3
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x198>)
 800207a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe fe27 	bl	8000cd0 <HAL_InitTick>
  
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
 8002094:	00001388 	.word	0x00001388
 8002098:	fffff8ff 	.word	0xfffff8ff
 800209c:	080038cc 	.word	0x080038cc
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08f      	sub	sp, #60	; 0x3c
 80020a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020aa:	2314      	movs	r3, #20
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020b2:	c313      	stmia	r3!, {r0, r1, r4}
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020be:	c313      	stmia	r3!, {r0, r1, r4}
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80020cc:	2300      	movs	r3, #0
 80020ce:	637b      	str	r3, [r7, #52]	; 0x34
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	220c      	movs	r2, #12
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d002      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x4a>
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d003      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x50>
 80020ec:	e02d      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020f2:	e02d      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	220f      	movs	r2, #15
 80020fa:	4013      	ands	r3, r2
 80020fc:	2214      	movs	r2, #20
 80020fe:	18ba      	adds	r2, r7, r2
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	220f      	movs	r2, #15
 800210a:	4013      	ands	r3, r2
 800210c:	1d3a      	adds	r2, r7, #4
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	4013      	ands	r3, r2
 800211a:	d009      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800211c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800211e:	4812      	ldr	r0, [pc, #72]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002120:	f7fd fffc 	bl	800011c <__udivsi3>
 8002124:	0003      	movs	r3, r0
 8002126:	001a      	movs	r2, r3
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	4353      	muls	r3, r2
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
 800212e:	e009      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002132:	000a      	movs	r2, r1
 8002134:	0152      	lsls	r2, r2, #5
 8002136:	1a52      	subs	r2, r2, r1
 8002138:	0193      	lsls	r3, r2, #6
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	185b      	adds	r3, r3, r1
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002148:	e002      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_RCC_GetSysClockFreq+0xc4>)
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800214e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b00f      	add	sp, #60	; 0x3c
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	08003884 	.word	0x08003884
 8002160:	08003894 	.word	0x08003894
 8002164:	40021000 	.word	0x40021000
 8002168:	007a1200 	.word	0x007a1200

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_RCC_GetHCLKFreq+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002184:	f7ff fff2 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8002188:	0001      	movs	r1, r0
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	2207      	movs	r2, #7
 8002192:	4013      	ands	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	40d9      	lsrs	r1, r3
 800219a:	000b      	movs	r3, r1
}    
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	40021000 	.word	0x40021000
 80021a8:	080038dc 	.word	0x080038dc

080021ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e044      	b.n	8002248 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2274      	movs	r2, #116	; 0x74
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7fe fc0b 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f830 	bl	8002254 <UART_SetConfig>
 80021f4:	0003      	movs	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e024      	b.n	8002248 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 f963 	bl	80024d4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	490d      	ldr	r1, [pc, #52]	; (8002250 <HAL_UART_Init+0xa4>)
 800221a:	400a      	ands	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2108      	movs	r1, #8
 800222a:	438a      	bics	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f9fb 	bl	800263c <UART_CheckIdleState>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	fffff7ff 	.word	0xfffff7ff

08002254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800225c:	231e      	movs	r3, #30
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a8d      	ldr	r2, [pc, #564]	; (80024b8 <UART_SetConfig+0x264>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a88      	ldr	r2, [pc, #544]	; (80024bc <UART_SetConfig+0x268>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4a7f      	ldr	r2, [pc, #508]	; (80024c0 <UART_SetConfig+0x26c>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a7b      	ldr	r2, [pc, #492]	; (80024c4 <UART_SetConfig+0x270>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d127      	bne.n	800232a <UART_SetConfig+0xd6>
 80022da:	4b7b      	ldr	r3, [pc, #492]	; (80024c8 <UART_SetConfig+0x274>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	2203      	movs	r2, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d00d      	beq.n	8002302 <UART_SetConfig+0xae>
 80022e6:	d81b      	bhi.n	8002320 <UART_SetConfig+0xcc>
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d014      	beq.n	8002316 <UART_SetConfig+0xc2>
 80022ec:	d818      	bhi.n	8002320 <UART_SetConfig+0xcc>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <UART_SetConfig+0xa4>
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d00a      	beq.n	800230c <UART_SetConfig+0xb8>
 80022f6:	e013      	b.n	8002320 <UART_SetConfig+0xcc>
 80022f8:	231f      	movs	r3, #31
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e021      	b.n	8002346 <UART_SetConfig+0xf2>
 8002302:	231f      	movs	r3, #31
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2202      	movs	r2, #2
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e01c      	b.n	8002346 <UART_SetConfig+0xf2>
 800230c:	231f      	movs	r3, #31
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2204      	movs	r2, #4
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e017      	b.n	8002346 <UART_SetConfig+0xf2>
 8002316:	231f      	movs	r3, #31
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2208      	movs	r2, #8
 800231c:	701a      	strb	r2, [r3, #0]
 800231e:	e012      	b.n	8002346 <UART_SetConfig+0xf2>
 8002320:	231f      	movs	r3, #31
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2210      	movs	r2, #16
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	e00d      	b.n	8002346 <UART_SetConfig+0xf2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a67      	ldr	r2, [pc, #412]	; (80024cc <UART_SetConfig+0x278>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d104      	bne.n	800233e <UART_SetConfig+0xea>
 8002334:	231f      	movs	r3, #31
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
 800233c:	e003      	b.n	8002346 <UART_SetConfig+0xf2>
 800233e:	231f      	movs	r3, #31
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2210      	movs	r2, #16
 8002344:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	429a      	cmp	r2, r3
 8002350:	d15d      	bne.n	800240e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002352:	231f      	movs	r3, #31
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d015      	beq.n	8002388 <UART_SetConfig+0x134>
 800235c:	dc18      	bgt.n	8002390 <UART_SetConfig+0x13c>
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00d      	beq.n	800237e <UART_SetConfig+0x12a>
 8002362:	dc15      	bgt.n	8002390 <UART_SetConfig+0x13c>
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <UART_SetConfig+0x11a>
 8002368:	2b02      	cmp	r3, #2
 800236a:	d005      	beq.n	8002378 <UART_SetConfig+0x124>
 800236c:	e010      	b.n	8002390 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800236e:	f7ff ff07 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8002372:	0003      	movs	r3, r0
 8002374:	61bb      	str	r3, [r7, #24]
        break;
 8002376:	e012      	b.n	800239e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002378:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <UART_SetConfig+0x27c>)
 800237a:	61bb      	str	r3, [r7, #24]
        break;
 800237c:	e00f      	b.n	800239e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800237e:	f7ff fe91 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8002382:	0003      	movs	r3, r0
 8002384:	61bb      	str	r3, [r7, #24]
        break;
 8002386:	e00a      	b.n	800239e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	61bb      	str	r3, [r7, #24]
        break;
 800238e:	e006      	b.n	800239e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002394:	231e      	movs	r3, #30
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
        break;
 800239c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <UART_SetConfig+0x152>
 80023a4:	e07b      	b.n	800249e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	005a      	lsls	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	18d2      	adds	r2, r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0019      	movs	r1, r3
 80023b8:	0010      	movs	r0, r2
 80023ba:	f7fd feaf 	bl	800011c <__udivsi3>
 80023be:	0003      	movs	r3, r0
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	d91c      	bls.n	8002404 <UART_SetConfig+0x1b0>
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	025b      	lsls	r3, r3, #9
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d217      	bcs.n	8002404 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	200e      	movs	r0, #14
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	210f      	movs	r1, #15
 80023de:	438a      	bics	r2, r1
 80023e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2207      	movs	r2, #7
 80023ea:	4013      	ands	r3, r2
 80023ec:	b299      	uxth	r1, r3
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	183a      	adds	r2, r7, r0
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	183a      	adds	r2, r7, r0
 80023fe:	8812      	ldrh	r2, [r2, #0]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	e04c      	b.n	800249e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002404:	231e      	movs	r3, #30
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e047      	b.n	800249e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800240e:	231f      	movs	r3, #31
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d015      	beq.n	8002444 <UART_SetConfig+0x1f0>
 8002418:	dc18      	bgt.n	800244c <UART_SetConfig+0x1f8>
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00d      	beq.n	800243a <UART_SetConfig+0x1e6>
 800241e:	dc15      	bgt.n	800244c <UART_SetConfig+0x1f8>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <UART_SetConfig+0x1d6>
 8002424:	2b02      	cmp	r3, #2
 8002426:	d005      	beq.n	8002434 <UART_SetConfig+0x1e0>
 8002428:	e010      	b.n	800244c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800242a:	f7ff fea9 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
        break;
 8002432:	e012      	b.n	800245a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <UART_SetConfig+0x27c>)
 8002436:	61bb      	str	r3, [r7, #24]
        break;
 8002438:	e00f      	b.n	800245a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800243a:	f7ff fe33 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800243e:	0003      	movs	r3, r0
 8002440:	61bb      	str	r3, [r7, #24]
        break;
 8002442:	e00a      	b.n	800245a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	61bb      	str	r3, [r7, #24]
        break;
 800244a:	e006      	b.n	800245a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002450:	231e      	movs	r3, #30
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
        break;
 8002458:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01e      	beq.n	800249e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	085a      	lsrs	r2, r3, #1
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	18d2      	adds	r2, r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	0019      	movs	r1, r3
 8002470:	0010      	movs	r0, r2
 8002472:	f7fd fe53 	bl	800011c <__udivsi3>
 8002476:	0003      	movs	r3, r0
 8002478:	b29b      	uxth	r3, r3
 800247a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	d909      	bls.n	8002496 <UART_SetConfig+0x242>
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	429a      	cmp	r2, r3
 800248a:	d204      	bcs.n	8002496 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	e003      	b.n	800249e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002496:	231e      	movs	r3, #30
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024aa:	231e      	movs	r3, #30
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	781b      	ldrb	r3, [r3, #0]
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b008      	add	sp, #32
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	ffff69f3 	.word	0xffff69f3
 80024bc:	ffffcfff 	.word	0xffffcfff
 80024c0:	fffff4ff 	.word	0xfffff4ff
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40004400 	.word	0x40004400
 80024d0:	007a1200 	.word	0x007a1200

080024d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00b      	beq.n	80024fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <UART_AdvFeatureConfig+0x144>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d00b      	beq.n	8002520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a43      	ldr	r2, [pc, #268]	; (800261c <UART_AdvFeatureConfig+0x148>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d00b      	beq.n	8002542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a3b      	ldr	r2, [pc, #236]	; (8002620 <UART_AdvFeatureConfig+0x14c>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2208      	movs	r2, #8
 8002548:	4013      	ands	r3, r2
 800254a:	d00b      	beq.n	8002564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a34      	ldr	r2, [pc, #208]	; (8002624 <UART_AdvFeatureConfig+0x150>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2210      	movs	r2, #16
 800256a:	4013      	ands	r3, r2
 800256c:	d00b      	beq.n	8002586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <UART_AdvFeatureConfig+0x154>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2220      	movs	r2, #32
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <UART_AdvFeatureConfig+0x158>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	4013      	ands	r3, r2
 80025b0:	d01d      	beq.n	80025ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <UART_AdvFeatureConfig+0x15c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	035b      	lsls	r3, r3, #13
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d10b      	bne.n	80025ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a15      	ldr	r2, [pc, #84]	; (8002634 <UART_AdvFeatureConfig+0x160>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	4013      	ands	r3, r2
 80025f6:	d00b      	beq.n	8002610 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <UART_AdvFeatureConfig+0x164>)
 8002600:	4013      	ands	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	605a      	str	r2, [r3, #4]
  }
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}
 8002618:	fffdffff 	.word	0xfffdffff
 800261c:	fffeffff 	.word	0xfffeffff
 8002620:	fffbffff 	.word	0xfffbffff
 8002624:	ffff7fff 	.word	0xffff7fff
 8002628:	ffffefff 	.word	0xffffefff
 800262c:	ffffdfff 	.word	0xffffdfff
 8002630:	ffefffff 	.word	0xffefffff
 8002634:	ff9fffff 	.word	0xff9fffff
 8002638:	fff7ffff 	.word	0xfff7ffff

0800263c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af02      	add	r7, sp, #8
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	2100      	movs	r1, #0
 800264a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800264c:	f7fe fb86 	bl	8000d5c <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2208      	movs	r2, #8
 800265c:	4013      	ands	r3, r2
 800265e:	2b08      	cmp	r3, #8
 8002660:	d10c      	bne.n	800267c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0391      	lsls	r1, r2, #14
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <UART_CheckIdleState+0x8c>)
 800266c:	9200      	str	r2, [sp, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	f000 f82c 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e021      	b.n	80026c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2204      	movs	r2, #4
 8002684:	4013      	ands	r3, r2
 8002686:	2b04      	cmp	r3, #4
 8002688:	d10c      	bne.n	80026a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	03d1      	lsls	r1, r2, #15
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <UART_CheckIdleState+0x8c>)
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	f000 f818 	bl	80026cc <UART_WaitOnFlagUntilTimeout>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e00d      	b.n	80026c0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2274      	movs	r2, #116	; 0x74
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b004      	add	sp, #16
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	01ffffff 	.word	0x01ffffff

080026cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b094      	sub	sp, #80	; 0x50
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	1dfb      	adds	r3, r7, #7
 80026da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026dc:	e0a3      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e0:	3301      	adds	r3, #1
 80026e2:	d100      	bne.n	80026e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80026e4:	e09f      	b.n	8002826 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7fe fb39 	bl	8000d5c <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <UART_WaitOnFlagUntilTimeout+0x30>
 80026f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d13d      	bne.n	8002778 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
 8002706:	2301      	movs	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	f383 8810 	msr	PRIMASK, r3
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	494c      	ldr	r1, [pc, #304]	; (8002850 <UART_WaitOnFlagUntilTimeout+0x184>)
 800271e:	400a      	ands	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	f383 8810 	msr	PRIMASK, r3
}
 800272c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272e:	f3ef 8310 	mrs	r3, PRIMASK
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
 8002738:	2301      	movs	r3, #1
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	f383 8810 	msr	PRIMASK, r3
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	438a      	bics	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800275a:	f383 8810 	msr	PRIMASK, r3
}
 800275e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2274      	movs	r2, #116	; 0x74
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e067      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	4013      	ands	r3, r2
 8002782:	d050      	beq.n	8002826 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	401a      	ands	r2, r3
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	429a      	cmp	r2, r3
 8002796:	d146      	bne.n	8002826 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a2:	f3ef 8310 	mrs	r3, PRIMASK
 80027a6:	613b      	str	r3, [r7, #16]
  return(result);
 80027a8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4923      	ldr	r1, [pc, #140]	; (8002850 <UART_WaitOnFlagUntilTimeout+0x184>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f383 8810 	msr	PRIMASK, r3
}
 80027d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d4:	f3ef 8310 	mrs	r3, PRIMASK
 80027d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80027da:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80027de:	2301      	movs	r3, #1
 80027e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f383 8810 	msr	PRIMASK, r3
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	438a      	bics	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f383 8810 	msr	PRIMASK, r3
}
 8002804:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	2120      	movs	r1, #32
 8002818:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2274      	movs	r2, #116	; 0x74
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e010      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4013      	ands	r3, r2
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	425a      	negs	r2, r3
 8002836:	4153      	adcs	r3, r2
 8002838:	b2db      	uxtb	r3, r3
 800283a:	001a      	movs	r2, r3
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d100      	bne.n	8002846 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002844:	e74b      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b014      	add	sp, #80	; 0x50
 800284e:	bd80      	pop	{r7, pc}
 8002850:	fffffe5f 	.word	0xfffffe5f

08002854 <rand>:
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <rand+0x5c>)
 8002856:	b510      	push	{r4, lr}
 8002858:	681c      	ldr	r4, [r3, #0]
 800285a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800285c:	2b00      	cmp	r3, #0
 800285e:	d116      	bne.n	800288e <rand+0x3a>
 8002860:	2018      	movs	r0, #24
 8002862:	f000 fa1d 	bl	8002ca0 <malloc>
 8002866:	1e02      	subs	r2, r0, #0
 8002868:	6320      	str	r0, [r4, #48]	; 0x30
 800286a:	d104      	bne.n	8002876 <rand+0x22>
 800286c:	2152      	movs	r1, #82	; 0x52
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <rand+0x60>)
 8002870:	4811      	ldr	r0, [pc, #68]	; (80028b8 <rand+0x64>)
 8002872:	f000 f9ad 	bl	8002bd0 <__assert_func>
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <rand+0x68>)
 8002878:	2100      	movs	r1, #0
 800287a:	6003      	str	r3, [r0, #0]
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <rand+0x6c>)
 800287e:	6043      	str	r3, [r0, #4]
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <rand+0x70>)
 8002882:	6083      	str	r3, [r0, #8]
 8002884:	230b      	movs	r3, #11
 8002886:	8183      	strh	r3, [r0, #12]
 8002888:	2001      	movs	r0, #1
 800288a:	6110      	str	r0, [r2, #16]
 800288c:	6151      	str	r1, [r2, #20]
 800288e:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <rand+0x74>)
 8002892:	6920      	ldr	r0, [r4, #16]
 8002894:	6961      	ldr	r1, [r4, #20]
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <rand+0x78>)
 8002898:	f7fd fdb6 	bl	8000408 <__aeabi_lmul>
 800289c:	2201      	movs	r2, #1
 800289e:	2300      	movs	r3, #0
 80028a0:	1880      	adds	r0, r0, r2
 80028a2:	4159      	adcs	r1, r3
 80028a4:	6120      	str	r0, [r4, #16]
 80028a6:	6161      	str	r1, [r4, #20]
 80028a8:	0048      	lsls	r0, r1, #1
 80028aa:	0840      	lsrs	r0, r0, #1
 80028ac:	bd10      	pop	{r4, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	20000064 	.word	0x20000064
 80028b4:	080038e4 	.word	0x080038e4
 80028b8:	080038fb 	.word	0x080038fb
 80028bc:	abcd330e 	.word	0xabcd330e
 80028c0:	e66d1234 	.word	0xe66d1234
 80028c4:	0005deec 	.word	0x0005deec
 80028c8:	4c957f2d 	.word	0x4c957f2d
 80028cc:	5851f42d 	.word	0x5851f42d

080028d0 <std>:
 80028d0:	2300      	movs	r3, #0
 80028d2:	b510      	push	{r4, lr}
 80028d4:	0004      	movs	r4, r0
 80028d6:	6003      	str	r3, [r0, #0]
 80028d8:	6043      	str	r3, [r0, #4]
 80028da:	6083      	str	r3, [r0, #8]
 80028dc:	8181      	strh	r1, [r0, #12]
 80028de:	6643      	str	r3, [r0, #100]	; 0x64
 80028e0:	0019      	movs	r1, r3
 80028e2:	81c2      	strh	r2, [r0, #14]
 80028e4:	6103      	str	r3, [r0, #16]
 80028e6:	6143      	str	r3, [r0, #20]
 80028e8:	6183      	str	r3, [r0, #24]
 80028ea:	2208      	movs	r2, #8
 80028ec:	305c      	adds	r0, #92	; 0x5c
 80028ee:	f000 f8ed 	bl	8002acc <memset>
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <std+0x38>)
 80028f4:	6224      	str	r4, [r4, #32]
 80028f6:	6263      	str	r3, [r4, #36]	; 0x24
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <std+0x3c>)
 80028fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <std+0x40>)
 80028fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <std+0x44>)
 8002902:	6323      	str	r3, [r4, #48]	; 0x30
 8002904:	bd10      	pop	{r4, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	08002a35 	.word	0x08002a35
 800290c:	08002a5d 	.word	0x08002a5d
 8002910:	08002a95 	.word	0x08002a95
 8002914:	08002ac1 	.word	0x08002ac1

08002918 <stdio_exit_handler>:
 8002918:	b510      	push	{r4, lr}
 800291a:	4a03      	ldr	r2, [pc, #12]	; (8002928 <stdio_exit_handler+0x10>)
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <stdio_exit_handler+0x14>)
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <stdio_exit_handler+0x18>)
 8002920:	f000 f86c 	bl	80029fc <_fwalk_sglue>
 8002924:	bd10      	pop	{r4, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	2000000c 	.word	0x2000000c
 800292c:	08002f31 	.word	0x08002f31
 8002930:	20000018 	.word	0x20000018

08002934 <cleanup_stdio>:
 8002934:	6841      	ldr	r1, [r0, #4]
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <cleanup_stdio+0x30>)
 8002938:	b510      	push	{r4, lr}
 800293a:	0004      	movs	r4, r0
 800293c:	4299      	cmp	r1, r3
 800293e:	d001      	beq.n	8002944 <cleanup_stdio+0x10>
 8002940:	f000 faf6 	bl	8002f30 <_fflush_r>
 8002944:	68a1      	ldr	r1, [r4, #8]
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <cleanup_stdio+0x34>)
 8002948:	4299      	cmp	r1, r3
 800294a:	d002      	beq.n	8002952 <cleanup_stdio+0x1e>
 800294c:	0020      	movs	r0, r4
 800294e:	f000 faef 	bl	8002f30 <_fflush_r>
 8002952:	68e1      	ldr	r1, [r4, #12]
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <cleanup_stdio+0x38>)
 8002956:	4299      	cmp	r1, r3
 8002958:	d002      	beq.n	8002960 <cleanup_stdio+0x2c>
 800295a:	0020      	movs	r0, r4
 800295c:	f000 fae8 	bl	8002f30 <_fflush_r>
 8002960:	bd10      	pop	{r4, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000150 	.word	0x20000150
 8002968:	200001b8 	.word	0x200001b8
 800296c:	20000220 	.word	0x20000220

08002970 <global_stdio_init.part.0>:
 8002970:	b510      	push	{r4, lr}
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <global_stdio_init.part.0+0x28>)
 8002974:	4a09      	ldr	r2, [pc, #36]	; (800299c <global_stdio_init.part.0+0x2c>)
 8002976:	2104      	movs	r1, #4
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	4809      	ldr	r0, [pc, #36]	; (80029a0 <global_stdio_init.part.0+0x30>)
 800297c:	2200      	movs	r2, #0
 800297e:	f7ff ffa7 	bl	80028d0 <std>
 8002982:	2201      	movs	r2, #1
 8002984:	2109      	movs	r1, #9
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <global_stdio_init.part.0+0x34>)
 8002988:	f7ff ffa2 	bl	80028d0 <std>
 800298c:	2202      	movs	r2, #2
 800298e:	2112      	movs	r1, #18
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <global_stdio_init.part.0+0x38>)
 8002992:	f7ff ff9d 	bl	80028d0 <std>
 8002996:	bd10      	pop	{r4, pc}
 8002998:	20000288 	.word	0x20000288
 800299c:	08002919 	.word	0x08002919
 80029a0:	20000150 	.word	0x20000150
 80029a4:	200001b8 	.word	0x200001b8
 80029a8:	20000220 	.word	0x20000220

080029ac <__sfp_lock_acquire>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	4802      	ldr	r0, [pc, #8]	; (80029b8 <__sfp_lock_acquire+0xc>)
 80029b0:	f000 f90c 	bl	8002bcc <__retarget_lock_acquire_recursive>
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	20000291 	.word	0x20000291

080029bc <__sfp_lock_release>:
 80029bc:	b510      	push	{r4, lr}
 80029be:	4802      	ldr	r0, [pc, #8]	; (80029c8 <__sfp_lock_release+0xc>)
 80029c0:	f000 f905 	bl	8002bce <__retarget_lock_release_recursive>
 80029c4:	bd10      	pop	{r4, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	20000291 	.word	0x20000291

080029cc <__sinit>:
 80029cc:	b510      	push	{r4, lr}
 80029ce:	0004      	movs	r4, r0
 80029d0:	f7ff ffec 	bl	80029ac <__sfp_lock_acquire>
 80029d4:	6a23      	ldr	r3, [r4, #32]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <__sinit+0x14>
 80029da:	f7ff ffef 	bl	80029bc <__sfp_lock_release>
 80029de:	bd10      	pop	{r4, pc}
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__sinit+0x28>)
 80029e2:	6223      	str	r3, [r4, #32]
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <__sinit+0x2c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f6      	bne.n	80029da <__sinit+0xe>
 80029ec:	f7ff ffc0 	bl	8002970 <global_stdio_init.part.0>
 80029f0:	e7f3      	b.n	80029da <__sinit+0xe>
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	08002935 	.word	0x08002935
 80029f8:	20000288 	.word	0x20000288

080029fc <_fwalk_sglue>:
 80029fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029fe:	0014      	movs	r4, r2
 8002a00:	2600      	movs	r6, #0
 8002a02:	9000      	str	r0, [sp, #0]
 8002a04:	9101      	str	r1, [sp, #4]
 8002a06:	68a5      	ldr	r5, [r4, #8]
 8002a08:	6867      	ldr	r7, [r4, #4]
 8002a0a:	3f01      	subs	r7, #1
 8002a0c:	d504      	bpl.n	8002a18 <_fwalk_sglue+0x1c>
 8002a0e:	6824      	ldr	r4, [r4, #0]
 8002a10:	2c00      	cmp	r4, #0
 8002a12:	d1f8      	bne.n	8002a06 <_fwalk_sglue+0xa>
 8002a14:	0030      	movs	r0, r6
 8002a16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a18:	89ab      	ldrh	r3, [r5, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d908      	bls.n	8002a30 <_fwalk_sglue+0x34>
 8002a1e:	220e      	movs	r2, #14
 8002a20:	5eab      	ldrsh	r3, [r5, r2]
 8002a22:	3301      	adds	r3, #1
 8002a24:	d004      	beq.n	8002a30 <_fwalk_sglue+0x34>
 8002a26:	0029      	movs	r1, r5
 8002a28:	9800      	ldr	r0, [sp, #0]
 8002a2a:	9b01      	ldr	r3, [sp, #4]
 8002a2c:	4798      	blx	r3
 8002a2e:	4306      	orrs	r6, r0
 8002a30:	3568      	adds	r5, #104	; 0x68
 8002a32:	e7ea      	b.n	8002a0a <_fwalk_sglue+0xe>

08002a34 <__sread>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	000c      	movs	r4, r1
 8002a38:	250e      	movs	r5, #14
 8002a3a:	5f49      	ldrsh	r1, [r1, r5]
 8002a3c:	f000 f874 	bl	8002b28 <_read_r>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	db03      	blt.n	8002a4c <__sread+0x18>
 8002a44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a46:	181b      	adds	r3, r3, r0
 8002a48:	6563      	str	r3, [r4, #84]	; 0x54
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
 8002a4c:	89a3      	ldrh	r3, [r4, #12]
 8002a4e:	4a02      	ldr	r2, [pc, #8]	; (8002a58 <__sread+0x24>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	e7f9      	b.n	8002a4a <__sread+0x16>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	ffffefff 	.word	0xffffefff

08002a5c <__swrite>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	001f      	movs	r7, r3
 8002a60:	898b      	ldrh	r3, [r1, #12]
 8002a62:	0005      	movs	r5, r0
 8002a64:	000c      	movs	r4, r1
 8002a66:	0016      	movs	r6, r2
 8002a68:	05db      	lsls	r3, r3, #23
 8002a6a:	d505      	bpl.n	8002a78 <__swrite+0x1c>
 8002a6c:	230e      	movs	r3, #14
 8002a6e:	5ec9      	ldrsh	r1, [r1, r3]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2302      	movs	r3, #2
 8002a74:	f000 f844 	bl	8002b00 <_lseek_r>
 8002a78:	89a3      	ldrh	r3, [r4, #12]
 8002a7a:	4a05      	ldr	r2, [pc, #20]	; (8002a90 <__swrite+0x34>)
 8002a7c:	0028      	movs	r0, r5
 8002a7e:	4013      	ands	r3, r2
 8002a80:	81a3      	strh	r3, [r4, #12]
 8002a82:	0032      	movs	r2, r6
 8002a84:	230e      	movs	r3, #14
 8002a86:	5ee1      	ldrsh	r1, [r4, r3]
 8002a88:	003b      	movs	r3, r7
 8002a8a:	f000 f861 	bl	8002b50 <_write_r>
 8002a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a90:	ffffefff 	.word	0xffffefff

08002a94 <__sseek>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	000c      	movs	r4, r1
 8002a98:	250e      	movs	r5, #14
 8002a9a:	5f49      	ldrsh	r1, [r1, r5]
 8002a9c:	f000 f830 	bl	8002b00 <_lseek_r>
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	1c42      	adds	r2, r0, #1
 8002aa4:	d103      	bne.n	8002aae <__sseek+0x1a>
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <__sseek+0x28>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	81a3      	strh	r3, [r4, #12]
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	0152      	lsls	r2, r2, #5
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	81a3      	strh	r3, [r4, #12]
 8002ab6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ab8:	e7f8      	b.n	8002aac <__sseek+0x18>
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	ffffefff 	.word	0xffffefff

08002ac0 <__sclose>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	230e      	movs	r3, #14
 8002ac4:	5ec9      	ldrsh	r1, [r1, r3]
 8002ac6:	f000 f809 	bl	8002adc <_close_r>
 8002aca:	bd10      	pop	{r4, pc}

08002acc <memset>:
 8002acc:	0003      	movs	r3, r0
 8002ace:	1882      	adds	r2, r0, r2
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <memset+0xa>
 8002ad4:	4770      	bx	lr
 8002ad6:	7019      	strb	r1, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	e7f9      	b.n	8002ad0 <memset+0x4>

08002adc <_close_r>:
 8002adc:	2300      	movs	r3, #0
 8002ade:	b570      	push	{r4, r5, r6, lr}
 8002ae0:	4d06      	ldr	r5, [pc, #24]	; (8002afc <_close_r+0x20>)
 8002ae2:	0004      	movs	r4, r0
 8002ae4:	0008      	movs	r0, r1
 8002ae6:	602b      	str	r3, [r5, #0]
 8002ae8:	f7fe f84b 	bl	8000b82 <_close>
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d103      	bne.n	8002af8 <_close_r+0x1c>
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d000      	beq.n	8002af8 <_close_r+0x1c>
 8002af6:	6023      	str	r3, [r4, #0]
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	2000028c 	.word	0x2000028c

08002b00 <_lseek_r>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	0004      	movs	r4, r0
 8002b04:	0008      	movs	r0, r1
 8002b06:	0011      	movs	r1, r2
 8002b08:	001a      	movs	r2, r3
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	4d05      	ldr	r5, [pc, #20]	; (8002b24 <_lseek_r+0x24>)
 8002b0e:	602b      	str	r3, [r5, #0]
 8002b10:	f7fe f858 	bl	8000bc4 <_lseek>
 8002b14:	1c43      	adds	r3, r0, #1
 8002b16:	d103      	bne.n	8002b20 <_lseek_r+0x20>
 8002b18:	682b      	ldr	r3, [r5, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d000      	beq.n	8002b20 <_lseek_r+0x20>
 8002b1e:	6023      	str	r3, [r4, #0]
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	2000028c 	.word	0x2000028c

08002b28 <_read_r>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	0004      	movs	r4, r0
 8002b2c:	0008      	movs	r0, r1
 8002b2e:	0011      	movs	r1, r2
 8002b30:	001a      	movs	r2, r3
 8002b32:	2300      	movs	r3, #0
 8002b34:	4d05      	ldr	r5, [pc, #20]	; (8002b4c <_read_r+0x24>)
 8002b36:	602b      	str	r3, [r5, #0]
 8002b38:	f7fd ffea 	bl	8000b10 <_read>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d103      	bne.n	8002b48 <_read_r+0x20>
 8002b40:	682b      	ldr	r3, [r5, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d000      	beq.n	8002b48 <_read_r+0x20>
 8002b46:	6023      	str	r3, [r4, #0]
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	2000028c 	.word	0x2000028c

08002b50 <_write_r>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	0004      	movs	r4, r0
 8002b54:	0008      	movs	r0, r1
 8002b56:	0011      	movs	r1, r2
 8002b58:	001a      	movs	r2, r3
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4d05      	ldr	r5, [pc, #20]	; (8002b74 <_write_r+0x24>)
 8002b5e:	602b      	str	r3, [r5, #0]
 8002b60:	f7fd fff3 	bl	8000b4a <_write>
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d103      	bne.n	8002b70 <_write_r+0x20>
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d000      	beq.n	8002b70 <_write_r+0x20>
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	2000028c 	.word	0x2000028c

08002b78 <__errno>:
 8002b78:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <__errno+0x8>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	4770      	bx	lr
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	20000064 	.word	0x20000064

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	2600      	movs	r6, #0
 8002b88:	4c0c      	ldr	r4, [pc, #48]	; (8002bbc <__libc_init_array+0x38>)
 8002b8a:	4d0d      	ldr	r5, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8c:	1b64      	subs	r4, r4, r5
 8002b8e:	10a4      	asrs	r4, r4, #2
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	2600      	movs	r6, #0
 8002b96:	f000 fe69 	bl	800386c <_init>
 8002b9a:	4c0a      	ldr	r4, [pc, #40]	; (8002bc4 <__libc_init_array+0x40>)
 8002b9c:	4d0a      	ldr	r5, [pc, #40]	; (8002bc8 <__libc_init_array+0x44>)
 8002b9e:	1b64      	subs	r4, r4, r5
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	00b3      	lsls	r3, r6, #2
 8002baa:	58eb      	ldr	r3, [r5, r3]
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	00b3      	lsls	r3, r6, #2
 8002bb4:	58eb      	ldr	r3, [r5, r3]
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	080039c4 	.word	0x080039c4
 8002bc0:	080039c4 	.word	0x080039c4
 8002bc4:	080039c8 	.word	0x080039c8
 8002bc8:	080039c4 	.word	0x080039c4

08002bcc <__retarget_lock_acquire_recursive>:
 8002bcc:	4770      	bx	lr

08002bce <__retarget_lock_release_recursive>:
 8002bce:	4770      	bx	lr

08002bd0 <__assert_func>:
 8002bd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002bd2:	0014      	movs	r4, r2
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <__assert_func+0x2c>)
 8002bd8:	0005      	movs	r5, r0
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	000e      	movs	r6, r1
 8002bde:	68d8      	ldr	r0, [r3, #12]
 8002be0:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <__assert_func+0x30>)
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d101      	bne.n	8002bea <__assert_func+0x1a>
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <__assert_func+0x34>)
 8002be8:	001c      	movs	r4, r3
 8002bea:	4907      	ldr	r1, [pc, #28]	; (8002c08 <__assert_func+0x38>)
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	9402      	str	r4, [sp, #8]
 8002bf0:	002b      	movs	r3, r5
 8002bf2:	9600      	str	r6, [sp, #0]
 8002bf4:	f000 f9c8 	bl	8002f88 <fiprintf>
 8002bf8:	f000 f9e8 	bl	8002fcc <abort>
 8002bfc:	20000064 	.word	0x20000064
 8002c00:	08003953 	.word	0x08003953
 8002c04:	0800398e 	.word	0x0800398e
 8002c08:	08003960 	.word	0x08003960

08002c0c <_free_r>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	0005      	movs	r5, r0
 8002c10:	2900      	cmp	r1, #0
 8002c12:	d010      	beq.n	8002c36 <_free_r+0x2a>
 8002c14:	1f0c      	subs	r4, r1, #4
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da00      	bge.n	8002c1e <_free_r+0x12>
 8002c1c:	18e4      	adds	r4, r4, r3
 8002c1e:	0028      	movs	r0, r5
 8002c20:	f000 f8ec 	bl	8002dfc <__malloc_lock>
 8002c24:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <_free_r+0x90>)
 8002c26:	6813      	ldr	r3, [r2, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <_free_r+0x2c>
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	6014      	str	r4, [r2, #0]
 8002c30:	0028      	movs	r0, r5
 8002c32:	f000 f8eb 	bl	8002e0c <__malloc_unlock>
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	d908      	bls.n	8002c4e <_free_r+0x42>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	1821      	adds	r1, r4, r0
 8002c40:	428b      	cmp	r3, r1
 8002c42:	d1f3      	bne.n	8002c2c <_free_r+0x20>
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	1809      	adds	r1, r1, r0
 8002c4a:	6021      	str	r1, [r4, #0]
 8002c4c:	e7ee      	b.n	8002c2c <_free_r+0x20>
 8002c4e:	001a      	movs	r2, r3
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <_free_r+0x4e>
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	d9f9      	bls.n	8002c4e <_free_r+0x42>
 8002c5a:	6811      	ldr	r1, [r2, #0]
 8002c5c:	1850      	adds	r0, r2, r1
 8002c5e:	42a0      	cmp	r0, r4
 8002c60:	d10b      	bne.n	8002c7a <_free_r+0x6e>
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	1809      	adds	r1, r1, r0
 8002c66:	1850      	adds	r0, r2, r1
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	4283      	cmp	r3, r0
 8002c6c:	d1e0      	bne.n	8002c30 <_free_r+0x24>
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	1841      	adds	r1, r0, r1
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	6053      	str	r3, [r2, #4]
 8002c78:	e7da      	b.n	8002c30 <_free_r+0x24>
 8002c7a:	42a0      	cmp	r0, r4
 8002c7c:	d902      	bls.n	8002c84 <_free_r+0x78>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	602b      	str	r3, [r5, #0]
 8002c82:	e7d5      	b.n	8002c30 <_free_r+0x24>
 8002c84:	6820      	ldr	r0, [r4, #0]
 8002c86:	1821      	adds	r1, r4, r0
 8002c88:	428b      	cmp	r3, r1
 8002c8a:	d103      	bne.n	8002c94 <_free_r+0x88>
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	1809      	adds	r1, r1, r0
 8002c92:	6021      	str	r1, [r4, #0]
 8002c94:	6063      	str	r3, [r4, #4]
 8002c96:	6054      	str	r4, [r2, #4]
 8002c98:	e7ca      	b.n	8002c30 <_free_r+0x24>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	20000294 	.word	0x20000294

08002ca0 <malloc>:
 8002ca0:	b510      	push	{r4, lr}
 8002ca2:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <malloc+0x10>)
 8002ca4:	0001      	movs	r1, r0
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	f000 f826 	bl	8002cf8 <_malloc_r>
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000064 	.word	0x20000064

08002cb4 <sbrk_aligned>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	4e0f      	ldr	r6, [pc, #60]	; (8002cf4 <sbrk_aligned+0x40>)
 8002cb8:	000d      	movs	r5, r1
 8002cba:	6831      	ldr	r1, [r6, #0]
 8002cbc:	0004      	movs	r4, r0
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	d102      	bne.n	8002cc8 <sbrk_aligned+0x14>
 8002cc2:	f000 f971 	bl	8002fa8 <_sbrk_r>
 8002cc6:	6030      	str	r0, [r6, #0]
 8002cc8:	0029      	movs	r1, r5
 8002cca:	0020      	movs	r0, r4
 8002ccc:	f000 f96c 	bl	8002fa8 <_sbrk_r>
 8002cd0:	1c43      	adds	r3, r0, #1
 8002cd2:	d00a      	beq.n	8002cea <sbrk_aligned+0x36>
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	1cc5      	adds	r5, r0, #3
 8002cd8:	439d      	bics	r5, r3
 8002cda:	42a8      	cmp	r0, r5
 8002cdc:	d007      	beq.n	8002cee <sbrk_aligned+0x3a>
 8002cde:	1a29      	subs	r1, r5, r0
 8002ce0:	0020      	movs	r0, r4
 8002ce2:	f000 f961 	bl	8002fa8 <_sbrk_r>
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	d101      	bne.n	8002cee <sbrk_aligned+0x3a>
 8002cea:	2501      	movs	r5, #1
 8002cec:	426d      	negs	r5, r5
 8002cee:	0028      	movs	r0, r5
 8002cf0:	bd70      	pop	{r4, r5, r6, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20000298 	.word	0x20000298

08002cf8 <_malloc_r>:
 8002cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	1ccb      	adds	r3, r1, #3
 8002cfe:	4393      	bics	r3, r2
 8002d00:	3308      	adds	r3, #8
 8002d02:	0006      	movs	r6, r0
 8002d04:	001f      	movs	r7, r3
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d238      	bcs.n	8002d7c <_malloc_r+0x84>
 8002d0a:	270c      	movs	r7, #12
 8002d0c:	42b9      	cmp	r1, r7
 8002d0e:	d837      	bhi.n	8002d80 <_malloc_r+0x88>
 8002d10:	0030      	movs	r0, r6
 8002d12:	f000 f873 	bl	8002dfc <__malloc_lock>
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <_malloc_r+0x100>)
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	001c      	movs	r4, r3
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	d133      	bne.n	8002d8a <_malloc_r+0x92>
 8002d22:	0039      	movs	r1, r7
 8002d24:	0030      	movs	r0, r6
 8002d26:	f7ff ffc5 	bl	8002cb4 <sbrk_aligned>
 8002d2a:	0004      	movs	r4, r0
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d15e      	bne.n	8002dee <_malloc_r+0xf6>
 8002d30:	9b00      	ldr	r3, [sp, #0]
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	0025      	movs	r5, r4
 8002d36:	2d00      	cmp	r5, #0
 8002d38:	d14e      	bne.n	8002dd8 <_malloc_r+0xe0>
 8002d3a:	2c00      	cmp	r4, #0
 8002d3c:	d051      	beq.n	8002de2 <_malloc_r+0xea>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	0029      	movs	r1, r5
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	0030      	movs	r0, r6
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	f000 f92e 	bl	8002fa8 <_sbrk_r>
 8002d4c:	9b01      	ldr	r3, [sp, #4]
 8002d4e:	4283      	cmp	r3, r0
 8002d50:	d147      	bne.n	8002de2 <_malloc_r+0xea>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	0030      	movs	r0, r6
 8002d56:	1aff      	subs	r7, r7, r3
 8002d58:	0039      	movs	r1, r7
 8002d5a:	f7ff ffab 	bl	8002cb4 <sbrk_aligned>
 8002d5e:	3001      	adds	r0, #1
 8002d60:	d03f      	beq.n	8002de2 <_malloc_r+0xea>
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	19db      	adds	r3, r3, r7
 8002d66:	6023      	str	r3, [r4, #0]
 8002d68:	9b00      	ldr	r3, [sp, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d040      	beq.n	8002df2 <_malloc_r+0xfa>
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	42a2      	cmp	r2, r4
 8002d74:	d133      	bne.n	8002dde <_malloc_r+0xe6>
 8002d76:	2200      	movs	r2, #0
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e014      	b.n	8002da6 <_malloc_r+0xae>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dac5      	bge.n	8002d0c <_malloc_r+0x14>
 8002d80:	230c      	movs	r3, #12
 8002d82:	2500      	movs	r5, #0
 8002d84:	6033      	str	r3, [r6, #0]
 8002d86:	0028      	movs	r0, r5
 8002d88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d8a:	6821      	ldr	r1, [r4, #0]
 8002d8c:	1bc9      	subs	r1, r1, r7
 8002d8e:	d420      	bmi.n	8002dd2 <_malloc_r+0xda>
 8002d90:	290b      	cmp	r1, #11
 8002d92:	d918      	bls.n	8002dc6 <_malloc_r+0xce>
 8002d94:	19e2      	adds	r2, r4, r7
 8002d96:	6027      	str	r7, [r4, #0]
 8002d98:	42a3      	cmp	r3, r4
 8002d9a:	d112      	bne.n	8002dc2 <_malloc_r+0xca>
 8002d9c:	9b00      	ldr	r3, [sp, #0]
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	6863      	ldr	r3, [r4, #4]
 8002da2:	6011      	str	r1, [r2, #0]
 8002da4:	6053      	str	r3, [r2, #4]
 8002da6:	0030      	movs	r0, r6
 8002da8:	0025      	movs	r5, r4
 8002daa:	f000 f82f 	bl	8002e0c <__malloc_unlock>
 8002dae:	2207      	movs	r2, #7
 8002db0:	350b      	adds	r5, #11
 8002db2:	1d23      	adds	r3, r4, #4
 8002db4:	4395      	bics	r5, r2
 8002db6:	1aea      	subs	r2, r5, r3
 8002db8:	429d      	cmp	r5, r3
 8002dba:	d0e4      	beq.n	8002d86 <_malloc_r+0x8e>
 8002dbc:	1b5b      	subs	r3, r3, r5
 8002dbe:	50a3      	str	r3, [r4, r2]
 8002dc0:	e7e1      	b.n	8002d86 <_malloc_r+0x8e>
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	e7ec      	b.n	8002da0 <_malloc_r+0xa8>
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d1d5      	bne.n	8002d78 <_malloc_r+0x80>
 8002dcc:	9b00      	ldr	r3, [sp, #0]
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e7e9      	b.n	8002da6 <_malloc_r+0xae>
 8002dd2:	0023      	movs	r3, r4
 8002dd4:	6864      	ldr	r4, [r4, #4]
 8002dd6:	e7a2      	b.n	8002d1e <_malloc_r+0x26>
 8002dd8:	002c      	movs	r4, r5
 8002dda:	686d      	ldr	r5, [r5, #4]
 8002ddc:	e7ab      	b.n	8002d36 <_malloc_r+0x3e>
 8002dde:	0013      	movs	r3, r2
 8002de0:	e7c4      	b.n	8002d6c <_malloc_r+0x74>
 8002de2:	230c      	movs	r3, #12
 8002de4:	0030      	movs	r0, r6
 8002de6:	6033      	str	r3, [r6, #0]
 8002de8:	f000 f810 	bl	8002e0c <__malloc_unlock>
 8002dec:	e7cb      	b.n	8002d86 <_malloc_r+0x8e>
 8002dee:	6027      	str	r7, [r4, #0]
 8002df0:	e7d9      	b.n	8002da6 <_malloc_r+0xae>
 8002df2:	605b      	str	r3, [r3, #4]
 8002df4:	deff      	udf	#255	; 0xff
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000294 	.word	0x20000294

08002dfc <__malloc_lock>:
 8002dfc:	b510      	push	{r4, lr}
 8002dfe:	4802      	ldr	r0, [pc, #8]	; (8002e08 <__malloc_lock+0xc>)
 8002e00:	f7ff fee4 	bl	8002bcc <__retarget_lock_acquire_recursive>
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000290 	.word	0x20000290

08002e0c <__malloc_unlock>:
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <__malloc_unlock+0xc>)
 8002e10:	f7ff fedd 	bl	8002bce <__retarget_lock_release_recursive>
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	20000290 	.word	0x20000290

08002e1c <__sflush_r>:
 8002e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e1e:	898b      	ldrh	r3, [r1, #12]
 8002e20:	0005      	movs	r5, r0
 8002e22:	000c      	movs	r4, r1
 8002e24:	071a      	lsls	r2, r3, #28
 8002e26:	d45c      	bmi.n	8002ee2 <__sflush_r+0xc6>
 8002e28:	684a      	ldr	r2, [r1, #4]
 8002e2a:	2a00      	cmp	r2, #0
 8002e2c:	dc04      	bgt.n	8002e38 <__sflush_r+0x1c>
 8002e2e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002e30:	2a00      	cmp	r2, #0
 8002e32:	dc01      	bgt.n	8002e38 <__sflush_r+0x1c>
 8002e34:	2000      	movs	r0, #0
 8002e36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e38:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d0fa      	beq.n	8002e34 <__sflush_r+0x18>
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2080      	movs	r0, #128	; 0x80
 8002e42:	682e      	ldr	r6, [r5, #0]
 8002e44:	602a      	str	r2, [r5, #0]
 8002e46:	001a      	movs	r2, r3
 8002e48:	0140      	lsls	r0, r0, #5
 8002e4a:	6a21      	ldr	r1, [r4, #32]
 8002e4c:	4002      	ands	r2, r0
 8002e4e:	4203      	tst	r3, r0
 8002e50:	d034      	beq.n	8002ebc <__sflush_r+0xa0>
 8002e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	075b      	lsls	r3, r3, #29
 8002e58:	d506      	bpl.n	8002e68 <__sflush_r+0x4c>
 8002e5a:	6863      	ldr	r3, [r4, #4]
 8002e5c:	1ac0      	subs	r0, r0, r3
 8002e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <__sflush_r+0x4c>
 8002e64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e66:	1ac0      	subs	r0, r0, r3
 8002e68:	0002      	movs	r2, r0
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	0028      	movs	r0, r5
 8002e6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002e70:	6a21      	ldr	r1, [r4, #32]
 8002e72:	47b8      	blx	r7
 8002e74:	89a2      	ldrh	r2, [r4, #12]
 8002e76:	1c43      	adds	r3, r0, #1
 8002e78:	d106      	bne.n	8002e88 <__sflush_r+0x6c>
 8002e7a:	6829      	ldr	r1, [r5, #0]
 8002e7c:	291d      	cmp	r1, #29
 8002e7e:	d82c      	bhi.n	8002eda <__sflush_r+0xbe>
 8002e80:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <__sflush_r+0x110>)
 8002e82:	410b      	asrs	r3, r1
 8002e84:	07db      	lsls	r3, r3, #31
 8002e86:	d428      	bmi.n	8002eda <__sflush_r+0xbe>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6063      	str	r3, [r4, #4]
 8002e8c:	6923      	ldr	r3, [r4, #16]
 8002e8e:	6023      	str	r3, [r4, #0]
 8002e90:	04d2      	lsls	r2, r2, #19
 8002e92:	d505      	bpl.n	8002ea0 <__sflush_r+0x84>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d102      	bne.n	8002e9e <__sflush_r+0x82>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d100      	bne.n	8002ea0 <__sflush_r+0x84>
 8002e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8002ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ea2:	602e      	str	r6, [r5, #0]
 8002ea4:	2900      	cmp	r1, #0
 8002ea6:	d0c5      	beq.n	8002e34 <__sflush_r+0x18>
 8002ea8:	0023      	movs	r3, r4
 8002eaa:	3344      	adds	r3, #68	; 0x44
 8002eac:	4299      	cmp	r1, r3
 8002eae:	d002      	beq.n	8002eb6 <__sflush_r+0x9a>
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	f7ff feab 	bl	8002c0c <_free_r>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8002eba:	e7bc      	b.n	8002e36 <__sflush_r+0x1a>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	47b8      	blx	r7
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	d1c6      	bne.n	8002e54 <__sflush_r+0x38>
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0c3      	beq.n	8002e54 <__sflush_r+0x38>
 8002ecc:	2b1d      	cmp	r3, #29
 8002ece:	d001      	beq.n	8002ed4 <__sflush_r+0xb8>
 8002ed0:	2b16      	cmp	r3, #22
 8002ed2:	d101      	bne.n	8002ed8 <__sflush_r+0xbc>
 8002ed4:	602e      	str	r6, [r5, #0]
 8002ed6:	e7ad      	b.n	8002e34 <__sflush_r+0x18>
 8002ed8:	89a2      	ldrh	r2, [r4, #12]
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	4313      	orrs	r3, r2
 8002ede:	81a3      	strh	r3, [r4, #12]
 8002ee0:	e7a9      	b.n	8002e36 <__sflush_r+0x1a>
 8002ee2:	690e      	ldr	r6, [r1, #16]
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	d0a5      	beq.n	8002e34 <__sflush_r+0x18>
 8002ee8:	680f      	ldr	r7, [r1, #0]
 8002eea:	600e      	str	r6, [r1, #0]
 8002eec:	1bba      	subs	r2, r7, r6
 8002eee:	9201      	str	r2, [sp, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	079b      	lsls	r3, r3, #30
 8002ef4:	d100      	bne.n	8002ef8 <__sflush_r+0xdc>
 8002ef6:	694a      	ldr	r2, [r1, #20]
 8002ef8:	60a2      	str	r2, [r4, #8]
 8002efa:	9b01      	ldr	r3, [sp, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	dd99      	ble.n	8002e34 <__sflush_r+0x18>
 8002f00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f02:	0032      	movs	r2, r6
 8002f04:	001f      	movs	r7, r3
 8002f06:	0028      	movs	r0, r5
 8002f08:	9b01      	ldr	r3, [sp, #4]
 8002f0a:	6a21      	ldr	r1, [r4, #32]
 8002f0c:	47b8      	blx	r7
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	dc06      	bgt.n	8002f20 <__sflush_r+0x104>
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	2001      	movs	r0, #1
 8002f16:	89a2      	ldrh	r2, [r4, #12]
 8002f18:	4240      	negs	r0, r0
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	81a3      	strh	r3, [r4, #12]
 8002f1e:	e78a      	b.n	8002e36 <__sflush_r+0x1a>
 8002f20:	9b01      	ldr	r3, [sp, #4]
 8002f22:	1836      	adds	r6, r6, r0
 8002f24:	1a1b      	subs	r3, r3, r0
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	e7e7      	b.n	8002efa <__sflush_r+0xde>
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	dfbffffe 	.word	0xdfbffffe

08002f30 <_fflush_r>:
 8002f30:	690b      	ldr	r3, [r1, #16]
 8002f32:	b570      	push	{r4, r5, r6, lr}
 8002f34:	0005      	movs	r5, r0
 8002f36:	000c      	movs	r4, r1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <_fflush_r+0x12>
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	0028      	movs	r0, r5
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d004      	beq.n	8002f50 <_fflush_r+0x20>
 8002f46:	6a03      	ldr	r3, [r0, #32]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <_fflush_r+0x20>
 8002f4c:	f7ff fd3e 	bl	80029cc <__sinit>
 8002f50:	220c      	movs	r2, #12
 8002f52:	5ea3      	ldrsh	r3, [r4, r2]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f1      	beq.n	8002f3c <_fflush_r+0xc>
 8002f58:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f5a:	07d2      	lsls	r2, r2, #31
 8002f5c:	d404      	bmi.n	8002f68 <_fflush_r+0x38>
 8002f5e:	059b      	lsls	r3, r3, #22
 8002f60:	d402      	bmi.n	8002f68 <_fflush_r+0x38>
 8002f62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f64:	f7ff fe32 	bl	8002bcc <__retarget_lock_acquire_recursive>
 8002f68:	0028      	movs	r0, r5
 8002f6a:	0021      	movs	r1, r4
 8002f6c:	f7ff ff56 	bl	8002e1c <__sflush_r>
 8002f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f72:	0005      	movs	r5, r0
 8002f74:	07db      	lsls	r3, r3, #31
 8002f76:	d4e2      	bmi.n	8002f3e <_fflush_r+0xe>
 8002f78:	89a3      	ldrh	r3, [r4, #12]
 8002f7a:	059b      	lsls	r3, r3, #22
 8002f7c:	d4df      	bmi.n	8002f3e <_fflush_r+0xe>
 8002f7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f80:	f7ff fe25 	bl	8002bce <__retarget_lock_release_recursive>
 8002f84:	e7db      	b.n	8002f3e <_fflush_r+0xe>
	...

08002f88 <fiprintf>:
 8002f88:	b40e      	push	{r1, r2, r3}
 8002f8a:	b517      	push	{r0, r1, r2, r4, lr}
 8002f8c:	4c05      	ldr	r4, [pc, #20]	; (8002fa4 <fiprintf+0x1c>)
 8002f8e:	ab05      	add	r3, sp, #20
 8002f90:	cb04      	ldmia	r3!, {r2}
 8002f92:	0001      	movs	r1, r0
 8002f94:	6820      	ldr	r0, [r4, #0]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	f000 f846 	bl	8003028 <_vfiprintf_r>
 8002f9c:	bc1e      	pop	{r1, r2, r3, r4}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	b003      	add	sp, #12
 8002fa2:	4718      	bx	r3
 8002fa4:	20000064 	.word	0x20000064

08002fa8 <_sbrk_r>:
 8002fa8:	2300      	movs	r3, #0
 8002faa:	b570      	push	{r4, r5, r6, lr}
 8002fac:	4d06      	ldr	r5, [pc, #24]	; (8002fc8 <_sbrk_r+0x20>)
 8002fae:	0004      	movs	r4, r0
 8002fb0:	0008      	movs	r0, r1
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	f7fd fe12 	bl	8000bdc <_sbrk>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d103      	bne.n	8002fc4 <_sbrk_r+0x1c>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d000      	beq.n	8002fc4 <_sbrk_r+0x1c>
 8002fc2:	6023      	str	r3, [r4, #0]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	2000028c 	.word	0x2000028c

08002fcc <abort>:
 8002fcc:	2006      	movs	r0, #6
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	f000 fb96 	bl	8003700 <raise>
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7fd fd8f 	bl	8000af8 <_exit>

08002fda <__sfputc_r>:
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	6093      	str	r3, [r2, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da04      	bge.n	8002ff0 <__sfputc_r+0x16>
 8002fe6:	6994      	ldr	r4, [r2, #24]
 8002fe8:	42a3      	cmp	r3, r4
 8002fea:	db07      	blt.n	8002ffc <__sfputc_r+0x22>
 8002fec:	290a      	cmp	r1, #10
 8002fee:	d005      	beq.n	8002ffc <__sfputc_r+0x22>
 8002ff0:	6813      	ldr	r3, [r2, #0]
 8002ff2:	1c58      	adds	r0, r3, #1
 8002ff4:	6010      	str	r0, [r2, #0]
 8002ff6:	7019      	strb	r1, [r3, #0]
 8002ff8:	0008      	movs	r0, r1
 8002ffa:	bd10      	pop	{r4, pc}
 8002ffc:	f000 fab0 	bl	8003560 <__swbuf_r>
 8003000:	0001      	movs	r1, r0
 8003002:	e7f9      	b.n	8002ff8 <__sfputc_r+0x1e>

08003004 <__sfputs_r>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	0006      	movs	r6, r0
 8003008:	000f      	movs	r7, r1
 800300a:	0014      	movs	r4, r2
 800300c:	18d5      	adds	r5, r2, r3
 800300e:	42ac      	cmp	r4, r5
 8003010:	d101      	bne.n	8003016 <__sfputs_r+0x12>
 8003012:	2000      	movs	r0, #0
 8003014:	e007      	b.n	8003026 <__sfputs_r+0x22>
 8003016:	7821      	ldrb	r1, [r4, #0]
 8003018:	003a      	movs	r2, r7
 800301a:	0030      	movs	r0, r6
 800301c:	f7ff ffdd 	bl	8002fda <__sfputc_r>
 8003020:	3401      	adds	r4, #1
 8003022:	1c43      	adds	r3, r0, #1
 8003024:	d1f3      	bne.n	800300e <__sfputs_r+0xa>
 8003026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003028 <_vfiprintf_r>:
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	b0a1      	sub	sp, #132	; 0x84
 800302c:	000f      	movs	r7, r1
 800302e:	0015      	movs	r5, r2
 8003030:	001e      	movs	r6, r3
 8003032:	9003      	str	r0, [sp, #12]
 8003034:	2800      	cmp	r0, #0
 8003036:	d004      	beq.n	8003042 <_vfiprintf_r+0x1a>
 8003038:	6a03      	ldr	r3, [r0, #32]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <_vfiprintf_r+0x1a>
 800303e:	f7ff fcc5 	bl	80029cc <__sinit>
 8003042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003044:	07db      	lsls	r3, r3, #31
 8003046:	d405      	bmi.n	8003054 <_vfiprintf_r+0x2c>
 8003048:	89bb      	ldrh	r3, [r7, #12]
 800304a:	059b      	lsls	r3, r3, #22
 800304c:	d402      	bmi.n	8003054 <_vfiprintf_r+0x2c>
 800304e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003050:	f7ff fdbc 	bl	8002bcc <__retarget_lock_acquire_recursive>
 8003054:	89bb      	ldrh	r3, [r7, #12]
 8003056:	071b      	lsls	r3, r3, #28
 8003058:	d502      	bpl.n	8003060 <_vfiprintf_r+0x38>
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d113      	bne.n	8003088 <_vfiprintf_r+0x60>
 8003060:	0039      	movs	r1, r7
 8003062:	9803      	ldr	r0, [sp, #12]
 8003064:	f000 fabe 	bl	80035e4 <__swsetup_r>
 8003068:	2800      	cmp	r0, #0
 800306a:	d00d      	beq.n	8003088 <_vfiprintf_r+0x60>
 800306c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800306e:	07db      	lsls	r3, r3, #31
 8003070:	d503      	bpl.n	800307a <_vfiprintf_r+0x52>
 8003072:	2001      	movs	r0, #1
 8003074:	4240      	negs	r0, r0
 8003076:	b021      	add	sp, #132	; 0x84
 8003078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307a:	89bb      	ldrh	r3, [r7, #12]
 800307c:	059b      	lsls	r3, r3, #22
 800307e:	d4f8      	bmi.n	8003072 <_vfiprintf_r+0x4a>
 8003080:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003082:	f7ff fda4 	bl	8002bce <__retarget_lock_release_recursive>
 8003086:	e7f4      	b.n	8003072 <_vfiprintf_r+0x4a>
 8003088:	2300      	movs	r3, #0
 800308a:	ac08      	add	r4, sp, #32
 800308c:	6163      	str	r3, [r4, #20]
 800308e:	3320      	adds	r3, #32
 8003090:	7663      	strb	r3, [r4, #25]
 8003092:	3310      	adds	r3, #16
 8003094:	76a3      	strb	r3, [r4, #26]
 8003096:	9607      	str	r6, [sp, #28]
 8003098:	002e      	movs	r6, r5
 800309a:	7833      	ldrb	r3, [r6, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <_vfiprintf_r+0x7c>
 80030a0:	2b25      	cmp	r3, #37	; 0x25
 80030a2:	d148      	bne.n	8003136 <_vfiprintf_r+0x10e>
 80030a4:	1b73      	subs	r3, r6, r5
 80030a6:	9305      	str	r3, [sp, #20]
 80030a8:	42ae      	cmp	r6, r5
 80030aa:	d00b      	beq.n	80030c4 <_vfiprintf_r+0x9c>
 80030ac:	002a      	movs	r2, r5
 80030ae:	0039      	movs	r1, r7
 80030b0:	9803      	ldr	r0, [sp, #12]
 80030b2:	f7ff ffa7 	bl	8003004 <__sfputs_r>
 80030b6:	3001      	adds	r0, #1
 80030b8:	d100      	bne.n	80030bc <_vfiprintf_r+0x94>
 80030ba:	e0af      	b.n	800321c <_vfiprintf_r+0x1f4>
 80030bc:	6963      	ldr	r3, [r4, #20]
 80030be:	9a05      	ldr	r2, [sp, #20]
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	6163      	str	r3, [r4, #20]
 80030c4:	7833      	ldrb	r3, [r6, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d100      	bne.n	80030cc <_vfiprintf_r+0xa4>
 80030ca:	e0a7      	b.n	800321c <_vfiprintf_r+0x1f4>
 80030cc:	2201      	movs	r2, #1
 80030ce:	2300      	movs	r3, #0
 80030d0:	4252      	negs	r2, r2
 80030d2:	6062      	str	r2, [r4, #4]
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	3254      	adds	r2, #84	; 0x54
 80030d8:	1852      	adds	r2, r2, r1
 80030da:	1c75      	adds	r5, r6, #1
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	60e3      	str	r3, [r4, #12]
 80030e0:	60a3      	str	r3, [r4, #8]
 80030e2:	7013      	strb	r3, [r2, #0]
 80030e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80030e6:	4b59      	ldr	r3, [pc, #356]	; (800324c <_vfiprintf_r+0x224>)
 80030e8:	2205      	movs	r2, #5
 80030ea:	0018      	movs	r0, r3
 80030ec:	7829      	ldrb	r1, [r5, #0]
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	f000 fb26 	bl	8003740 <memchr>
 80030f4:	1c6e      	adds	r6, r5, #1
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d11f      	bne.n	800313a <_vfiprintf_r+0x112>
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	06d3      	lsls	r3, r2, #27
 80030fe:	d504      	bpl.n	800310a <_vfiprintf_r+0xe2>
 8003100:	2353      	movs	r3, #83	; 0x53
 8003102:	a904      	add	r1, sp, #16
 8003104:	185b      	adds	r3, r3, r1
 8003106:	2120      	movs	r1, #32
 8003108:	7019      	strb	r1, [r3, #0]
 800310a:	0713      	lsls	r3, r2, #28
 800310c:	d504      	bpl.n	8003118 <_vfiprintf_r+0xf0>
 800310e:	2353      	movs	r3, #83	; 0x53
 8003110:	a904      	add	r1, sp, #16
 8003112:	185b      	adds	r3, r3, r1
 8003114:	212b      	movs	r1, #43	; 0x2b
 8003116:	7019      	strb	r1, [r3, #0]
 8003118:	782b      	ldrb	r3, [r5, #0]
 800311a:	2b2a      	cmp	r3, #42	; 0x2a
 800311c:	d016      	beq.n	800314c <_vfiprintf_r+0x124>
 800311e:	002e      	movs	r6, r5
 8003120:	2100      	movs	r1, #0
 8003122:	200a      	movs	r0, #10
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	7832      	ldrb	r2, [r6, #0]
 8003128:	1c75      	adds	r5, r6, #1
 800312a:	3a30      	subs	r2, #48	; 0x30
 800312c:	2a09      	cmp	r2, #9
 800312e:	d94e      	bls.n	80031ce <_vfiprintf_r+0x1a6>
 8003130:	2900      	cmp	r1, #0
 8003132:	d111      	bne.n	8003158 <_vfiprintf_r+0x130>
 8003134:	e017      	b.n	8003166 <_vfiprintf_r+0x13e>
 8003136:	3601      	adds	r6, #1
 8003138:	e7af      	b.n	800309a <_vfiprintf_r+0x72>
 800313a:	9b05      	ldr	r3, [sp, #20]
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	1ac0      	subs	r0, r0, r3
 8003140:	2301      	movs	r3, #1
 8003142:	4083      	lsls	r3, r0
 8003144:	4313      	orrs	r3, r2
 8003146:	0035      	movs	r5, r6
 8003148:	6023      	str	r3, [r4, #0]
 800314a:	e7cc      	b.n	80030e6 <_vfiprintf_r+0xbe>
 800314c:	9b07      	ldr	r3, [sp, #28]
 800314e:	1d19      	adds	r1, r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	9107      	str	r1, [sp, #28]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db01      	blt.n	800315c <_vfiprintf_r+0x134>
 8003158:	930b      	str	r3, [sp, #44]	; 0x2c
 800315a:	e004      	b.n	8003166 <_vfiprintf_r+0x13e>
 800315c:	425b      	negs	r3, r3
 800315e:	60e3      	str	r3, [r4, #12]
 8003160:	2302      	movs	r3, #2
 8003162:	4313      	orrs	r3, r2
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	7833      	ldrb	r3, [r6, #0]
 8003168:	2b2e      	cmp	r3, #46	; 0x2e
 800316a:	d10a      	bne.n	8003182 <_vfiprintf_r+0x15a>
 800316c:	7873      	ldrb	r3, [r6, #1]
 800316e:	2b2a      	cmp	r3, #42	; 0x2a
 8003170:	d135      	bne.n	80031de <_vfiprintf_r+0x1b6>
 8003172:	9b07      	ldr	r3, [sp, #28]
 8003174:	3602      	adds	r6, #2
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	9207      	str	r2, [sp, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db2b      	blt.n	80031d8 <_vfiprintf_r+0x1b0>
 8003180:	9309      	str	r3, [sp, #36]	; 0x24
 8003182:	4d33      	ldr	r5, [pc, #204]	; (8003250 <_vfiprintf_r+0x228>)
 8003184:	2203      	movs	r2, #3
 8003186:	0028      	movs	r0, r5
 8003188:	7831      	ldrb	r1, [r6, #0]
 800318a:	f000 fad9 	bl	8003740 <memchr>
 800318e:	2800      	cmp	r0, #0
 8003190:	d006      	beq.n	80031a0 <_vfiprintf_r+0x178>
 8003192:	2340      	movs	r3, #64	; 0x40
 8003194:	1b40      	subs	r0, r0, r5
 8003196:	4083      	lsls	r3, r0
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	3601      	adds	r6, #1
 800319c:	4313      	orrs	r3, r2
 800319e:	6023      	str	r3, [r4, #0]
 80031a0:	7831      	ldrb	r1, [r6, #0]
 80031a2:	2206      	movs	r2, #6
 80031a4:	482b      	ldr	r0, [pc, #172]	; (8003254 <_vfiprintf_r+0x22c>)
 80031a6:	1c75      	adds	r5, r6, #1
 80031a8:	7621      	strb	r1, [r4, #24]
 80031aa:	f000 fac9 	bl	8003740 <memchr>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d043      	beq.n	800323a <_vfiprintf_r+0x212>
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <_vfiprintf_r+0x230>)
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d125      	bne.n	8003204 <_vfiprintf_r+0x1dc>
 80031b8:	2207      	movs	r2, #7
 80031ba:	9b07      	ldr	r3, [sp, #28]
 80031bc:	3307      	adds	r3, #7
 80031be:	4393      	bics	r3, r2
 80031c0:	3308      	adds	r3, #8
 80031c2:	9307      	str	r3, [sp, #28]
 80031c4:	6963      	ldr	r3, [r4, #20]
 80031c6:	9a04      	ldr	r2, [sp, #16]
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	6163      	str	r3, [r4, #20]
 80031cc:	e764      	b.n	8003098 <_vfiprintf_r+0x70>
 80031ce:	4343      	muls	r3, r0
 80031d0:	002e      	movs	r6, r5
 80031d2:	2101      	movs	r1, #1
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	e7a6      	b.n	8003126 <_vfiprintf_r+0xfe>
 80031d8:	2301      	movs	r3, #1
 80031da:	425b      	negs	r3, r3
 80031dc:	e7d0      	b.n	8003180 <_vfiprintf_r+0x158>
 80031de:	2300      	movs	r3, #0
 80031e0:	200a      	movs	r0, #10
 80031e2:	001a      	movs	r2, r3
 80031e4:	3601      	adds	r6, #1
 80031e6:	6063      	str	r3, [r4, #4]
 80031e8:	7831      	ldrb	r1, [r6, #0]
 80031ea:	1c75      	adds	r5, r6, #1
 80031ec:	3930      	subs	r1, #48	; 0x30
 80031ee:	2909      	cmp	r1, #9
 80031f0:	d903      	bls.n	80031fa <_vfiprintf_r+0x1d2>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0c5      	beq.n	8003182 <_vfiprintf_r+0x15a>
 80031f6:	9209      	str	r2, [sp, #36]	; 0x24
 80031f8:	e7c3      	b.n	8003182 <_vfiprintf_r+0x15a>
 80031fa:	4342      	muls	r2, r0
 80031fc:	002e      	movs	r6, r5
 80031fe:	2301      	movs	r3, #1
 8003200:	1852      	adds	r2, r2, r1
 8003202:	e7f1      	b.n	80031e8 <_vfiprintf_r+0x1c0>
 8003204:	aa07      	add	r2, sp, #28
 8003206:	9200      	str	r2, [sp, #0]
 8003208:	0021      	movs	r1, r4
 800320a:	003a      	movs	r2, r7
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <_vfiprintf_r+0x234>)
 800320e:	9803      	ldr	r0, [sp, #12]
 8003210:	e000      	b.n	8003214 <_vfiprintf_r+0x1ec>
 8003212:	bf00      	nop
 8003214:	9004      	str	r0, [sp, #16]
 8003216:	9b04      	ldr	r3, [sp, #16]
 8003218:	3301      	adds	r3, #1
 800321a:	d1d3      	bne.n	80031c4 <_vfiprintf_r+0x19c>
 800321c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800321e:	07db      	lsls	r3, r3, #31
 8003220:	d405      	bmi.n	800322e <_vfiprintf_r+0x206>
 8003222:	89bb      	ldrh	r3, [r7, #12]
 8003224:	059b      	lsls	r3, r3, #22
 8003226:	d402      	bmi.n	800322e <_vfiprintf_r+0x206>
 8003228:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800322a:	f7ff fcd0 	bl	8002bce <__retarget_lock_release_recursive>
 800322e:	89bb      	ldrh	r3, [r7, #12]
 8003230:	065b      	lsls	r3, r3, #25
 8003232:	d500      	bpl.n	8003236 <_vfiprintf_r+0x20e>
 8003234:	e71d      	b.n	8003072 <_vfiprintf_r+0x4a>
 8003236:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003238:	e71d      	b.n	8003076 <_vfiprintf_r+0x4e>
 800323a:	aa07      	add	r2, sp, #28
 800323c:	9200      	str	r2, [sp, #0]
 800323e:	0021      	movs	r1, r4
 8003240:	003a      	movs	r2, r7
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <_vfiprintf_r+0x234>)
 8003244:	9803      	ldr	r0, [sp, #12]
 8003246:	f000 f87b 	bl	8003340 <_printf_i>
 800324a:	e7e3      	b.n	8003214 <_vfiprintf_r+0x1ec>
 800324c:	0800398f 	.word	0x0800398f
 8003250:	08003995 	.word	0x08003995
 8003254:	08003999 	.word	0x08003999
 8003258:	00000000 	.word	0x00000000
 800325c:	08003005 	.word	0x08003005

08003260 <_printf_common>:
 8003260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003262:	0016      	movs	r6, r2
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	688a      	ldr	r2, [r1, #8]
 8003268:	690b      	ldr	r3, [r1, #16]
 800326a:	000c      	movs	r4, r1
 800326c:	9000      	str	r0, [sp, #0]
 800326e:	4293      	cmp	r3, r2
 8003270:	da00      	bge.n	8003274 <_printf_common+0x14>
 8003272:	0013      	movs	r3, r2
 8003274:	0022      	movs	r2, r4
 8003276:	6033      	str	r3, [r6, #0]
 8003278:	3243      	adds	r2, #67	; 0x43
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	2a00      	cmp	r2, #0
 800327e:	d001      	beq.n	8003284 <_printf_common+0x24>
 8003280:	3301      	adds	r3, #1
 8003282:	6033      	str	r3, [r6, #0]
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	069b      	lsls	r3, r3, #26
 8003288:	d502      	bpl.n	8003290 <_printf_common+0x30>
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	3302      	adds	r3, #2
 800328e:	6033      	str	r3, [r6, #0]
 8003290:	6822      	ldr	r2, [r4, #0]
 8003292:	2306      	movs	r3, #6
 8003294:	0015      	movs	r5, r2
 8003296:	401d      	ands	r5, r3
 8003298:	421a      	tst	r2, r3
 800329a:	d027      	beq.n	80032ec <_printf_common+0x8c>
 800329c:	0023      	movs	r3, r4
 800329e:	3343      	adds	r3, #67	; 0x43
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	4193      	sbcs	r3, r2
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	0692      	lsls	r2, r2, #26
 80032aa:	d430      	bmi.n	800330e <_printf_common+0xae>
 80032ac:	0022      	movs	r2, r4
 80032ae:	9901      	ldr	r1, [sp, #4]
 80032b0:	9800      	ldr	r0, [sp, #0]
 80032b2:	9d08      	ldr	r5, [sp, #32]
 80032b4:	3243      	adds	r2, #67	; 0x43
 80032b6:	47a8      	blx	r5
 80032b8:	3001      	adds	r0, #1
 80032ba:	d025      	beq.n	8003308 <_printf_common+0xa8>
 80032bc:	2206      	movs	r2, #6
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	2500      	movs	r5, #0
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d105      	bne.n	80032d4 <_printf_common+0x74>
 80032c8:	6833      	ldr	r3, [r6, #0]
 80032ca:	68e5      	ldr	r5, [r4, #12]
 80032cc:	1aed      	subs	r5, r5, r3
 80032ce:	43eb      	mvns	r3, r5
 80032d0:	17db      	asrs	r3, r3, #31
 80032d2:	401d      	ands	r5, r3
 80032d4:	68a3      	ldr	r3, [r4, #8]
 80032d6:	6922      	ldr	r2, [r4, #16]
 80032d8:	4293      	cmp	r3, r2
 80032da:	dd01      	ble.n	80032e0 <_printf_common+0x80>
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	18ed      	adds	r5, r5, r3
 80032e0:	2600      	movs	r6, #0
 80032e2:	42b5      	cmp	r5, r6
 80032e4:	d120      	bne.n	8003328 <_printf_common+0xc8>
 80032e6:	2000      	movs	r0, #0
 80032e8:	e010      	b.n	800330c <_printf_common+0xac>
 80032ea:	3501      	adds	r5, #1
 80032ec:	68e3      	ldr	r3, [r4, #12]
 80032ee:	6832      	ldr	r2, [r6, #0]
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	42ab      	cmp	r3, r5
 80032f4:	ddd2      	ble.n	800329c <_printf_common+0x3c>
 80032f6:	0022      	movs	r2, r4
 80032f8:	2301      	movs	r3, #1
 80032fa:	9901      	ldr	r1, [sp, #4]
 80032fc:	9800      	ldr	r0, [sp, #0]
 80032fe:	9f08      	ldr	r7, [sp, #32]
 8003300:	3219      	adds	r2, #25
 8003302:	47b8      	blx	r7
 8003304:	3001      	adds	r0, #1
 8003306:	d1f0      	bne.n	80032ea <_printf_common+0x8a>
 8003308:	2001      	movs	r0, #1
 800330a:	4240      	negs	r0, r0
 800330c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800330e:	2030      	movs	r0, #48	; 0x30
 8003310:	18e1      	adds	r1, r4, r3
 8003312:	3143      	adds	r1, #67	; 0x43
 8003314:	7008      	strb	r0, [r1, #0]
 8003316:	0021      	movs	r1, r4
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	3145      	adds	r1, #69	; 0x45
 800331c:	7809      	ldrb	r1, [r1, #0]
 800331e:	18a2      	adds	r2, r4, r2
 8003320:	3243      	adds	r2, #67	; 0x43
 8003322:	3302      	adds	r3, #2
 8003324:	7011      	strb	r1, [r2, #0]
 8003326:	e7c1      	b.n	80032ac <_printf_common+0x4c>
 8003328:	0022      	movs	r2, r4
 800332a:	2301      	movs	r3, #1
 800332c:	9901      	ldr	r1, [sp, #4]
 800332e:	9800      	ldr	r0, [sp, #0]
 8003330:	9f08      	ldr	r7, [sp, #32]
 8003332:	321a      	adds	r2, #26
 8003334:	47b8      	blx	r7
 8003336:	3001      	adds	r0, #1
 8003338:	d0e6      	beq.n	8003308 <_printf_common+0xa8>
 800333a:	3601      	adds	r6, #1
 800333c:	e7d1      	b.n	80032e2 <_printf_common+0x82>
	...

08003340 <_printf_i>:
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b08b      	sub	sp, #44	; 0x2c
 8003344:	9206      	str	r2, [sp, #24]
 8003346:	000a      	movs	r2, r1
 8003348:	3243      	adds	r2, #67	; 0x43
 800334a:	9307      	str	r3, [sp, #28]
 800334c:	9005      	str	r0, [sp, #20]
 800334e:	9204      	str	r2, [sp, #16]
 8003350:	7e0a      	ldrb	r2, [r1, #24]
 8003352:	000c      	movs	r4, r1
 8003354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003356:	2a78      	cmp	r2, #120	; 0x78
 8003358:	d809      	bhi.n	800336e <_printf_i+0x2e>
 800335a:	2a62      	cmp	r2, #98	; 0x62
 800335c:	d80b      	bhi.n	8003376 <_printf_i+0x36>
 800335e:	2a00      	cmp	r2, #0
 8003360:	d100      	bne.n	8003364 <_printf_i+0x24>
 8003362:	e0be      	b.n	80034e2 <_printf_i+0x1a2>
 8003364:	497c      	ldr	r1, [pc, #496]	; (8003558 <_printf_i+0x218>)
 8003366:	9103      	str	r1, [sp, #12]
 8003368:	2a58      	cmp	r2, #88	; 0x58
 800336a:	d100      	bne.n	800336e <_printf_i+0x2e>
 800336c:	e093      	b.n	8003496 <_printf_i+0x156>
 800336e:	0026      	movs	r6, r4
 8003370:	3642      	adds	r6, #66	; 0x42
 8003372:	7032      	strb	r2, [r6, #0]
 8003374:	e022      	b.n	80033bc <_printf_i+0x7c>
 8003376:	0010      	movs	r0, r2
 8003378:	3863      	subs	r0, #99	; 0x63
 800337a:	2815      	cmp	r0, #21
 800337c:	d8f7      	bhi.n	800336e <_printf_i+0x2e>
 800337e:	f7fc fec3 	bl	8000108 <__gnu_thumb1_case_shi>
 8003382:	0016      	.short	0x0016
 8003384:	fff6001f 	.word	0xfff6001f
 8003388:	fff6fff6 	.word	0xfff6fff6
 800338c:	001ffff6 	.word	0x001ffff6
 8003390:	fff6fff6 	.word	0xfff6fff6
 8003394:	fff6fff6 	.word	0xfff6fff6
 8003398:	003600a3 	.word	0x003600a3
 800339c:	fff60083 	.word	0xfff60083
 80033a0:	00b4fff6 	.word	0x00b4fff6
 80033a4:	0036fff6 	.word	0x0036fff6
 80033a8:	fff6fff6 	.word	0xfff6fff6
 80033ac:	0087      	.short	0x0087
 80033ae:	0026      	movs	r6, r4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	3642      	adds	r6, #66	; 0x42
 80033b4:	1d11      	adds	r1, r2, #4
 80033b6:	6019      	str	r1, [r3, #0]
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	7033      	strb	r3, [r6, #0]
 80033bc:	2301      	movs	r3, #1
 80033be:	e0a2      	b.n	8003506 <_printf_i+0x1c6>
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	6809      	ldr	r1, [r1, #0]
 80033c4:	1d02      	adds	r2, r0, #4
 80033c6:	060d      	lsls	r5, r1, #24
 80033c8:	d50b      	bpl.n	80033e2 <_printf_i+0xa2>
 80033ca:	6805      	ldr	r5, [r0, #0]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	2d00      	cmp	r5, #0
 80033d0:	da03      	bge.n	80033da <_printf_i+0x9a>
 80033d2:	232d      	movs	r3, #45	; 0x2d
 80033d4:	9a04      	ldr	r2, [sp, #16]
 80033d6:	426d      	negs	r5, r5
 80033d8:	7013      	strb	r3, [r2, #0]
 80033da:	4b5f      	ldr	r3, [pc, #380]	; (8003558 <_printf_i+0x218>)
 80033dc:	270a      	movs	r7, #10
 80033de:	9303      	str	r3, [sp, #12]
 80033e0:	e01b      	b.n	800341a <_printf_i+0xda>
 80033e2:	6805      	ldr	r5, [r0, #0]
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	0649      	lsls	r1, r1, #25
 80033e8:	d5f1      	bpl.n	80033ce <_printf_i+0x8e>
 80033ea:	b22d      	sxth	r5, r5
 80033ec:	e7ef      	b.n	80033ce <_printf_i+0x8e>
 80033ee:	680d      	ldr	r5, [r1, #0]
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	1d08      	adds	r0, r1, #4
 80033f4:	6018      	str	r0, [r3, #0]
 80033f6:	062e      	lsls	r6, r5, #24
 80033f8:	d501      	bpl.n	80033fe <_printf_i+0xbe>
 80033fa:	680d      	ldr	r5, [r1, #0]
 80033fc:	e003      	b.n	8003406 <_printf_i+0xc6>
 80033fe:	066d      	lsls	r5, r5, #25
 8003400:	d5fb      	bpl.n	80033fa <_printf_i+0xba>
 8003402:	680d      	ldr	r5, [r1, #0]
 8003404:	b2ad      	uxth	r5, r5
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <_printf_i+0x218>)
 8003408:	2708      	movs	r7, #8
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	2a6f      	cmp	r2, #111	; 0x6f
 800340e:	d000      	beq.n	8003412 <_printf_i+0xd2>
 8003410:	3702      	adds	r7, #2
 8003412:	0023      	movs	r3, r4
 8003414:	2200      	movs	r2, #0
 8003416:	3343      	adds	r3, #67	; 0x43
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	6863      	ldr	r3, [r4, #4]
 800341c:	60a3      	str	r3, [r4, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db03      	blt.n	800342a <_printf_i+0xea>
 8003422:	2104      	movs	r1, #4
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	438a      	bics	r2, r1
 8003428:	6022      	str	r2, [r4, #0]
 800342a:	2d00      	cmp	r5, #0
 800342c:	d102      	bne.n	8003434 <_printf_i+0xf4>
 800342e:	9e04      	ldr	r6, [sp, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <_printf_i+0x10e>
 8003434:	9e04      	ldr	r6, [sp, #16]
 8003436:	0028      	movs	r0, r5
 8003438:	0039      	movs	r1, r7
 800343a:	f7fc fef5 	bl	8000228 <__aeabi_uidivmod>
 800343e:	9b03      	ldr	r3, [sp, #12]
 8003440:	3e01      	subs	r6, #1
 8003442:	5c5b      	ldrb	r3, [r3, r1]
 8003444:	7033      	strb	r3, [r6, #0]
 8003446:	002b      	movs	r3, r5
 8003448:	0005      	movs	r5, r0
 800344a:	429f      	cmp	r7, r3
 800344c:	d9f3      	bls.n	8003436 <_printf_i+0xf6>
 800344e:	2f08      	cmp	r7, #8
 8003450:	d109      	bne.n	8003466 <_printf_i+0x126>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	07db      	lsls	r3, r3, #31
 8003456:	d506      	bpl.n	8003466 <_printf_i+0x126>
 8003458:	6862      	ldr	r2, [r4, #4]
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	dc02      	bgt.n	8003466 <_printf_i+0x126>
 8003460:	2330      	movs	r3, #48	; 0x30
 8003462:	3e01      	subs	r6, #1
 8003464:	7033      	strb	r3, [r6, #0]
 8003466:	9b04      	ldr	r3, [sp, #16]
 8003468:	1b9b      	subs	r3, r3, r6
 800346a:	6123      	str	r3, [r4, #16]
 800346c:	9b07      	ldr	r3, [sp, #28]
 800346e:	0021      	movs	r1, r4
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	9805      	ldr	r0, [sp, #20]
 8003474:	9b06      	ldr	r3, [sp, #24]
 8003476:	aa09      	add	r2, sp, #36	; 0x24
 8003478:	f7ff fef2 	bl	8003260 <_printf_common>
 800347c:	3001      	adds	r0, #1
 800347e:	d147      	bne.n	8003510 <_printf_i+0x1d0>
 8003480:	2001      	movs	r0, #1
 8003482:	4240      	negs	r0, r0
 8003484:	b00b      	add	sp, #44	; 0x2c
 8003486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003488:	2220      	movs	r2, #32
 800348a:	6809      	ldr	r1, [r1, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	6022      	str	r2, [r4, #0]
 8003490:	2278      	movs	r2, #120	; 0x78
 8003492:	4932      	ldr	r1, [pc, #200]	; (800355c <_printf_i+0x21c>)
 8003494:	9103      	str	r1, [sp, #12]
 8003496:	0021      	movs	r1, r4
 8003498:	3145      	adds	r1, #69	; 0x45
 800349a:	700a      	strb	r2, [r1, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	c920      	ldmia	r1!, {r5}
 80034a2:	0610      	lsls	r0, r2, #24
 80034a4:	d402      	bmi.n	80034ac <_printf_i+0x16c>
 80034a6:	0650      	lsls	r0, r2, #25
 80034a8:	d500      	bpl.n	80034ac <_printf_i+0x16c>
 80034aa:	b2ad      	uxth	r5, r5
 80034ac:	6019      	str	r1, [r3, #0]
 80034ae:	07d3      	lsls	r3, r2, #31
 80034b0:	d502      	bpl.n	80034b8 <_printf_i+0x178>
 80034b2:	2320      	movs	r3, #32
 80034b4:	4313      	orrs	r3, r2
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	2710      	movs	r7, #16
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	d1a9      	bne.n	8003412 <_printf_i+0xd2>
 80034be:	2220      	movs	r2, #32
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	4393      	bics	r3, r2
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	e7a4      	b.n	8003412 <_printf_i+0xd2>
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	680d      	ldr	r5, [r1, #0]
 80034cc:	1d10      	adds	r0, r2, #4
 80034ce:	6949      	ldr	r1, [r1, #20]
 80034d0:	6018      	str	r0, [r3, #0]
 80034d2:	6813      	ldr	r3, [r2, #0]
 80034d4:	062e      	lsls	r6, r5, #24
 80034d6:	d501      	bpl.n	80034dc <_printf_i+0x19c>
 80034d8:	6019      	str	r1, [r3, #0]
 80034da:	e002      	b.n	80034e2 <_printf_i+0x1a2>
 80034dc:	066d      	lsls	r5, r5, #25
 80034de:	d5fb      	bpl.n	80034d8 <_printf_i+0x198>
 80034e0:	8019      	strh	r1, [r3, #0]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9e04      	ldr	r6, [sp, #16]
 80034e6:	6123      	str	r3, [r4, #16]
 80034e8:	e7c0      	b.n	800346c <_printf_i+0x12c>
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	1d11      	adds	r1, r2, #4
 80034ee:	6019      	str	r1, [r3, #0]
 80034f0:	6816      	ldr	r6, [r2, #0]
 80034f2:	2100      	movs	r1, #0
 80034f4:	0030      	movs	r0, r6
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	f000 f922 	bl	8003740 <memchr>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d001      	beq.n	8003504 <_printf_i+0x1c4>
 8003500:	1b80      	subs	r0, r0, r6
 8003502:	6060      	str	r0, [r4, #4]
 8003504:	6863      	ldr	r3, [r4, #4]
 8003506:	6123      	str	r3, [r4, #16]
 8003508:	2300      	movs	r3, #0
 800350a:	9a04      	ldr	r2, [sp, #16]
 800350c:	7013      	strb	r3, [r2, #0]
 800350e:	e7ad      	b.n	800346c <_printf_i+0x12c>
 8003510:	0032      	movs	r2, r6
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	9906      	ldr	r1, [sp, #24]
 8003516:	9805      	ldr	r0, [sp, #20]
 8003518:	9d07      	ldr	r5, [sp, #28]
 800351a:	47a8      	blx	r5
 800351c:	3001      	adds	r0, #1
 800351e:	d0af      	beq.n	8003480 <_printf_i+0x140>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	079b      	lsls	r3, r3, #30
 8003524:	d415      	bmi.n	8003552 <_printf_i+0x212>
 8003526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003528:	68e0      	ldr	r0, [r4, #12]
 800352a:	4298      	cmp	r0, r3
 800352c:	daaa      	bge.n	8003484 <_printf_i+0x144>
 800352e:	0018      	movs	r0, r3
 8003530:	e7a8      	b.n	8003484 <_printf_i+0x144>
 8003532:	0022      	movs	r2, r4
 8003534:	2301      	movs	r3, #1
 8003536:	9906      	ldr	r1, [sp, #24]
 8003538:	9805      	ldr	r0, [sp, #20]
 800353a:	9e07      	ldr	r6, [sp, #28]
 800353c:	3219      	adds	r2, #25
 800353e:	47b0      	blx	r6
 8003540:	3001      	adds	r0, #1
 8003542:	d09d      	beq.n	8003480 <_printf_i+0x140>
 8003544:	3501      	adds	r5, #1
 8003546:	68e3      	ldr	r3, [r4, #12]
 8003548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	42ab      	cmp	r3, r5
 800354e:	dcf0      	bgt.n	8003532 <_printf_i+0x1f2>
 8003550:	e7e9      	b.n	8003526 <_printf_i+0x1e6>
 8003552:	2500      	movs	r5, #0
 8003554:	e7f7      	b.n	8003546 <_printf_i+0x206>
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	080039a0 	.word	0x080039a0
 800355c:	080039b1 	.word	0x080039b1

08003560 <__swbuf_r>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	0006      	movs	r6, r0
 8003564:	000d      	movs	r5, r1
 8003566:	0014      	movs	r4, r2
 8003568:	2800      	cmp	r0, #0
 800356a:	d004      	beq.n	8003576 <__swbuf_r+0x16>
 800356c:	6a03      	ldr	r3, [r0, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <__swbuf_r+0x16>
 8003572:	f7ff fa2b 	bl	80029cc <__sinit>
 8003576:	69a3      	ldr	r3, [r4, #24]
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	89a3      	ldrh	r3, [r4, #12]
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	d528      	bpl.n	80035d2 <__swbuf_r+0x72>
 8003580:	6923      	ldr	r3, [r4, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d025      	beq.n	80035d2 <__swbuf_r+0x72>
 8003586:	6923      	ldr	r3, [r4, #16]
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	b2ef      	uxtb	r7, r5
 800358c:	1ac0      	subs	r0, r0, r3
 800358e:	6963      	ldr	r3, [r4, #20]
 8003590:	b2ed      	uxtb	r5, r5
 8003592:	4283      	cmp	r3, r0
 8003594:	dc05      	bgt.n	80035a2 <__swbuf_r+0x42>
 8003596:	0021      	movs	r1, r4
 8003598:	0030      	movs	r0, r6
 800359a:	f7ff fcc9 	bl	8002f30 <_fflush_r>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d11d      	bne.n	80035de <__swbuf_r+0x7e>
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	3001      	adds	r0, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	60a3      	str	r3, [r4, #8]
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	6022      	str	r2, [r4, #0]
 80035b0:	701f      	strb	r7, [r3, #0]
 80035b2:	6963      	ldr	r3, [r4, #20]
 80035b4:	4283      	cmp	r3, r0
 80035b6:	d004      	beq.n	80035c2 <__swbuf_r+0x62>
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	07db      	lsls	r3, r3, #31
 80035bc:	d507      	bpl.n	80035ce <__swbuf_r+0x6e>
 80035be:	2d0a      	cmp	r5, #10
 80035c0:	d105      	bne.n	80035ce <__swbuf_r+0x6e>
 80035c2:	0021      	movs	r1, r4
 80035c4:	0030      	movs	r0, r6
 80035c6:	f7ff fcb3 	bl	8002f30 <_fflush_r>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d107      	bne.n	80035de <__swbuf_r+0x7e>
 80035ce:	0028      	movs	r0, r5
 80035d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d2:	0021      	movs	r1, r4
 80035d4:	0030      	movs	r0, r6
 80035d6:	f000 f805 	bl	80035e4 <__swsetup_r>
 80035da:	2800      	cmp	r0, #0
 80035dc:	d0d3      	beq.n	8003586 <__swbuf_r+0x26>
 80035de:	2501      	movs	r5, #1
 80035e0:	426d      	negs	r5, r5
 80035e2:	e7f4      	b.n	80035ce <__swbuf_r+0x6e>

080035e4 <__swsetup_r>:
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <__swsetup_r+0xc4>)
 80035e6:	b570      	push	{r4, r5, r6, lr}
 80035e8:	0005      	movs	r5, r0
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	000c      	movs	r4, r1
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d004      	beq.n	80035fc <__swsetup_r+0x18>
 80035f2:	6a03      	ldr	r3, [r0, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <__swsetup_r+0x18>
 80035f8:	f7ff f9e8 	bl	80029cc <__sinit>
 80035fc:	230c      	movs	r3, #12
 80035fe:	5ee2      	ldrsh	r2, [r4, r3]
 8003600:	b293      	uxth	r3, r2
 8003602:	0711      	lsls	r1, r2, #28
 8003604:	d423      	bmi.n	800364e <__swsetup_r+0x6a>
 8003606:	06d9      	lsls	r1, r3, #27
 8003608:	d407      	bmi.n	800361a <__swsetup_r+0x36>
 800360a:	2309      	movs	r3, #9
 800360c:	2001      	movs	r0, #1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	3337      	adds	r3, #55	; 0x37
 8003612:	4313      	orrs	r3, r2
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	4240      	negs	r0, r0
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	075b      	lsls	r3, r3, #29
 800361c:	d513      	bpl.n	8003646 <__swsetup_r+0x62>
 800361e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003620:	2900      	cmp	r1, #0
 8003622:	d008      	beq.n	8003636 <__swsetup_r+0x52>
 8003624:	0023      	movs	r3, r4
 8003626:	3344      	adds	r3, #68	; 0x44
 8003628:	4299      	cmp	r1, r3
 800362a:	d002      	beq.n	8003632 <__swsetup_r+0x4e>
 800362c:	0028      	movs	r0, r5
 800362e:	f7ff faed 	bl	8002c0c <_free_r>
 8003632:	2300      	movs	r3, #0
 8003634:	6363      	str	r3, [r4, #52]	; 0x34
 8003636:	2224      	movs	r2, #36	; 0x24
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	4393      	bics	r3, r2
 800363c:	81a3      	strh	r3, [r4, #12]
 800363e:	2300      	movs	r3, #0
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	2308      	movs	r3, #8
 8003648:	89a2      	ldrh	r2, [r4, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	81a3      	strh	r3, [r4, #12]
 800364e:	6923      	ldr	r3, [r4, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10b      	bne.n	800366c <__swsetup_r+0x88>
 8003654:	21a0      	movs	r1, #160	; 0xa0
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	0089      	lsls	r1, r1, #2
 800365c:	0092      	lsls	r2, r2, #2
 800365e:	400b      	ands	r3, r1
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <__swsetup_r+0x88>
 8003664:	0021      	movs	r1, r4
 8003666:	0028      	movs	r0, r5
 8003668:	f000 f89e 	bl	80037a8 <__smakebuf_r>
 800366c:	220c      	movs	r2, #12
 800366e:	5ea3      	ldrsh	r3, [r4, r2]
 8003670:	2001      	movs	r0, #1
 8003672:	001a      	movs	r2, r3
 8003674:	b299      	uxth	r1, r3
 8003676:	4002      	ands	r2, r0
 8003678:	4203      	tst	r3, r0
 800367a:	d00f      	beq.n	800369c <__swsetup_r+0xb8>
 800367c:	2200      	movs	r2, #0
 800367e:	60a2      	str	r2, [r4, #8]
 8003680:	6962      	ldr	r2, [r4, #20]
 8003682:	4252      	negs	r2, r2
 8003684:	61a2      	str	r2, [r4, #24]
 8003686:	2000      	movs	r0, #0
 8003688:	6922      	ldr	r2, [r4, #16]
 800368a:	4282      	cmp	r2, r0
 800368c:	d1c4      	bne.n	8003618 <__swsetup_r+0x34>
 800368e:	0609      	lsls	r1, r1, #24
 8003690:	d5c2      	bpl.n	8003618 <__swsetup_r+0x34>
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	4313      	orrs	r3, r2
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	3801      	subs	r0, #1
 800369a:	e7bd      	b.n	8003618 <__swsetup_r+0x34>
 800369c:	0788      	lsls	r0, r1, #30
 800369e:	d400      	bmi.n	80036a2 <__swsetup_r+0xbe>
 80036a0:	6962      	ldr	r2, [r4, #20]
 80036a2:	60a2      	str	r2, [r4, #8]
 80036a4:	e7ef      	b.n	8003686 <__swsetup_r+0xa2>
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	20000064 	.word	0x20000064

080036ac <_raise_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	0004      	movs	r4, r0
 80036b0:	000d      	movs	r5, r1
 80036b2:	291f      	cmp	r1, #31
 80036b4:	d904      	bls.n	80036c0 <_raise_r+0x14>
 80036b6:	2316      	movs	r3, #22
 80036b8:	6003      	str	r3, [r0, #0]
 80036ba:	2001      	movs	r0, #1
 80036bc:	4240      	negs	r0, r0
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <_raise_r+0x24>
 80036c6:	008a      	lsls	r2, r1, #2
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2a00      	cmp	r2, #0
 80036ce:	d108      	bne.n	80036e2 <_raise_r+0x36>
 80036d0:	0020      	movs	r0, r4
 80036d2:	f000 f831 	bl	8003738 <_getpid_r>
 80036d6:	002a      	movs	r2, r5
 80036d8:	0001      	movs	r1, r0
 80036da:	0020      	movs	r0, r4
 80036dc:	f000 f81a 	bl	8003714 <_kill_r>
 80036e0:	e7ed      	b.n	80036be <_raise_r+0x12>
 80036e2:	2000      	movs	r0, #0
 80036e4:	2a01      	cmp	r2, #1
 80036e6:	d0ea      	beq.n	80036be <_raise_r+0x12>
 80036e8:	1c51      	adds	r1, r2, #1
 80036ea:	d103      	bne.n	80036f4 <_raise_r+0x48>
 80036ec:	2316      	movs	r3, #22
 80036ee:	3001      	adds	r0, #1
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	e7e4      	b.n	80036be <_raise_r+0x12>
 80036f4:	2400      	movs	r4, #0
 80036f6:	0028      	movs	r0, r5
 80036f8:	601c      	str	r4, [r3, #0]
 80036fa:	4790      	blx	r2
 80036fc:	0020      	movs	r0, r4
 80036fe:	e7de      	b.n	80036be <_raise_r+0x12>

08003700 <raise>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4b03      	ldr	r3, [pc, #12]	; (8003710 <raise+0x10>)
 8003704:	0001      	movs	r1, r0
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	f7ff ffd0 	bl	80036ac <_raise_r>
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000064 	.word	0x20000064

08003714 <_kill_r>:
 8003714:	2300      	movs	r3, #0
 8003716:	b570      	push	{r4, r5, r6, lr}
 8003718:	4d06      	ldr	r5, [pc, #24]	; (8003734 <_kill_r+0x20>)
 800371a:	0004      	movs	r4, r0
 800371c:	0008      	movs	r0, r1
 800371e:	0011      	movs	r1, r2
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	f7fd f9d9 	bl	8000ad8 <_kill>
 8003726:	1c43      	adds	r3, r0, #1
 8003728:	d103      	bne.n	8003732 <_kill_r+0x1e>
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d000      	beq.n	8003732 <_kill_r+0x1e>
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	2000028c 	.word	0x2000028c

08003738 <_getpid_r>:
 8003738:	b510      	push	{r4, lr}
 800373a:	f7fd f9c7 	bl	8000acc <_getpid>
 800373e:	bd10      	pop	{r4, pc}

08003740 <memchr>:
 8003740:	b2c9      	uxtb	r1, r1
 8003742:	1882      	adds	r2, r0, r2
 8003744:	4290      	cmp	r0, r2
 8003746:	d101      	bne.n	800374c <memchr+0xc>
 8003748:	2000      	movs	r0, #0
 800374a:	4770      	bx	lr
 800374c:	7803      	ldrb	r3, [r0, #0]
 800374e:	428b      	cmp	r3, r1
 8003750:	d0fb      	beq.n	800374a <memchr+0xa>
 8003752:	3001      	adds	r0, #1
 8003754:	e7f6      	b.n	8003744 <memchr+0x4>
	...

08003758 <__swhatbuf_r>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	000e      	movs	r6, r1
 800375c:	001d      	movs	r5, r3
 800375e:	230e      	movs	r3, #14
 8003760:	5ec9      	ldrsh	r1, [r1, r3]
 8003762:	0014      	movs	r4, r2
 8003764:	b096      	sub	sp, #88	; 0x58
 8003766:	2900      	cmp	r1, #0
 8003768:	da0c      	bge.n	8003784 <__swhatbuf_r+0x2c>
 800376a:	89b2      	ldrh	r2, [r6, #12]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	0011      	movs	r1, r2
 8003770:	4019      	ands	r1, r3
 8003772:	421a      	tst	r2, r3
 8003774:	d013      	beq.n	800379e <__swhatbuf_r+0x46>
 8003776:	2100      	movs	r1, #0
 8003778:	3b40      	subs	r3, #64	; 0x40
 800377a:	2000      	movs	r0, #0
 800377c:	6029      	str	r1, [r5, #0]
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	b016      	add	sp, #88	; 0x58
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	466a      	mov	r2, sp
 8003786:	f000 f84d 	bl	8003824 <_fstat_r>
 800378a:	2800      	cmp	r0, #0
 800378c:	dbed      	blt.n	800376a <__swhatbuf_r+0x12>
 800378e:	23f0      	movs	r3, #240	; 0xf0
 8003790:	9901      	ldr	r1, [sp, #4]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	4019      	ands	r1, r3
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <__swhatbuf_r+0x4c>)
 8003798:	18c9      	adds	r1, r1, r3
 800379a:	424b      	negs	r3, r1
 800379c:	4159      	adcs	r1, r3
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	e7ea      	b.n	800377a <__swhatbuf_r+0x22>
 80037a4:	ffffe000 	.word	0xffffe000

080037a8 <__smakebuf_r>:
 80037a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037aa:	2602      	movs	r6, #2
 80037ac:	898b      	ldrh	r3, [r1, #12]
 80037ae:	0005      	movs	r5, r0
 80037b0:	000c      	movs	r4, r1
 80037b2:	4233      	tst	r3, r6
 80037b4:	d006      	beq.n	80037c4 <__smakebuf_r+0x1c>
 80037b6:	0023      	movs	r3, r4
 80037b8:	3347      	adds	r3, #71	; 0x47
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	6123      	str	r3, [r4, #16]
 80037be:	2301      	movs	r3, #1
 80037c0:	6163      	str	r3, [r4, #20]
 80037c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80037c4:	466a      	mov	r2, sp
 80037c6:	ab01      	add	r3, sp, #4
 80037c8:	f7ff ffc6 	bl	8003758 <__swhatbuf_r>
 80037cc:	9900      	ldr	r1, [sp, #0]
 80037ce:	0007      	movs	r7, r0
 80037d0:	0028      	movs	r0, r5
 80037d2:	f7ff fa91 	bl	8002cf8 <_malloc_r>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	d108      	bne.n	80037ec <__smakebuf_r+0x44>
 80037da:	220c      	movs	r2, #12
 80037dc:	5ea3      	ldrsh	r3, [r4, r2]
 80037de:	059a      	lsls	r2, r3, #22
 80037e0:	d4ef      	bmi.n	80037c2 <__smakebuf_r+0x1a>
 80037e2:	2203      	movs	r2, #3
 80037e4:	4393      	bics	r3, r2
 80037e6:	431e      	orrs	r6, r3
 80037e8:	81a6      	strh	r6, [r4, #12]
 80037ea:	e7e4      	b.n	80037b6 <__smakebuf_r+0xe>
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	89a2      	ldrh	r2, [r4, #12]
 80037f0:	6020      	str	r0, [r4, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	9b00      	ldr	r3, [sp, #0]
 80037f8:	6120      	str	r0, [r4, #16]
 80037fa:	6163      	str	r3, [r4, #20]
 80037fc:	9b01      	ldr	r3, [sp, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00c      	beq.n	800381c <__smakebuf_r+0x74>
 8003802:	0028      	movs	r0, r5
 8003804:	230e      	movs	r3, #14
 8003806:	5ee1      	ldrsh	r1, [r4, r3]
 8003808:	f000 f81e 	bl	8003848 <_isatty_r>
 800380c:	2800      	cmp	r0, #0
 800380e:	d005      	beq.n	800381c <__smakebuf_r+0x74>
 8003810:	2303      	movs	r3, #3
 8003812:	89a2      	ldrh	r2, [r4, #12]
 8003814:	439a      	bics	r2, r3
 8003816:	3b02      	subs	r3, #2
 8003818:	4313      	orrs	r3, r2
 800381a:	81a3      	strh	r3, [r4, #12]
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	433b      	orrs	r3, r7
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	e7ce      	b.n	80037c2 <__smakebuf_r+0x1a>

08003824 <_fstat_r>:
 8003824:	2300      	movs	r3, #0
 8003826:	b570      	push	{r4, r5, r6, lr}
 8003828:	4d06      	ldr	r5, [pc, #24]	; (8003844 <_fstat_r+0x20>)
 800382a:	0004      	movs	r4, r0
 800382c:	0008      	movs	r0, r1
 800382e:	0011      	movs	r1, r2
 8003830:	602b      	str	r3, [r5, #0]
 8003832:	f7fd f9b0 	bl	8000b96 <_fstat>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	d103      	bne.n	8003842 <_fstat_r+0x1e>
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d000      	beq.n	8003842 <_fstat_r+0x1e>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	2000028c 	.word	0x2000028c

08003848 <_isatty_r>:
 8003848:	2300      	movs	r3, #0
 800384a:	b570      	push	{r4, r5, r6, lr}
 800384c:	4d06      	ldr	r5, [pc, #24]	; (8003868 <_isatty_r+0x20>)
 800384e:	0004      	movs	r4, r0
 8003850:	0008      	movs	r0, r1
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	f7fd f9ad 	bl	8000bb2 <_isatty>
 8003858:	1c43      	adds	r3, r0, #1
 800385a:	d103      	bne.n	8003864 <_isatty_r+0x1c>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d000      	beq.n	8003864 <_isatty_r+0x1c>
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	2000028c 	.word	0x2000028c

0800386c <_init>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr

08003878 <_fini>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr
